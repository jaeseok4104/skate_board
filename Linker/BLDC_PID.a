;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;#include <delay.h>
;
;#define MOTOR2_DIRECTION PORTB.3
;#define MOTOR1_DIRECTION PORTB.4
;#define HALLA PINE.5
;#define HALLB PINE.6
;#define HALLC PINE.7
;#define Kp 10
;#define Ki 0
;#define Kd 0
;#define lessDuty 0.95
;#define topDuty 0.52
;
;//ENCODER
;long int hall_sensor_value = 0;
;
;//USART
;unsigned char RXC_BUFF[20] = {0x0a,};

	.DSEG
;unsigned char RXC_index = 0;
;unsigned char SET_RXC1 = 0;
;unsigned char recByte = 0;
;unsigned char BUFF = 0;
;
;//PID
;unsigned char update = 0;
;float Time = 0.01;
;
;void GPIO_SETUP(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021     //PWM
; 0000 0022     DDRB.6 = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0023     DDRB.7 = 1;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0024 
; 0000 0025     //motor direction
; 0000 0026     DDRB.4 = 1;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0027     DDRB.3 = 1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0028 
; 0000 0029     PORTB.4 = 0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002A     PORTB.3 = 0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002B 
; 0000 002C     //nBrake;
; 0000 002D     DDRB.2 = 1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002E     DDRB.5 = 1;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002F 
; 0000 0030     PORTB.2 = 0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0031     PORTB.5 = 0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0032 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;void USART1_init(void)
; 0000 0035 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0036     UCSR1A = 0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0037     UCSR1B = (1<<TXEN1)|(1<<RXEN0)|(1<<RXCIE0);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0038     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0039     UCSR1C &= ~(0<<UMSEL1);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003A 
; 0000 003B     UBRR1H = 0;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003C     UBRR1L = 7;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003D }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;void Data_Tx1(unsigned char bData)
; 0000 0040 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0041     while(!(UCSR1A & (1<<UDRE1))); //wait until data can be loaded.
;	bData -> Y+0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0042     UDR1 = bData; //data load to TxD buffer
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0043 }
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;unsigned char Data_Rx1(void)
; 0000 0046 {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0047     while(!(UCSR1A & (1<<RXC1))); // RXC0 flag is USART Receive Complete
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0048     return UDR1;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0049 }
;PCODE: $0000004E VOL: 0
;
;//sprintf printing function
;void string_tx1(unsigned char *str)
; 0000 004D {
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 004E     while (*str)
;	*str -> Y+0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004F     {
; 0000 0050         Data_Tx1(*str++);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0051     }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0052 }
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;void EXT_INT_init(void)
; 0000 0055 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0056     EICRB = (1<<ISC50)|(1<<ISC60)|(1<<ISC70);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0057     EIMSK = (1<<INT5)|(1<<INT6)|(1<<INT7);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0058 
; 0000 0059     DDRE.5 = 0;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005A     DDRE.6 = 0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 005B     DDRE.7 = 0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 005C }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;
;void TIMER_init(void)
; 0000 005F {
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0060     //TIMER2
; 0000 0061     TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// 일반모드, 1024분주;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0062 
; 0000 0063     TCCR1A = (1<<WGM11)|(1<<COM1C1)|(1<<COM1B1);    TCCR1B = (1<<WGM13)|(1<<WGM12); // WGM bit setting
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0064     TCCR1B |= (1<<CS10); // Clock source choie
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0065 
; 0000 0066     OCR2 = 150;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0067     OCR1B = 0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0068     OCR1CH = 0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0069     OCR1CL = 0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 006A     ICR1 = 800;//1200; //664
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 006B 
; 0000 006C     TIMSK = (1<<OCIE2);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 006D }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;
;unsigned int MV_Rebuilding(int less, int top, long int MV)
; 0000 0070 {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0071     unsigned int reMV;
; 0000 0072     if(MV>0)
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;	less -> Y+8
;	top -> Y+6
;	MV -> Y+2
;	reMV -> R16,R17
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0073     {
; 0000 0074         if(top >= MV && MV >= less) return (unsigned int)MV;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0075         else if(MV > top) return (unsigned int)top;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0076         else if(less > MV) return (unsigned int)less;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0077     }
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0078     if(MV < 0)
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0079     {
; 0000 007A         reMV = -MV;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 007B         if(top >= reMV && MV >= less) return (unsigned int)reMV;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 007C         else if(reMV > top) return (unsigned int)top;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 007D         else if(less > reMV) return (unsigned int)less;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 007E     }
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 007F     return 0;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0080 }
;PCODE: $000000FB VOL: 0
;
;
;long int PID_Controller(int Goal, float now, float* integral, float* Err_previous)
; 0000 0084 {
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0085     long int pErr = 0;
; 0000 0086     float dErr = 0;
; 0000 0087     long int MV = 0;
; 0000 0088     float Err = 0;
; 0000 0089     unsigned char BUFF[128]={0,};
; 0000 008A 
; 0000 008B     Err = Goal - now; //ERROR
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;	Goal -> Y+152
;	now -> Y+148
;	*integral -> Y+146
;	*Err_previous -> Y+144
;	pErr -> Y+140
;	dErr -> Y+136
;	MV -> Y+132
;	Err -> Y+128
;	BUFF -> Y+0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 008C 
; 0000 008D     pErr = (Kp*Err); // P
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 008E     *integral = *integral +(Ki * Err * Time); // I
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 008F     dErr = (Kd * (Err - *Err_previous)) / Time; // D
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0090     MV = (long int)(pErr+ *integral + dErr);// PID Control Volume
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0091 
; 0000 0092     //sprintf(BUFF, "pErr=%d, integral=%d, dErr=%d, MV=%d  Err=%d\r\n", (int)pErr, *integral, dErr, MV, (int)Err);
; 0000 0093     //string_tx1(BUFF);
; 0000 0094 
; 0000 0095     *Err_previous = Err;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0096 
; 0000 0097     return MV;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0098 }
;PCODE: $00000126 VOL: 0
;
;void producePWM(long int OCR_val, unsigned int OCR_SET)
; 0000 009B {
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 009C     if(OCR_val < 0)
;	OCR_val -> Y+2
;	OCR_SET -> Y+0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 009D     {
; 0000 009E         MOTOR1_DIRECTION = 1;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 009F         MOTOR2_DIRECTION = 1;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00A0 
; 0000 00A1         OCR1B = OCR_SET;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00A2         OCR1CH = (OCR_SET & 0xFF00) >> 8;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00A3         OCR1CL = 0x00FF & (OCR_SET);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00A4     }
; 0000 00A5     else if(OCR_val >= 0)
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00A6     {
; 0000 00A7         MOTOR1_DIRECTION = 0;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00A8         MOTOR2_DIRECTION = 0;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00A9 
; 0000 00AA         OCR1B = OCR_SET;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00AB         OCR1CH = (OCR_SET & 0xFF00) >> 8;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00AC         OCR1CL = 0x00FF & (OCR_SET);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00AD     }
; 0000 00AE }
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;
;interrupt [TIM2_COMP] void timer2_overflow(void)
; 0000 00B1 {
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00B2     update = 1;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00B3 }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;
;interrupt [USART1_RXC]void int_USART1(void)
; 0000 00B6 {
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00B7     BUFF = UDR1;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00B8 
; 0000 00B9     if(BUFF != 0x0a)
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00BA     {
; 0000 00BB         SET_RXC1 = 0;
;PCODE: $0000015E VOL: 0
; 0000 00BC         RXC_BUFF[RXC_index] = BUFF;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00BD         RXC_index++;
;PCODE: $00000163 VOL: 0
; 0000 00BE     }
; 0000 00BF     else
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00C0     {
; 0000 00C1         RXC_index = 0;
;PCODE: $00000166 VOL: 0
; 0000 00C2         SET_RXC1 = 1;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00C3     }
;PCODE: $00000169 VOL: 0
; 0000 00C4 }
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;
;interrupt [EXT_INT5] void hall_sensor_detection1(void)
; 0000 00C7 {
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00C8     if(HALLA != HALLB) hall_sensor_value--;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00C9     else hall_sensor_value++;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00CA }
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;
;interrupt [EXT_INT6] void hall_sensor_detection2(void)
; 0000 00CD {
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00CE     if(HALLB != HALLC) hall_sensor_value--;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00CF     else hall_sensor_value++;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00D0 }
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;
;interrupt [EXT_INT7] void hall_sensor_detection3(void)
; 0000 00D3 {
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00D4     if(HALLC != HALLA) hall_sensor_value--;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00D5     else hall_sensor_value++;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00D6 }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;
;void main(void)
; 0000 00D9 {
;PCODE: $000001B5 VOL: 0
; 0000 00DA     int i = 0;
; 0000 00DB 
; 0000 00DC     int Goal = 0;
; 0000 00DD     float Err = 0;
; 0000 00DE     float integral = 0;
; 0000 00DF     float now = 0;
; 0000 00E0     float now_check = 0;
; 0000 00E1 
; 0000 00E2     unsigned char update_cnt = 0;
; 0000 00E3     char BUFF[128]={0,};
; 0000 00E4 
; 0000 00E5     //Controll Volume
; 0000 00E6     long int OCR_val = 0;
; 0000 00E7     unsigned int OCR_SET = 0;
; 0000 00E8 
; 0000 00E9     USART1_init();
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;	i -> R16,R17
;	Goal -> R18,R19
;	Err -> Y+146
;	integral -> Y+142
;	now -> Y+138
;	now_check -> Y+134
;	update_cnt -> R21
;	BUFF -> Y+6
;	OCR_val -> Y+2
;	OCR_SET -> Y+0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 00EA     TIMER_init();
;PCODE: $000001C2 VOL: 0
; 0000 00EB     GPIO_SETUP();
;PCODE: $000001C3 VOL: 0
; 0000 00EC     EXT_INT_init();
;PCODE: $000001C4 VOL: 0
; 0000 00ED 
; 0000 00EE     SREG |= 0x80;
;PCODE: $000001C5 VOL: 0
; 0000 00EF 
; 0000 00F0     while(1)
;PCODE: $000001C6 VOL: 0
; 0000 00F1     {
; 0000 00F2 
; 0000 00F3 
; 0000 00F4         if(update)
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00F5         {
; 0000 00F6             now = (hall_sensor_value / 0.001);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 00F7 
; 0000 00F8             if(SET_RXC1)
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 00F9             {
; 0000 00FA                 Goal = atoi(RXC_BUFF);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00FB                 SET_RXC1 = 0;
;PCODE: $000001D5 VOL: 0
; 0000 00FC             }
; 0000 00FD             for(i = 0; i<20; i++)
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 00FE             {
; 0000 00FF                 RXC_BUFF[i] = 0;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0100             }
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0101 
; 0000 0102             OCR_val = PID_Controller(Goal, now, &integral, &Err);
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0103             OCR_SET = MV_Rebuilding((ICR1*lessDuty), (ICR1*topDuty), OCR_val);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0104             producePWM(OCR_val, OCR_SET);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0105 
; 0000 0106             update_cnt++;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0107             update = 0;
;PCODE: $00000209 VOL: 0
; 0000 0108             hall_sensor_value = 0;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0109         }
; 0000 010A 
; 0000 010B         if(update_cnt == 10)
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 010C         {
; 0000 010D             sprintf(BUFF, "Goal=%d,%d,%d,%d,%d \r\n", Goal,(int)now, (int)Err, OCR_val,OCR_SET*((MOTOR1_DIRECTION)?-1:1));
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 010E             string_tx1(BUFF);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 010F             update_cnt = 0;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0110         }
; 0000 0111     }
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0112 }
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
