
AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\PID\List\PID.asm Thu Dec 26 10:18:25 2019

C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1061): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1062): warning: Register r6 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1063): warning: Register r9 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1064): warning: Register r8 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1065): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _RXC_index=R7
                 	.DEF _SET_RXC1=R6
                 	.DEF _recByte=R9
                 	.DEF _BUFF=R8
                 	.DEF _tick=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0105 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 01c0 	JMP  _hall_sensor_detection1
00000e 940c 01d4 	JMP  _hall_sensor_detection2
000010 940c 01e8 	JMP  _hall_sensor_detection3
000012 940c 0000 	JMP  0x00
000014 940c 019e 	JMP  _timer2_overflow
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 01a7 	JMP  _int_USART1
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1117): warning: .cseg .db misalignment - padding zero byte
00004f 000a      	.DB  0xA
                 _0x4:
000050 aa47
000051 3b6f      	.DB  0x47,0xAA,0x6F,0x3B
                 _0x30:
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 0000
000063 0000
000064 0000
000065 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000066 0000
000067 0000
000068 0000
000069 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006a 0000
00006b 0000
00006c 0000
00006d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006e 0000
00006f 0000
000070 0000
000071 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000072 0000
000073 0000
000074 0000
000075 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000076 0000
000077 0000
000078 0000
000079 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007a 0000
00007b 0000
00007c 0000
00007d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007e 0000
00007f 0000
000080 0000
000081 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000082 0000
000083 0000
000084 0000
000085 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000086 0000
000087 0000
000088 0000
000089 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008a 0000
00008b 0000
00008c 0000
00008d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008e 0000
00008f 0000
000090 0000
000091 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000092 0000
000093 0000
000094 0000
000095 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000096 0000
000097 0000
000098 0000
000099 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x44:
00009a 0000
00009b 0000
00009c 0000
00009d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00009e 0000
00009f 0000
0000a0 0000
0000a1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a2 0000
0000a3 0000
0000a4 0000
0000a5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a6 0000
0000a7 0000
0000a8 0000
0000a9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000aa 0000
0000ab 0000
0000ac 0000
0000ad 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ae 0000
0000af 0000
0000b0 0000
0000b1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b2 0000
0000b3 0000
0000b4 0000
0000b5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b6 0000
0000b7 0000
0000b8 0000
0000b9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ba 0000
0000bb 0000
0000bc 0000
0000bd 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000be 0000
0000bf 0000
0000c0 0000
0000c1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000c2 0000
0000c3 0000
0000c4 0000
0000c5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000c6 0000
0000c7 0000
0000c8 0000
0000c9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ca 0000
0000cb 0000
0000cc 0000
0000cd 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ce 0000
0000cf 0000
0000d0 0000
0000d1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000d2 0000
0000d3 0000
0000d4 0000
0000d5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000d6 0000
0000d7 0000
0000d8 0000
0000d9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000da 0000
0000db 0000
0000dc 0000
0000dd 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000de 0000
0000df 0000
0000e0 0000
0000e1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000e2 0000      	.DB  0x0,0x0
                 _0x52:
0000e3 0000
0000e4 0000
0000e5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
0000e6 6f47
0000e7 6c61
0000e8 253d
0000e9 2c64      	.DB  0x47,0x6F,0x61,0x6C,0x3D,0x25,0x64,0x2C
0000ea 6425
0000eb 252c
0000ec 2c64
0000ed 6425      	.DB  0x25,0x64,0x2C,0x25,0x64,0x2C,0x25,0x64
0000ee 252c
0000ef 2064
0000f0 0a0d
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1164): warning: .cseg .db misalignment - padding zero byte
0000f1 0000      	.DB  0x2C,0x25,0x64,0x20,0xD,0xA,0x0
                 _0x2020060:
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1166): warning: .cseg .db misalignment - padding zero byte
0000f2 0001      	.DB  0x1
                 _0x2020000:
0000f3 4e2d
0000f4 4e41
0000f5 4900
0000f6 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1169): warning: .cseg .db misalignment - padding zero byte
0000f7 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
0000f8 0001      	.DW  0x01
0000f9 0504      	.DW  _RXC_BUFF
0000fa 009e      	.DW  _0x3*2
                 
0000fb 0004      	.DW  0x04
0000fc 0518      	.DW  _Time
0000fd 00a0      	.DW  _0x4*2
                 
0000fe 0006      	.DW  0x06
0000ff 0006      	.DW  0x06
000100 01c6      	.DW  _0x52*2
                 
000101 0001      	.DW  0x01
000102 051c      	.DW  __seed_G101
000103 01e4      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000104 0000      	.DW  0
                 
                 __RESET:
000105 94f8      	CLI
000106 27ee      	CLR  R30
000107 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000108 e0f1      	LDI  R31,1
000109 bff5      	OUT  MCUCR,R31
00010a bfe5      	OUT  MCUCR,R30
00010b 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00010d e1f8      	LDI  R31,0x18
00010e bdf1      	OUT  WDTCR,R31
00010f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000110 e08d      	LDI  R24,(14-2)+1
000111 e0a2      	LDI  R26,2
000112 27bb      	CLR  R27
                 __CLEAR_REG:
000113 93ed      	ST   X+,R30
000114 958a      	DEC  R24
000115 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000116 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000117 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000118 e0a0      	LDI  R26,LOW(__SRAM_START)
000119 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00011a 93ed      	ST   X+,R30
00011b 9701      	SBIW R24,1
00011c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00011d efe0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00011e e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00011f 9185      	LPM  R24,Z+
000120 9195      	LPM  R25,Z+
000121 9700      	SBIW R24,0
000122 f061      	BREQ __GLOBAL_INI_END
000123 91a5      	LPM  R26,Z+
000124 91b5      	LPM  R27,Z+
000125 9005      	LPM  R0,Z+
000126 9015      	LPM  R1,Z+
000127 01bf      	MOVW R22,R30
000128 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000129 9005      	LPM  R0,Z+
00012a 920d      	ST   X+,R0
00012b 9701      	SBIW R24,1
00012c f7e1      	BRNE __GLOBAL_INI_LOOP
00012d 01fb      	MOVW R30,R22
00012e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00012f bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000130 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000131 bfed      	OUT  SPL,R30
000132 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000133 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000134 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000135 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000136 940c 0204 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;
                 ;#define MOTOR2_DIRECTION PORTB.3
                 ;#define MOTOR1_DIRECTION PORTB.4
                 ;#define HALLA PINE.5
                 ;#define HALLB PINE.6
                 ;#define HALLC PINE.7
                 ;#define Kp 100
                 ;//#define Ki 0.2
                 ;#define Ki 0
                 ;#define Kd 0
                 ;#define Duty 0.45
                 ;
                 ;//ENCODER
                 ;long int hall_sensor_value = 0;
                 ;
                 ;//USART
                 ;unsigned char RXC_BUFF[20] = {0x0a,};
                 
                 	.DSEG
                 ;unsigned char RXC_index = 0;
                 ;unsigned char SET_RXC1 = 0;
                 ;unsigned char recByte = 0;
                 ;unsigned char BUFF = 0;
                 ;
                 ;//PID
                 ;char tick = 0;
                 ;float Time = 0.003657;
                 ;
                 ;void GPIO_SETUP(void)
                 ; 0000 0020 {
                 
                 	.CSEG
                 _GPIO_SETUP:
                 ; 0000 0021     //PWM
                 ; 0000 0022     DDRB.6 = 1;
000138 9abe      	SBI  0x17,6
                 ; 0000 0023     DDRB.7 = 1;
000139 9abf      	SBI  0x17,7
                 ; 0000 0024 
                 ; 0000 0025     //motor direction
                 ; 0000 0026     DDRB.4 = 1;
00013a 9abc      	SBI  0x17,4
                 ; 0000 0027     DDRB.3 = 1;
00013b 9abb      	SBI  0x17,3
                 ; 0000 0028 
                 ; 0000 0029     PORTB.4 = 0;
00013c 98c4      	CBI  0x18,4
                 ; 0000 002A     PORTB.3 = 0;
00013d 98c3      	CBI  0x18,3
                 ; 0000 002B 
                 ; 0000 002C     //nBrake;
                 ; 0000 002D     DDRB.2 = 1;
00013e 9aba      	SBI  0x17,2
                 ; 0000 002E     DDRB.5 = 1;
00013f 9abd      	SBI  0x17,5
                 ; 0000 002F 
                 ; 0000 0030     PORTB.2 = 0;
000140 98c2      	CBI  0x18,2
                 ; 0000 0031     PORTB.5 = 0;
000141 98c5      	CBI  0x18,5
                 ; 0000 0032 }
000142 9508      	RET
                 ;
                 ;void USART1_init(void)
                 ; 0000 0035 {
                 _USART1_init:
                 ; 0000 0036     UCSR1A = 0x00;
000143 e0e0      	LDI  R30,LOW(0)
000144 93e0 009b 	STS  155,R30
                 ; 0000 0037     UCSR1B = (1<<TXEN1)|(1<<RXEN0)|(1<<RXCIE0);
000146 e9e8      	LDI  R30,LOW(152)
000147 93e0 009a 	STS  154,R30
                 ; 0000 0038     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
000149 e0e6      	LDI  R30,LOW(6)
00014a 93e0 009d 	STS  157,R30
                 ; 0000 0039     UCSR1C &= ~(0<<UMSEL1);
00014c e9ad      	LDI  R26,LOW(157)
00014d e0b0      	LDI  R27,HIGH(157)
00014e 91ec      	LD   R30,X
00014f 93ec      	ST   X,R30
                 ; 0000 003A 
                 ; 0000 003B     UBRR1H = 0;
000150 e0e0      	LDI  R30,LOW(0)
000151 93e0 0098 	STS  152,R30
                 ; 0000 003C     UBRR1L = 7;
000153 e0e7      	LDI  R30,LOW(7)
000154 93e0 0099 	STS  153,R30
                 ; 0000 003D }
000156 9508      	RET
                 ;
                 ;void Data_Tx1(unsigned char bData)
                 ; 0000 0040 {
                 _Data_Tx1:
                 ; 0000 0041     while(!(UCSR1A & (1<<UDRE1))); //wait until data can be loaded.
                 ;	bData -> Y+0
                 _0x19:
000157 91e0 009b 	LDS  R30,155
000159 72e0      	ANDI R30,LOW(0x20)
00015a f3e1      	BREQ _0x19
                 ; 0000 0042     UDR1 = bData; //data load to TxD buffer
00015b 81e8      	LD   R30,Y
00015c 93e0 009c 	STS  156,R30
                 ; 0000 0043 }
00015e 9621      	ADIW R28,1
00015f 9508      	RET
                 ;
                 ;unsigned char Data_Rx1(void)
                 ; 0000 0046 {
                 ; 0000 0047     while(!(UCSR1A & (1<<RXC1))); // RXC0 flag is USART Receive Complete
                 ; 0000 0048     return UDR1;
                 ; 0000 0049 }
                 ;
                 ;//sprintf printing function
                 ;void string_tx1(unsigned char *str)
                 ; 0000 004D {
                 _string_tx1:
                 ; 0000 004E     while (*str)
                 ;	*str -> Y+0
                 _0x1F:
000160 81a8      	LD   R26,Y
000161 81b9      	LDD  R27,Y+1
000162 91ec      	LD   R30,X
000163 30e0      	CPI  R30,0
000164 f031      	BREQ _0x21
                 ; 0000 004F     {
                 ; 0000 0050         Data_Tx1(*str++);
000165 91ed      	LD   R30,X+
000166 83a8      	ST   Y,R26
000167 83b9      	STD  Y+1,R27
000168 93ea      	ST   -Y,R30
000169 dfed      	RCALL _Data_Tx1
                 ; 0000 0051     }
00016a cff5      	RJMP _0x1F
                 _0x21:
                 ; 0000 0052 }
00016b 9622      	ADIW R28,2
00016c 9508      	RET
                 ;
                 ;void EXT_INT_init(void)
                 ; 0000 0055 {
                 ; 0000 0056     EICRB = (1<<ISC50)|(1<<ISC60)|(1<<ISC70);
                 ; 0000 0057     EIMSK = (1<<INT5)|(1<<INT6)|(1<<INT7);
                 ; 0000 0058 
                 ; 0000 0059     DDRE.5 = 0;
                 ; 0000 005A     DDRE.6 = 0;
                 ; 0000 005B     DDRE.7 = 0;
                 ; 0000 005C }
                 ;
                 ;void TIMER_init(void)
                 ; 0000 005F {
                 _TIMER_init:
                 ; 0000 0060     //TIMER2
                 ; 0000 0061     TCCR2 = (1<<CS22)|(1<<CS20);// 일반모드, 1024분주;
00016d e0e5      	LDI  R30,LOW(5)
00016e bde5      	OUT  0x25,R30
                 ; 0000 0062 
                 ; 0000 0063     TCCR1A = (1<<WGM11)|(1<<COM1C1)|(1<<COM1B1);    TCCR1B = (1<<WGM13)|(1<<WGM12); // WGM bit setting
00016f e2ea      	LDI  R30,LOW(42)
000170 bdef      	OUT  0x2F,R30
000171 e1e8      	LDI  R30,LOW(24)
000172 bdee      	OUT  0x2E,R30
                 ; 0000 0064     TCCR1B |= (1<<CS10); // Clock source choie
000173 b5ee      	IN   R30,0x2E
000174 60e1      	ORI  R30,1
000175 bdee      	OUT  0x2E,R30
                 ; 0000 0065 
                 ; 0000 0066     OCR1B = 0x00;
000176 e0e0      	LDI  R30,LOW(0)
000177 e0f0      	LDI  R31,HIGH(0)
000178 bdf9      	OUT  0x28+1,R31
000179 bde8      	OUT  0x28,R30
                 ; 0000 0067     OCR1CH = 0x00;
00017a 93e0 0079 	STS  121,R30
                 ; 0000 0068     OCR1CL = 0x00;
00017c 93e0 0078 	STS  120,R30
                 ; 0000 0069     ICR1 = 1200;//1200; //664
00017e ebe0      	LDI  R30,LOW(1200)
00017f e0f4      	LDI  R31,HIGH(1200)
000180 bdf7      	OUT  0x26+1,R31
000181 bde6      	OUT  0x26,R30
                 ; 0000 006A 
                 ; 0000 006B     TIMSK = (1<<TOIE2);
000182 e4e0      	LDI  R30,LOW(64)
000183 bfe7      	OUT  0x37,R30
                 ; 0000 006C }
000184 9508      	RET
                 ;
                 ;unsigned int MV_Rebuilding(int first, int last, long int MV)
                 ; 0000 006F {
                 ; 0000 0070     unsigned int reMV;
                 ; 0000 0071 
                 ; 0000 0072     if(MV >= last) reMV = (unsigned int)last;
                 ;	first -> Y+8
                 ;	last -> Y+6
                 ;	MV -> Y+2
                 ;	reMV -> R16,R17
                 ; 0000 0073     else if(MV <= first) reMV = (unsigned int)((-1)*first);
                 ; 0000 0074 
                 ; 0000 0075     else if(MV> first && MV < 0) reMV = (unsigned int)((-1)*MV);
                 ; 0000 0076     else reMV = MV;
                 ; 0000 0077 
                 ; 0000 0078     return reMV;
                 ; 0000 0079 }
                 ;
                 ;
                 ;long int PID_Controller(int Goal, float now, float* integral, float* Err_previous)
                 ; 0000 007D {
                 ; 0000 007E     long int pErr = 0;
                 ; 0000 007F     float dErr = 0;
                 ; 0000 0080     long int MV = 0;
                 ; 0000 0081     float Err = 0;
                 ; 0000 0082     unsigned char BUFF[128]={0,};
                 ; 0000 0083 
                 ; 0000 0084     Err = Goal - now; //ERROR
                 ;	Goal -> Y+152
                 ;	now -> Y+148
                 ;	*integral -> Y+146
                 ;	*Err_previous -> Y+144
                 ;	pErr -> Y+140
                 ;	dErr -> Y+136
                 ;	MV -> Y+132
                 ;	Err -> Y+128
                 ;	BUFF -> Y+0
                 ; 0000 0085 
                 ; 0000 0086     pErr = (Kp*Err); // P
                 ; 0000 0087     *integral = *integral +(Ki * Err * Time); // I
                 ; 0000 0088     dErr = (Kd * (Err - *Err_previous)) / Time; // D
                 ; 0000 0089     MV = (long int)(pErr+ *integral + dErr);// PID Control Volume
                 ; 0000 008A 
                 ; 0000 008B     //sprintf(BUFF, "pErr=%d, integral=%d, dErr=%d, MV=%d  Err=%d\r\n", (int)pErr, *integral, dErr, MV, (int)Err);
                 ; 0000 008C     //string_tx1(BUFF);
                 ; 0000 008D 
                 ; 0000 008E     *Err_previous = Err;
                 ; 0000 008F 
                 ; 0000 0090     return MV;
                 ; 0000 0091 }
                 ;
                 ;void producePWM(long int OCR_val, unsigned int OCR_SET)
                 ; 0000 0094 {
                 _producePWM:
                 ; 0000 0095     if(OCR_val < 0)
                 ;	OCR_val -> Y+2
                 ;	OCR_SET -> Y+0
000185 81ad      	LDD  R26,Y+5
000186 23aa      	TST  R26
000187 f41a      	BRPL _0x31
                 ; 0000 0096     {
                 ; 0000 0097         MOTOR1_DIRECTION = 1;
000188 9ac4      	SBI  0x18,4
                 ; 0000 0098         MOTOR2_DIRECTION = 1;
000189 9ac3      	SBI  0x18,3
                 ; 0000 0099 
                 ; 0000 009A         OCR1B = OCR_SET;
00018a c005      	RJMP _0x50
                 ; 0000 009B         OCR1CH = (OCR_SET & 0xFF00) >> 8;
                 ; 0000 009C         OCR1CL = 0x00FF & (OCR_SET);
                 ; 0000 009D     }
                 ; 0000 009E     else if(OCR_val >= 0)
                 _0x31:
00018b 81ad      	LDD  R26,Y+5
00018c 23aa      	TST  R26
00018d f072      	BRMI _0x37
                 ; 0000 009F     {
                 ; 0000 00A0         MOTOR1_DIRECTION = 0;
00018e 98c4      	CBI  0x18,4
                 ; 0000 00A1         MOTOR2_DIRECTION = 0;
00018f 98c3      	CBI  0x18,3
                 ; 0000 00A2 
                 ; 0000 00A3         OCR1B = OCR_SET;
                 _0x50:
000190 81e8      	LD   R30,Y
000191 81f9      	LDD  R31,Y+1
000192 bdf9      	OUT  0x28+1,R31
000193 bde8      	OUT  0x28,R30
                 ; 0000 00A4         OCR1CH = (OCR_SET & 0xFF00) >> 8;
000194 70e0      	ANDI R30,LOW(0xFF00)
000195 2fef      	MOV  R30,R31
000196 e0f0      	LDI  R31,0
000197 93e0 0079 	STS  121,R30
                 ; 0000 00A5         OCR1CL = 0x00FF & (OCR_SET);
000199 81e8      	LD   R30,Y
00019a 93e0 0078 	STS  120,R30
                 ; 0000 00A6     }
                 ; 0000 00A7 }
                 _0x37:
00019c 9626      	ADIW R28,6
00019d 9508      	RET
                 ;
                 ;interrupt [TIM2_OVF] void timer2_overflow(void)
                 ; 0000 00AA {
                 _timer2_overflow:
00019e 93ea      	ST   -Y,R30
00019f b7ef      	IN   R30,SREG
0001a0 93ea      	ST   -Y,R30
                 ; 0000 00AB     tick += 255;
0001a1 efef      	LDI  R30,LOW(255)
0001a2 0ebe      	ADD  R11,R30
                 ; 0000 00AC }
0001a3 91e9      	LD   R30,Y+
0001a4 bfef      	OUT  SREG,R30
0001a5 91e9      	LD   R30,Y+
0001a6 9518      	RETI
                 ;
                 ;interrupt [USART1_RXC]void int_USART1(void)
                 ; 0000 00AF {
                 _int_USART1:
0001a7 93ea      	ST   -Y,R30
0001a8 93fa      	ST   -Y,R31
0001a9 b7ef      	IN   R30,SREG
0001aa 93ea      	ST   -Y,R30
                 ; 0000 00B0     BUFF = UDR1;
0001ab 9080 009c 	LDS  R8,156
                 ; 0000 00B1 
                 ; 0000 00B2     if(BUFF != 0x0a)
0001ad e0ea      	LDI  R30,LOW(10)
0001ae 15e8      	CP   R30,R8
0001af f041      	BREQ _0x3C
                 ; 0000 00B3     {
                 ; 0000 00B4         SET_RXC1 = 0;
0001b0 2466      	CLR  R6
                 ; 0000 00B5         RXC_BUFF[RXC_index] = BUFF;
0001b1 2de7      	MOV  R30,R7
0001b2 e0f0      	LDI  R31,0
0001b3 5fec      	SUBI R30,LOW(-_RXC_BUFF)
0001b4 4ffa      	SBCI R31,HIGH(-_RXC_BUFF)
0001b5 8280      	ST   Z,R8
                 ; 0000 00B6         RXC_index++;
0001b6 9473      	INC  R7
                 ; 0000 00B7     }
                 ; 0000 00B8     else
0001b7 c003      	RJMP _0x3D
                 _0x3C:
                 ; 0000 00B9     {
                 ; 0000 00BA         RXC_index = 0;
0001b8 2477      	CLR  R7
                 ; 0000 00BB         SET_RXC1 = 1;
0001b9 e0e1      	LDI  R30,LOW(1)
0001ba 2e6e      	MOV  R6,R30
                 ; 0000 00BC     }
                 _0x3D:
                 ; 0000 00BD }
0001bb 91e9      	LD   R30,Y+
0001bc bfef      	OUT  SREG,R30
0001bd 91f9      	LD   R31,Y+
0001be 91e9      	LD   R30,Y+
0001bf 9518      	RETI
                 ;
                 ;interrupt [EXT_INT5] void hall_sensor_detection1(void)
                 ; 0000 00C0 {
                 _hall_sensor_detection1:
0001c0 940e 04c0 	CALL SUBOPT_0x0
                 ; 0000 00C1     if(HALLA != HALLB) hall_sensor_value--;
0001c2 e0a0      	LDI  R26,0
0001c3 990d      	SBIC 0x1,5
0001c4 e0a1      	LDI  R26,1
0001c5 e0e0      	LDI  R30,0
0001c6 990e      	SBIC 0x1,6
0001c7 e0e1      	LDI  R30,1
0001c8 17ea      	CP   R30,R26
0001c9 f029      	BREQ _0x3E
0001ca 940e 04c9 	CALL SUBOPT_0x1
0001cc 940e 04ce 	CALL SUBOPT_0x2
                 ; 0000 00C2     else hall_sensor_value++;
0001ce c004      	RJMP _0x3F
                 _0x3E:
0001cf 940e 04c9 	CALL SUBOPT_0x1
0001d1 940e 04d8 	CALL SUBOPT_0x3
                 ; 0000 00C3 }
                 _0x3F:
0001d3 c027      	RJMP _0x51
                 ;
                 ;interrupt [EXT_INT6] void hall_sensor_detection2(void)
                 ; 0000 00C6 {
                 _hall_sensor_detection2:
0001d4 940e 04c0 	CALL SUBOPT_0x0
                 ; 0000 00C7     if(HALLB != HALLC) hall_sensor_value--;
0001d6 e0a0      	LDI  R26,0
0001d7 990e      	SBIC 0x1,6
0001d8 e0a1      	LDI  R26,1
0001d9 e0e0      	LDI  R30,0
0001da 990f      	SBIC 0x1,7
0001db e0e1      	LDI  R30,1
0001dc 17ea      	CP   R30,R26
0001dd f029      	BREQ _0x40
0001de 940e 04c9 	CALL SUBOPT_0x1
0001e0 940e 04ce 	CALL SUBOPT_0x2
                 ; 0000 00C8     else hall_sensor_value++;
0001e2 c004      	RJMP _0x41
                 _0x40:
0001e3 940e 04c9 	CALL SUBOPT_0x1
0001e5 940e 04d8 	CALL SUBOPT_0x3
                 ; 0000 00C9 }
                 _0x41:
0001e7 c013      	RJMP _0x51
                 ;
                 ;interrupt [EXT_INT7] void hall_sensor_detection3(void)
                 ; 0000 00CC {
                 _hall_sensor_detection3:
0001e8 940e 04c0 	CALL SUBOPT_0x0
                 ; 0000 00CD     if(HALLC != HALLA) hall_sensor_value--;
0001ea e0a0      	LDI  R26,0
0001eb 990f      	SBIC 0x1,7
0001ec e0a1      	LDI  R26,1
0001ed e0e0      	LDI  R30,0
0001ee 990d      	SBIC 0x1,5
0001ef e0e1      	LDI  R30,1
0001f0 17ea      	CP   R30,R26
0001f1 f029      	BREQ _0x42
0001f2 940e 04c9 	CALL SUBOPT_0x1
0001f4 940e 04ce 	CALL SUBOPT_0x2
                 ; 0000 00CE     else hall_sensor_value++;
0001f6 c004      	RJMP _0x43
                 _0x42:
0001f7 940e 04c9 	CALL SUBOPT_0x1
0001f9 940e 04d8 	CALL SUBOPT_0x3
                 ; 0000 00CF }
                 _0x43:
                 _0x51:
0001fb 91e9      	LD   R30,Y+
0001fc bfef      	OUT  SREG,R30
0001fd 91f9      	LD   R31,Y+
0001fe 91e9      	LD   R30,Y+
0001ff 91b9      	LD   R27,Y+
000200 91a9      	LD   R26,Y+
000201 9179      	LD   R23,Y+
000202 9169      	LD   R22,Y+
000203 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 00D2 {
                 _main:
                 ; 0000 00D3     int i = 0;
                 ; 0000 00D4 
                 ; 0000 00D5     int Goal = 0;
                 ; 0000 00D6     float Err = 0;
                 ; 0000 00D7     float integral = 0;
                 ; 0000 00D8     float now = 0;
                 ; 0000 00D9 
                 ; 0000 00DA     unsigned int current_time = 0;
                 ; 0000 00DB     char BUFF[128]={0,};
                 ; 0000 00DC 
                 ; 0000 00DD     //Controll Volume
                 ; 0000 00DE     long int OCR_val = 0;
                 ; 0000 00DF     unsigned int OCR_SET = 0;
                 ; 0000 00E0 
                 ; 0000 00E1     OCR_val = ICR1*Duty;
000204 97ef      	SBIW R28,63
000205 97ef      	SBIW R28,63
000206 9764      	SBIW R28,20
000207 e982      	LDI  R24,146
000208 e0a0      	LDI  R26,LOW(0)
000209 e0b0      	LDI  R27,HIGH(0)
00020a e3e4      	LDI  R30,LOW(_0x44*2)
00020b e0f1      	LDI  R31,HIGH(_0x44*2)
00020c 940e 064d 	CALL __INITLOCB
                 ;	i -> R16,R17
                 ;	Goal -> R18,R19
                 ;	Err -> Y+142
                 ;	integral -> Y+138
                 ;	now -> Y+134
                 ;	current_time -> R20,R21
                 ;	BUFF -> Y+6
                 ;	OCR_val -> Y+2
                 ;	OCR_SET -> Y+0
                +
00020e e000     +LDI R16 , LOW ( 0 )
00020f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000210 e020     +LDI R18 , LOW ( 0 )
000211 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000212 e040     +LDI R20 , LOW ( 0 )
000213 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000214 940e 04e2 	CALL SUBOPT_0x4
000216 01de      	MOVW R26,R28
000217 9612      	ADIW R26,2
000218 940e 0553 	CALL __CFD1
00021a 940e 062c 	CALL __PUTDP1
                 ; 0000 00E2     OCR_SET = ICR1*Duty;
00021c 940e 04e2 	CALL SUBOPT_0x4
00021e 01de      	MOVW R26,R28
00021f 940e 0551 	CALL __CFD1U
000221 93ed      	ST   X+,R30
000222 93fc      	ST   X,R31
                 ; 0000 00E3 
                 ; 0000 00E4     USART1_init();
000223 df1f      	RCALL _USART1_init
                 ; 0000 00E5     TIMER_init();
000224 df48      	RCALL _TIMER_init
                 ; 0000 00E6     GPIO_SETUP();
000225 df12      	RCALL _GPIO_SETUP
                 ; 0000 00E7     //EXT_INT_init();
                 ; 0000 00E8 
                 ; 0000 00E9     SREG |= 0x80;
000226 9478      	BSET 7
                 ; 0000 00EA 
                 ; 0000 00EB     while(1)
                 _0x45:
                 ; 0000 00EC     {
                 ; 0000 00ED         if(SET_RXC1)
000227 2066      	TST  R6
000228 f041      	BREQ _0x48
                 ; 0000 00EE         {
                 ; 0000 00EF             Goal = atoi(RXC_BUFF);
000229 e0e4      	LDI  R30,LOW(_RXC_BUFF)
00022a e0f5      	LDI  R31,HIGH(_RXC_BUFF)
00022b 93fa      	ST   -Y,R31
00022c 93ea      	ST   -Y,R30
00022d 940e 0468 	CALL _atoi
00022f 019f      	MOVW R18,R30
                 ; 0000 00F0             SET_RXC1 = 0;
000230 2466      	CLR  R6
                 ; 0000 00F1         }
                 ; 0000 00F2         for(i = 0; i<20; i++)
                 _0x48:
                +
000231 e000     +LDI R16 , LOW ( 0 )
000232 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4A:
                +
000233 3104     +CPI R16 , LOW ( 20 )
000234 e0e0     +LDI R30 , HIGH ( 20 )
000235 071e     +CPC R17 , R30
                 	__CPWRN 16,17,20
000236 f44c      	BRGE _0x4B
                 ; 0000 00F3         {
                 ; 0000 00F4             RXC_BUFF[i] = 0;
000237 e0a4      	LDI  R26,LOW(_RXC_BUFF)
000238 e0b5      	LDI  R27,HIGH(_RXC_BUFF)
000239 0fa0      	ADD  R26,R16
00023a 1fb1      	ADC  R27,R17
00023b e0e0      	LDI  R30,LOW(0)
00023c 93ec      	ST   X,R30
                 ; 0000 00F5         }
                +
00023d 5f0f     +SUBI R16 , LOW ( - 1 )
00023e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00023f cff3      	RJMP _0x4A
                 _0x4B:
                 ; 0000 00F6 
                 ; 0000 00F7         now = (7.5*hall_sensor_value);
000240 91e0 0500 	LDS  R30,_hall_sensor_value
000242 91f0 0501 	LDS  R31,_hall_sensor_value+1
000244 9160 0502 	LDS  R22,_hall_sensor_value+2
000246 9170 0503 	LDS  R23,_hall_sensor_value+3
000248 940e 058a 	CALL __CDF1
                +
00024a e0a0     +LDI R26 , LOW ( 0x40F00000 )
00024b e0b0     +LDI R27 , HIGH ( 0x40F00000 )
00024c ef80     +LDI R24 , BYTE3 ( 0x40F00000 )
00024d e490     +LDI R25 , BYTE4 ( 0x40F00000 )
                 	__GETD2N 0x40F00000
00024e 940e 05b8 	CALL __MULF12
                +
000250 01de     +MOVW R26 , R28
000251 57aa     +SUBI R26 , LOW ( - 134 )
000252 4fbf     +SBCI R27 , HIGH ( - 134 )
000253 93ed     +ST X + , R30
000254 93fd     +ST X + , R31
000255 936d     +ST X + , R22
000256 937c     +ST X , R23
                 	__PUTD1SX 134
                 ; 0000 00F8         //OCR_val = PID_Controller(Goal, now, &integral, &Err);
                 ; 0000 00F9         //OCR_SET = MV_Rebuilding(-(ICR1*Duty), (ICR1*Duty), OCR_val);
                 ; 0000 00FA         producePWM(OCR_val, OCR_SET);
                +
000257 81ea     +LDD R30 , Y + 2
000258 81fb     +LDD R31 , Y + 2 + 1
000259 816c     +LDD R22 , Y + 2 + 2
00025a 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
00025b 940e 063a 	CALL __PUTPARD1
00025d 81ec      	LDD  R30,Y+4
00025e 81fd      	LDD  R31,Y+4+1
00025f 93fa      	ST   -Y,R31
000260 93ea      	ST   -Y,R30
000261 df23      	RCALL _producePWM
                 ; 0000 00FB 
                 ; 0000 00FC         tick += TCNT2;
000262 b5e4      	IN   R30,0x24
000263 0ebe      	ADD  R11,R30
                 ; 0000 00FD         TCNT2 = 0;
000264 e0e0      	LDI  R30,LOW(0)
000265 bde4      	OUT  0x24,R30
                 ; 0000 00FE         Time = 0.000069*tick;
000266 2deb      	MOV  R30,R11
000267 e0f0      	LDI  R31,0
000268 940e 0616 	CALL __CWD1
00026a 940e 058a 	CALL __CDF1
                +
00026c e1a8     +LDI R26 , LOW ( 0x3890B418 )
00026d ebb4     +LDI R27 , HIGH ( 0x3890B418 )
00026e e980     +LDI R24 , BYTE3 ( 0x3890B418 )
00026f e398     +LDI R25 , BYTE4 ( 0x3890B418 )
                 	__GETD2N 0x3890B418
000270 940e 05b8 	CALL __MULF12
000272 93e0 0518 	STS  _Time,R30
000274 93f0 0519 	STS  _Time+1,R31
000276 9360 051a 	STS  _Time+2,R22
000278 9370 051b 	STS  _Time+3,R23
                 ; 0000 00FF         sprintf(BUFF, "Goal=%d,%d,%d,%d,%d \r\n", Goal, (int)now, (int)Err, OCR_val,OCR_SET*((MOTOR1_DIRECTION)?-1:1));
00027a 01fe      	MOVW R30,R28
00027b 9636      	ADIW R30,6
00027c 93fa      	ST   -Y,R31
00027d 93ea      	ST   -Y,R30
                +
00027e ecec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00027f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000280 93fa      	ST   -Y,R31
000281 93ea      	ST   -Y,R30
000282 01f9      	MOVW R30,R18
000283 940e 04ef 	CALL SUBOPT_0x5
                +
000285 01fe     +MOVW R30 , R28
000286 57e2     +SUBI R30 , LOW ( - 142 )
000287 4fff     +SBCI R31 , HIGH ( - 142 )
000288 9001     +LD R0 , Z +
000289 9011     +LD R1 , Z +
00028a 9161     +LD R22 , Z +
00028b 8170     +LD R23 , Z
00028c 01f0     +MOVW R30 , R0
                 	__GETD1SX 142
00028d 940e 0553 	CALL __CFD1
00028f 940e 04ef 	CALL SUBOPT_0x5
                +
000291 01fe     +MOVW R30 , R28
000292 56e6     +SUBI R30 , LOW ( - 154 )
000293 4fff     +SBCI R31 , HIGH ( - 154 )
000294 9001     +LD R0 , Z +
000295 9011     +LD R1 , Z +
000296 9161     +LD R22 , Z +
000297 8170     +LD R23 , Z
000298 01f0     +MOVW R30 , R0
                 	__GETD1SX 154
000299 940e 0553 	CALL __CFD1
00029b 940e 04ef 	CALL SUBOPT_0x5
                +
00029d 89ea     +LDD R30 , Y + 18
00029e 89fb     +LDD R31 , Y + 18 + 1
00029f 896c     +LDD R22 , Y + 18 + 2
0002a0 897d     +LDD R23 , Y + 18 + 3
                 	__GETD1S 18
0002a1 940e 063a 	CALL __PUTPARD1
0002a3 9bc4      	SBIS 0x18,4
0002a4 c002      	RJMP _0x4C
0002a5 efef      	LDI  R30,LOW(255)
0002a6 c001      	RJMP _0x4D
                 _0x4C:
0002a7 e0e1      	LDI  R30,LOW(1)
                 _0x4D:
0002a8 e0f0      	LDI  R31,0
0002a9 fde7      	SBRC R30,7
0002aa efff      	SER  R31
0002ab 89ac      	LDD  R26,Y+20
0002ac 89bd      	LDD  R27,Y+20+1
0002ad 940e 061b 	CALL __MULW12U
0002af 2766      	CLR  R22
0002b0 2777      	CLR  R23
0002b1 940e 063a 	CALL __PUTPARD1
0002b3 e184      	LDI  R24,20
0002b4 940e 0432 	CALL _sprintf
0002b6 9668      	ADIW R28,24
                 ; 0000 0100         string_tx1(BUFF);
0002b7 01fe      	MOVW R30,R28
0002b8 9636      	ADIW R30,6
0002b9 93fa      	ST   -Y,R31
0002ba 93ea      	ST   -Y,R30
0002bb dea4      	RCALL _string_tx1
                 ; 0000 0101 
                 ; 0000 0102         tick = 0;
0002bc 24bb      	CLR  R11
                 ; 0000 0103     }
0002bd cf69      	RJMP _0x45
                 ; 0000 0104 }
                 _0x4F:
0002be cfff      	RJMP _0x4F
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
0002bf 931a      	ST   -Y,R17
0002c0 930a      	ST   -Y,R16
0002c1 81aa      	LDD  R26,Y+2
0002c2 81bb      	LDD  R27,Y+2+1
0002c3 9612      	ADIW R26,2
0002c4 940e 0623 	CALL __GETW1P
0002c6 9730      	SBIW R30,0
0002c7 f159      	BREQ _0x2000010
0002c8 81aa      	LDD  R26,Y+2
0002c9 81bb      	LDD  R27,Y+2+1
0002ca 9614      	ADIW R26,4
0002cb 940e 0623 	CALL __GETW1P
0002cd 018f      	MOVW R16,R30
0002ce 9730      	SBIW R30,0
0002cf f061      	BREQ _0x2000012
                +
0002d0 3002     +CPI R16 , LOW ( 2 )
0002d1 e0e0     +LDI R30 , HIGH ( 2 )
0002d2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0002d3 f0f0      	BRLO _0x2000013
0002d4 01f8      	MOVW R30,R16
0002d5 9731      	SBIW R30,1
0002d6 018f      	MOVW R16,R30
                +
0002d7 81aa     +LDD R26 , Y + 2
0002d8 81bb     +LDD R27 , Y + 2 + 1
0002d9 9614     +ADIW R26 , 4
0002da 93ed     +ST X + , R30
0002db 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0002dc 81aa      	LDD  R26,Y+2
0002dd 81bb      	LDD  R27,Y+2+1
0002de 9612      	ADIW R26,2
0002df 91ed      	LD   R30,X+
0002e0 91fd      	LD   R31,X+
0002e1 9631      	ADIW R30,1
0002e2 93fe      	ST   -X,R31
0002e3 93ee      	ST   -X,R30
0002e4 9731      	SBIW R30,1
0002e5 81ac      	LDD  R26,Y+4
0002e6 83a0      	STD  Z+0,R26
0002e7 81aa      	LDD  R26,Y+2
0002e8 81bb      	LDD  R27,Y+2+1
0002e9 940e 0623 	CALL __GETW1P
0002eb 23ff      	TST  R31
0002ec f02a      	BRMI _0x2000014
0002ed 91ed      	LD   R30,X+
0002ee 91fd      	LD   R31,X+
0002ef 9631      	ADIW R30,1
0002f0 93fe      	ST   -X,R31
0002f1 93ee      	ST   -X,R30
                 _0x2000014:
                 _0x2000013:
0002f2 c006      	RJMP _0x2000015
                 _0x2000010:
0002f3 81aa      	LDD  R26,Y+2
0002f4 81bb      	LDD  R27,Y+2+1
0002f5 efef      	LDI  R30,LOW(65535)
0002f6 efff      	LDI  R31,HIGH(65535)
0002f7 93ed      	ST   X+,R30
0002f8 93fc      	ST   X,R31
                 _0x2000015:
0002f9 8119      	LDD  R17,Y+1
0002fa 8108      	LDD  R16,Y+0
0002fb 9625      	ADIW R28,5
0002fc 9508      	RET
                 __print_G100:
0002fd 9726      	SBIW R28,6
0002fe 940e 063f 	CALL __SAVELOCR6
000300 e010      	LDI  R17,0
000301 85ac      	LDD  R26,Y+12
000302 85bd      	LDD  R27,Y+12+1
000303 e0e0      	LDI  R30,LOW(0)
000304 e0f0      	LDI  R31,HIGH(0)
000305 93ed      	ST   X+,R30
000306 93fc      	ST   X,R31
                 _0x2000016:
000307 89ea      	LDD  R30,Y+18
000308 89fb      	LDD  R31,Y+18+1
000309 9631      	ADIW R30,1
00030a 8bea      	STD  Y+18,R30
00030b 8bfb      	STD  Y+18+1,R31
00030c 9731      	SBIW R30,1
00030d 91e4      	LPM  R30,Z
00030e 2f2e      	MOV  R18,R30
00030f 30e0      	CPI  R30,0
000310 f411      	BRNE PC+3
000311 940c 042a 	JMP _0x2000018
000313 2fe1      	MOV  R30,R17
000314 30e0      	CPI  R30,0
000315 f439      	BRNE _0x200001C
000316 3225      	CPI  R18,37
000317 f411      	BRNE _0x200001D
000318 e011      	LDI  R17,LOW(1)
000319 c002      	RJMP _0x200001E
                 _0x200001D:
00031a 940e 04f4 	CALL SUBOPT_0x6
                 _0x200001E:
00031c c10c      	RJMP _0x200001B
                 _0x200001C:
00031d 30e1      	CPI  R30,LOW(0x1)
00031e f4a9      	BRNE _0x200001F
00031f 3225      	CPI  R18,37
000320 f419      	BRNE _0x2000020
000321 940e 04f4 	CALL SUBOPT_0x6
000323 c104      	RJMP _0x20000C9
                 _0x2000020:
000324 e012      	LDI  R17,LOW(2)
000325 e040      	LDI  R20,LOW(0)
000326 e000      	LDI  R16,LOW(0)
000327 322d      	CPI  R18,45
000328 f411      	BRNE _0x2000021
000329 e001      	LDI  R16,LOW(1)
00032a c0fe      	RJMP _0x200001B
                 _0x2000021:
00032b 322b      	CPI  R18,43
00032c f411      	BRNE _0x2000022
00032d e24b      	LDI  R20,LOW(43)
00032e c0fa      	RJMP _0x200001B
                 _0x2000022:
00032f 3220      	CPI  R18,32
000330 f411      	BRNE _0x2000023
000331 e240      	LDI  R20,LOW(32)
000332 c0f6      	RJMP _0x200001B
                 _0x2000023:
000333 c002      	RJMP _0x2000024
                 _0x200001F:
000334 30e2      	CPI  R30,LOW(0x2)
000335 f439      	BRNE _0x2000025
                 _0x2000024:
000336 e050      	LDI  R21,LOW(0)
000337 e013      	LDI  R17,LOW(3)
000338 3320      	CPI  R18,48
000339 f411      	BRNE _0x2000026
00033a 6800      	ORI  R16,LOW(128)
00033b c0ed      	RJMP _0x200001B
                 _0x2000026:
00033c c004      	RJMP _0x2000027
                 _0x2000025:
00033d 30e3      	CPI  R30,LOW(0x3)
00033e f011      	BREQ PC+3
00033f 940c 0429 	JMP _0x200001B
                 _0x2000027:
000341 3320      	CPI  R18,48
000342 f010      	BRLO _0x200002A
000343 332a      	CPI  R18,58
000344 f008      	BRLO _0x200002B
                 _0x200002A:
000345 c007      	RJMP _0x2000029
                 _0x200002B:
000346 e0aa      	LDI  R26,LOW(10)
000347 9f5a      	MUL  R21,R26
000348 2d50      	MOV  R21,R0
000349 2fe2      	MOV  R30,R18
00034a 53e0      	SUBI R30,LOW(48)
00034b 0f5e      	ADD  R21,R30
00034c c0dc      	RJMP _0x200001B
                 _0x2000029:
00034d 2fe2      	MOV  R30,R18
00034e 36e3      	CPI  R30,LOW(0x63)
00034f f449      	BRNE _0x200002F
000350 940e 04fd 	CALL SUBOPT_0x7
000352 89e8      	LDD  R30,Y+16
000353 89f9      	LDD  R31,Y+16+1
000354 81a4      	LDD  R26,Z+4
000355 93aa      	ST   -Y,R26
000356 940e 0503 	CALL SUBOPT_0x8
000358 c0cf      	RJMP _0x2000030
                 _0x200002F:
000359 37e3      	CPI  R30,LOW(0x73)
00035a f441      	BRNE _0x2000032
00035b 940e 04fd 	CALL SUBOPT_0x7
00035d 940e 050b 	CALL SUBOPT_0x9
00035f 940e 04ab 	CALL _strlen
000361 2f1e      	MOV  R17,R30
000362 c00a      	RJMP _0x2000033
                 _0x2000032:
000363 37e0      	CPI  R30,LOW(0x70)
000364 f461      	BRNE _0x2000035
000365 940e 04fd 	CALL SUBOPT_0x7
000367 940e 050b 	CALL SUBOPT_0x9
000369 940e 04b5 	CALL _strlenf
00036b 2f1e      	MOV  R17,R30
00036c 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00036d 6002      	ORI  R16,LOW(2)
00036e 770f      	ANDI R16,LOW(127)
00036f e030      	LDI  R19,LOW(0)
000370 c035      	RJMP _0x2000036
                 _0x2000035:
000371 36e4      	CPI  R30,LOW(0x64)
000372 f011      	BREQ _0x2000039
000373 36e9      	CPI  R30,LOW(0x69)
000374 f411      	BRNE _0x200003A
                 _0x2000039:
000375 6004      	ORI  R16,LOW(4)
000376 c002      	RJMP _0x200003B
                 _0x200003A:
000377 37e5      	CPI  R30,LOW(0x75)
000378 f431      	BRNE _0x200003C
                 _0x200003B:
000379 e8ec      	LDI  R30,LOW(_tbl10_G100*2)
00037a e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00037b 83ee      	STD  Y+6,R30
00037c 83ff      	STD  Y+6+1,R31
00037d e015      	LDI  R17,LOW(5)
00037e c00d      	RJMP _0x200003D
                 _0x200003C:
00037f 35e8      	CPI  R30,LOW(0x58)
000380 f411      	BRNE _0x200003F
000381 6008      	ORI  R16,LOW(8)
000382 c004      	RJMP _0x2000040
                 _0x200003F:
000383 37e8      	CPI  R30,LOW(0x78)
000384 f011      	BREQ PC+3
000385 940c 0428 	JMP _0x2000071
                 _0x2000040:
000387 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
000388 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000389 83ee      	STD  Y+6,R30
00038a 83ff      	STD  Y+6+1,R31
00038b e014      	LDI  R17,LOW(4)
                 _0x200003D:
00038c ff02      	SBRS R16,2
00038d c014      	RJMP _0x2000042
00038e 940e 04fd 	CALL SUBOPT_0x7
000390 940e 0515 	CALL SUBOPT_0xA
000392 85ab      	LDD  R26,Y+11
000393 23aa      	TST  R26
000394 f43a      	BRPL _0x2000043
000395 85ea      	LDD  R30,Y+10
000396 85fb      	LDD  R31,Y+10+1
000397 940e 060a 	CALL __ANEGW1
000399 87ea      	STD  Y+10,R30
00039a 87fb      	STD  Y+10+1,R31
00039b e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00039c 3040      	CPI  R20,0
00039d f011      	BREQ _0x2000044
00039e 5f1f      	SUBI R17,-LOW(1)
00039f c001      	RJMP _0x2000045
                 _0x2000044:
0003a0 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0003a1 c004      	RJMP _0x2000046
                 _0x2000042:
0003a2 940e 04fd 	CALL SUBOPT_0x7
0003a4 940e 0515 	CALL SUBOPT_0xA
                 _0x2000046:
                 _0x2000036:
0003a6 fd00      	SBRC R16,0
0003a7 c011      	RJMP _0x2000047
                 _0x2000048:
0003a8 1715      	CP   R17,R21
0003a9 f478      	BRSH _0x200004A
0003aa ff07      	SBRS R16,7
0003ab c008      	RJMP _0x200004B
0003ac ff02      	SBRS R16,2
0003ad c004      	RJMP _0x200004C
0003ae 7f0b      	ANDI R16,LOW(251)
0003af 2f24      	MOV  R18,R20
0003b0 5011      	SUBI R17,LOW(1)
0003b1 c001      	RJMP _0x200004D
                 _0x200004C:
0003b2 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0003b3 c001      	RJMP _0x200004E
                 _0x200004B:
0003b4 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0003b5 940e 04f4 	CALL SUBOPT_0x6
0003b7 5051      	SUBI R21,LOW(1)
0003b8 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0003b9 2f31      	MOV  R19,R17
0003ba ff01      	SBRS R16,1
0003bb c017      	RJMP _0x200004F
                 _0x2000050:
0003bc 3030      	CPI  R19,0
0003bd f0a1      	BREQ _0x2000052
0003be ff03      	SBRS R16,3
0003bf c006      	RJMP _0x2000053
0003c0 81ee      	LDD  R30,Y+6
0003c1 81ff      	LDD  R31,Y+6+1
0003c2 9125      	LPM  R18,Z+
0003c3 83ee      	STD  Y+6,R30
0003c4 83ff      	STD  Y+6+1,R31
0003c5 c005      	RJMP _0x2000054
                 _0x2000053:
0003c6 81ae      	LDD  R26,Y+6
0003c7 81bf      	LDD  R27,Y+6+1
0003c8 912d      	LD   R18,X+
0003c9 83ae      	STD  Y+6,R26
0003ca 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0003cb 940e 04f4 	CALL SUBOPT_0x6
0003cd 3050      	CPI  R21,0
0003ce f009      	BREQ _0x2000055
0003cf 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0003d0 5031      	SUBI R19,LOW(1)
0003d1 cfea      	RJMP _0x2000050
                 _0x2000052:
0003d2 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0003d3 e320      	LDI  R18,LOW(48)
0003d4 81ee      	LDD  R30,Y+6
0003d5 81ff      	LDD  R31,Y+6+1
0003d6 940e 0636 	CALL __GETW1PF
0003d8 87e8      	STD  Y+8,R30
0003d9 87f9      	STD  Y+8+1,R31
0003da 81ee      	LDD  R30,Y+6
0003db 81ff      	LDD  R31,Y+6+1
0003dc 9632      	ADIW R30,2
0003dd 83ee      	STD  Y+6,R30
0003de 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0003df 85e8      	LDD  R30,Y+8
0003e0 85f9      	LDD  R31,Y+8+1
0003e1 85aa      	LDD  R26,Y+10
0003e2 85bb      	LDD  R27,Y+10+1
0003e3 17ae      	CP   R26,R30
0003e4 07bf      	CPC  R27,R31
0003e5 f050      	BRLO _0x200005C
0003e6 5f2f      	SUBI R18,-LOW(1)
0003e7 85a8      	LDD  R26,Y+8
0003e8 85b9      	LDD  R27,Y+8+1
0003e9 85ea      	LDD  R30,Y+10
0003ea 85fb      	LDD  R31,Y+10+1
0003eb 1bea      	SUB  R30,R26
0003ec 0bfb      	SBC  R31,R27
0003ed 87ea      	STD  Y+10,R30
0003ee 87fb      	STD  Y+10+1,R31
0003ef cfef      	RJMP _0x200005A
                 _0x200005C:
0003f0 332a      	CPI  R18,58
0003f1 f028      	BRLO _0x200005D
0003f2 ff03      	SBRS R16,3
0003f3 c002      	RJMP _0x200005E
0003f4 5f29      	SUBI R18,-LOW(7)
0003f5 c001      	RJMP _0x200005F
                 _0x200005E:
0003f6 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0003f7 fd04      	SBRC R16,4
0003f8 c01a      	RJMP _0x2000061
0003f9 3321      	CPI  R18,49
0003fa f420      	BRSH _0x2000063
0003fb 85a8      	LDD  R26,Y+8
0003fc 85b9      	LDD  R27,Y+8+1
0003fd 9711      	SBIW R26,1
0003fe f409      	BRNE _0x2000062
                 _0x2000063:
0003ff c009      	RJMP _0x20000CA
                 _0x2000062:
000400 1753      	CP   R21,R19
000401 f010      	BRLO _0x2000067
000402 ff00      	SBRS R16,0
000403 c001      	RJMP _0x2000068
                 _0x2000067:
000404 c013      	RJMP _0x2000066
                 _0x2000068:
000405 e220      	LDI  R18,LOW(32)
000406 ff07      	SBRS R16,7
000407 c00b      	RJMP _0x2000069
000408 e320      	LDI  R18,LOW(48)
                 _0x20000CA:
000409 6100      	ORI  R16,LOW(16)
00040a ff02      	SBRS R16,2
00040b c007      	RJMP _0x200006A
00040c 7f0b      	ANDI R16,LOW(251)
00040d 934a      	ST   -Y,R20
00040e 940e 0503 	CALL SUBOPT_0x8
000410 3050      	CPI  R21,0
000411 f009      	BREQ _0x200006B
000412 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000413 940e 04f4 	CALL SUBOPT_0x6
000415 3050      	CPI  R21,0
000416 f009      	BREQ _0x200006C
000417 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000418 5031      	SUBI R19,LOW(1)
000419 85a8      	LDD  R26,Y+8
00041a 85b9      	LDD  R27,Y+8+1
00041b 9712      	SBIW R26,2
00041c f008      	BRLO _0x2000059
00041d cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00041e ff00      	SBRS R16,0
00041f c008      	RJMP _0x200006D
                 _0x200006E:
000420 3050      	CPI  R21,0
000421 f031      	BREQ _0x2000070
000422 5051      	SUBI R21,LOW(1)
000423 e2e0      	LDI  R30,LOW(32)
000424 93ea      	ST   -Y,R30
000425 940e 0503 	CALL SUBOPT_0x8
000427 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
000428 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000429 cedd      	RJMP _0x2000016
                 _0x2000018:
00042a 85ac      	LDD  R26,Y+12
00042b 85bd      	LDD  R27,Y+12+1
00042c 940e 0623 	CALL __GETW1P
00042e 940e 0646 	CALL __LOADLOCR6
000430 9664      	ADIW R28,20
000431 9508      	RET
                 _sprintf:
000432 92ff      	PUSH R15
000433 2ef8      	MOV  R15,R24
000434 9726      	SBIW R28,6
000435 940e 0641 	CALL __SAVELOCR4
000437 940e 051d 	CALL SUBOPT_0xB
000439 9730      	SBIW R30,0
00043a f419      	BRNE _0x2000072
00043b efef      	LDI  R30,LOW(65535)
00043c efff      	LDI  R31,HIGH(65535)
00043d c025      	RJMP _0x20A0001
                 _0x2000072:
00043e 01de      	MOVW R26,R28
00043f 9616      	ADIW R26,6
000440 940e 0606 	CALL __ADDW2R15
000442 018d      	MOVW R16,R26
000443 940e 051d 	CALL SUBOPT_0xB
000445 83ee      	STD  Y+6,R30
000446 83ff      	STD  Y+6+1,R31
000447 e0e0      	LDI  R30,LOW(0)
000448 87e8      	STD  Y+8,R30
000449 87e9      	STD  Y+8+1,R30
00044a 01de      	MOVW R26,R28
00044b 961a      	ADIW R26,10
00044c 940e 0606 	CALL __ADDW2R15
00044e 940e 0623 	CALL __GETW1P
000450 93fa      	ST   -Y,R31
000451 93ea      	ST   -Y,R30
000452 931a      	ST   -Y,R17
000453 930a      	ST   -Y,R16
000454 ebef      	LDI  R30,LOW(_put_buff_G100)
000455 e0f2      	LDI  R31,HIGH(_put_buff_G100)
000456 93fa      	ST   -Y,R31
000457 93ea      	ST   -Y,R30
000458 01fe      	MOVW R30,R28
000459 963a      	ADIW R30,10
00045a 93fa      	ST   -Y,R31
00045b 93ea      	ST   -Y,R30
00045c dea0      	RCALL __print_G100
00045d 019f      	MOVW R18,R30
00045e 81ae      	LDD  R26,Y+6
00045f 81bf      	LDD  R27,Y+6+1
000460 e0e0      	LDI  R30,LOW(0)
000461 93ec      	ST   X,R30
000462 01f9      	MOVW R30,R18
                 _0x20A0001:
000463 940e 0648 	CALL __LOADLOCR4
000465 962a      	ADIW R28,10
000466 90ff      	POP  R15
000467 9508      	RET
                 
                 	.CSEG
                 _atoi:
000468 81b9         	ldd  r27,y+1
000469 81a8         	ld   r26,y
                 __atoi0:
00046a 91ec         	ld   r30,x
00046b 93ea      	ST   -Y,R30
00046c 940e 04a1 	CALL _isspace
00046e 23ee         	tst  r30
00046f f011         	breq __atoi1
000470 9611         	adiw r26,1
000471 cff8         	rjmp __atoi0
                 __atoi1:
000472 94e8         	clt
000473 91ec         	ld   r30,x
000474 32ed         	cpi  r30,'-'
000475 f411         	brne __atoi2
000476 9468         	set
000477 c002         	rjmp __atoi3
                 __atoi2:
000478 32eb         	cpi  r30,'+'
000479 f409         	brne __atoi4
                 __atoi3:
00047a 9611         	adiw r26,1
                 __atoi4:
00047b 2766         	clr  r22
00047c 2777         	clr  r23
                 __atoi5:
00047d 91ec         	ld   r30,x
00047e 93ea      	ST   -Y,R30
00047f 940e 0499 	CALL _isdigit
000481 23ee         	tst  r30
000482 f079         	breq __atoi6
000483 01fb         	movw r30,r22
000484 0f66         	lsl  r22
000485 1f77         	rol  r23
000486 0f66         	lsl  r22
000487 1f77         	rol  r23
000488 0f6e         	add  r22,r30
000489 1f7f         	adc  r23,r31
00048a 0f66         	lsl  r22
00048b 1f77         	rol  r23
00048c 91ed         	ld   r30,x+
00048d 27ff         	clr  r31
00048e 53e0         	subi r30,'0'
00048f 0f6e         	add  r22,r30
000490 1f7f         	adc  r23,r31
000491 cfeb         	rjmp __atoi5
                 __atoi6:
000492 01fb         	movw r30,r22
000493 f41e         	brtc __atoi7
000494 95e0         	com  r30
000495 95f0         	com  r31
000496 9631         	adiw r30,1
                 __atoi7:
000497 9622         	adiw r28,2
000498 9508         	ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _isdigit:
000499 e0e1          ldi  r30,1
00049a 91f9          ld   r31,y+
00049b 33f0          cpi  r31,'0'
00049c f010          brlo isdigit0
00049d 33fa          cpi  r31,'9'+1
00049e f008          brlo isdigit1
                 isdigit0:
00049f 27ee          clr  r30
                 isdigit1:
0004a0 9508          ret
                 _isspace:
0004a1 e0e1          ldi  r30,1
0004a2 91f9          ld   r31,y+
0004a3 32f0          cpi  r31,' '
0004a4 f029          breq isspace1
0004a5 30f9          cpi  r31,9
0004a6 f010          brlo isspace0
0004a7 30fe          cpi  r31,13+1
0004a8 f008          brlo isspace1
                 isspace0:
0004a9 27ee          clr  r30
                 isspace1:
0004aa 9508          ret
                 
                 	.CSEG
                 _strlen:
0004ab 91a9          ld   r26,y+
0004ac 91b9          ld   r27,y+
0004ad 27ee          clr  r30
0004ae 27ff          clr  r31
                 strlen0:
0004af 916d          ld   r22,x+
0004b0 2366          tst  r22
0004b1 f011          breq strlen1
0004b2 9631          adiw r30,1
0004b3 cffb          rjmp strlen0
                 strlen1:
0004b4 9508          ret
                 _strlenf:
0004b5 27aa          clr  r26
0004b6 27bb          clr  r27
0004b7 91e9          ld   r30,y+
0004b8 91f9          ld   r31,y+
                 strlenf0:
0004b9 9005      	lpm  r0,z+
0004ba 2000          tst  r0
0004bb f011          breq strlenf1
0004bc 9611          adiw r26,1
0004bd cffb          rjmp strlenf0
                 strlenf1:
0004be 01fd          movw r30,r26
0004bf 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _hall_sensor_value:
000500           	.BYTE 0x4
                 _RXC_BUFF:
000504           	.BYTE 0x14
                 _Time:
000518           	.BYTE 0x4
                 __seed_G101:
00051c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
0004c0 936a      	ST   -Y,R22
0004c1 937a      	ST   -Y,R23
0004c2 93aa      	ST   -Y,R26
0004c3 93ba      	ST   -Y,R27
0004c4 93ea      	ST   -Y,R30
0004c5 93fa      	ST   -Y,R31
0004c6 b7ef      	IN   R30,SREG
0004c7 93ea      	ST   -Y,R30
0004c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0004c9 e0a0      	LDI  R26,LOW(_hall_sensor_value)
0004ca e0b5      	LDI  R27,HIGH(_hall_sensor_value)
0004cb 940e 0627 	CALL __GETD1P_INC
0004cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x2:
0004ce 9731      	SBIW R30,1
0004cf 4060      	SBCI R22,0
0004d0 4070      	SBCI R23,0
0004d1 940e 0631 	CALL __PUTDP1_DEC
                +
0004d3 5fef     +SUBI R30 , LOW ( - 1 )
0004d4 4fff     +SBCI R31 , HIGH ( - 1 )
0004d5 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0004d6 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0004d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3:
                +
0004d8 5fef     +SUBI R30 , LOW ( - 1 )
0004d9 4fff     +SBCI R31 , HIGH ( - 1 )
0004da 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0004db 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0004dc 940e 0631 	CALL __PUTDP1_DEC
0004de 9731      	SBIW R30,1
0004df 4060      	SBCI R22,0
0004e0 4070      	SBCI R23,0
0004e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0004e2 b5e6      	IN   R30,0x26
0004e3 b5f7      	IN   R31,0x26+1
0004e4 2766      	CLR  R22
0004e5 2777      	CLR  R23
0004e6 940e 058a 	CALL __CDF1
                +
0004e8 e6a6     +LDI R26 , LOW ( 0x3EE66666 )
0004e9 e6b6     +LDI R27 , HIGH ( 0x3EE66666 )
0004ea ee86     +LDI R24 , BYTE3 ( 0x3EE66666 )
0004eb e39e     +LDI R25 , BYTE4 ( 0x3EE66666 )
                 	__GETD2N 0x3EE66666
0004ec 940e 05b8 	CALL __MULF12
0004ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0004ef 940e 0616 	CALL __CWD1
0004f1 940e 063a 	CALL __PUTPARD1
0004f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x6:
0004f4 932a      	ST   -Y,R18
0004f5 85ed      	LDD  R30,Y+13
0004f6 85fe      	LDD  R31,Y+13+1
0004f7 93fa      	ST   -Y,R31
0004f8 93ea      	ST   -Y,R30
0004f9 89e9      	LDD  R30,Y+17
0004fa 89fa      	LDD  R31,Y+17+1
0004fb 9509      	ICALL
0004fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
0004fd 89e8      	LDD  R30,Y+16
0004fe 89f9      	LDD  R31,Y+16+1
0004ff 9734      	SBIW R30,4
000500 8be8      	STD  Y+16,R30
000501 8bf9      	STD  Y+16+1,R31
000502 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
000503 85ed      	LDD  R30,Y+13
000504 85fe      	LDD  R31,Y+13+1
000505 93fa      	ST   -Y,R31
000506 93ea      	ST   -Y,R30
000507 89e9      	LDD  R30,Y+17
000508 89fa      	LDD  R31,Y+17+1
000509 9509      	ICALL
00050a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x9:
00050b 89a8      	LDD  R26,Y+16
00050c 89b9      	LDD  R27,Y+16+1
00050d 9614      	ADIW R26,4
00050e 940e 0623 	CALL __GETW1P
000510 83ee      	STD  Y+6,R30
000511 83ff      	STD  Y+6+1,R31
000512 93fa      	ST   -Y,R31
000513 93ea      	ST   -Y,R30
000514 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000515 89a8      	LDD  R26,Y+16
000516 89b9      	LDD  R27,Y+16+1
000517 9614      	ADIW R26,4
000518 940e 0623 	CALL __GETW1P
00051a 87ea      	STD  Y+10,R30
00051b 87fb      	STD  Y+10+1,R31
00051c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00051d 01de      	MOVW R26,R28
00051e 961c      	ADIW R26,12
00051f 940e 0606 	CALL __ADDW2R15
000521 940e 0623 	CALL __GETW1P
000523 9508      	RET
                 
                 
                 	.CSEG
                 __ROUND_REPACK:
000524 2355      	TST  R21
000525 f442      	BRPL __REPACK
000526 3850      	CPI  R21,0x80
000527 f411      	BRNE __ROUND_REPACK0
000528 ffe0      	SBRS R30,0
000529 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00052a 9631      	ADIW R30,1
00052b 1f69      	ADC  R22,R25
00052c 1f79      	ADC  R23,R25
00052d f06b      	BRVS __REPACK1
                 
                 __REPACK:
00052e e850      	LDI  R21,0x80
00052f 2757      	EOR  R21,R23
000530 f411      	BRNE __REPACK0
000531 935f      	PUSH R21
000532 c073      	RJMP __ZERORES
                 __REPACK0:
000533 3f5f      	CPI  R21,0xFF
000534 f031      	BREQ __REPACK1
000535 0f66      	LSL  R22
000536 0c00      	LSL  R0
000537 9557      	ROR  R21
000538 9567      	ROR  R22
000539 2f75      	MOV  R23,R21
00053a 9508      	RET
                 __REPACK1:
00053b 935f      	PUSH R21
00053c 2000      	TST  R0
00053d f00a      	BRMI __REPACK2
00053e c073      	RJMP __MAXRES
                 __REPACK2:
00053f c06c      	RJMP __MINRES
                 
                 __UNPACK:
000540 e850      	LDI  R21,0x80
000541 2e19      	MOV  R1,R25
000542 2215      	AND  R1,R21
000543 0f88      	LSL  R24
000544 1f99      	ROL  R25
000545 2795      	EOR  R25,R21
000546 0f55      	LSL  R21
000547 9587      	ROR  R24
                 
                 __UNPACK1:
000548 e850      	LDI  R21,0x80
000549 2e07      	MOV  R0,R23
00054a 2205      	AND  R0,R21
00054b 0f66      	LSL  R22
00054c 1f77      	ROL  R23
00054d 2775      	EOR  R23,R21
00054e 0f55      	LSL  R21
00054f 9567      	ROR  R22
000550 9508      	RET
                 
                 __CFD1U:
000551 9468      	SET
000552 c001      	RJMP __CFD1U0
                 __CFD1:
000553 94e8      	CLT
                 __CFD1U0:
000554 935f      	PUSH R21
000555 dff2      	RCALL __UNPACK1
000556 3870      	CPI  R23,0x80
000557 f018      	BRLO __CFD10
000558 3f7f      	CPI  R23,0xFF
000559 f408      	BRCC __CFD10
00055a c04b      	RJMP __ZERORES
                 __CFD10:
00055b e156      	LDI  R21,22
00055c 1b57      	SUB  R21,R23
00055d f4aa      	BRPL __CFD11
00055e 9551      	NEG  R21
00055f 3058      	CPI  R21,8
000560 f40e      	BRTC __CFD19
000561 3059      	CPI  R21,9
                 __CFD19:
000562 f030      	BRLO __CFD17
000563 efef      	SER  R30
000564 efff      	SER  R31
000565 ef6f      	SER  R22
000566 e77f      	LDI  R23,0x7F
000567 f977      	BLD  R23,7
000568 c01a      	RJMP __CFD15
                 __CFD17:
000569 2777      	CLR  R23
00056a 2355      	TST  R21
00056b f0b9      	BREQ __CFD15
                 __CFD18:
00056c 0fee      	LSL  R30
00056d 1fff      	ROL  R31
00056e 1f66      	ROL  R22
00056f 1f77      	ROL  R23
000570 955a      	DEC  R21
000571 f7d1      	BRNE __CFD18
000572 c010      	RJMP __CFD15
                 __CFD11:
000573 2777      	CLR  R23
                 __CFD12:
000574 3058      	CPI  R21,8
000575 f028      	BRLO __CFD13
000576 2fef      	MOV  R30,R31
000577 2ff6      	MOV  R31,R22
000578 2f67      	MOV  R22,R23
000579 5058      	SUBI R21,8
00057a cff9      	RJMP __CFD12
                 __CFD13:
00057b 2355      	TST  R21
00057c f031      	BREQ __CFD15
                 __CFD14:
00057d 9576      	LSR  R23
00057e 9567      	ROR  R22
00057f 95f7      	ROR  R31
000580 95e7      	ROR  R30
000581 955a      	DEC  R21
000582 f7d1      	BRNE __CFD14
                 __CFD15:
000583 2000      	TST  R0
000584 f40a      	BRPL __CFD16
000585 d088      	RCALL __ANEGD1
                 __CFD16:
000586 915f      	POP  R21
000587 9508      	RET
                 
                 __CDF1U:
000588 9468      	SET
000589 c001      	RJMP __CDF1U0
                 __CDF1:
00058a 94e8      	CLT
                 __CDF1U0:
00058b 9730      	SBIW R30,0
00058c 4060      	SBCI R22,0
00058d 4070      	SBCI R23,0
00058e f0b1      	BREQ __CDF10
00058f 2400      	CLR  R0
000590 f026      	BRTS __CDF11
000591 2377      	TST  R23
000592 f412      	BRPL __CDF11
000593 9400      	COM  R0
000594 d079      	RCALL __ANEGD1
                 __CDF11:
000595 2e17      	MOV  R1,R23
000596 e17e      	LDI  R23,30
000597 2011      	TST  R1
                 __CDF12:
000598 f032      	BRMI __CDF13
000599 957a      	DEC  R23
00059a 0fee      	LSL  R30
00059b 1fff      	ROL  R31
00059c 1f66      	ROL  R22
00059d 1c11      	ROL  R1
00059e cff9      	RJMP __CDF12
                 __CDF13:
00059f 2fef      	MOV  R30,R31
0005a0 2ff6      	MOV  R31,R22
0005a1 2d61      	MOV  R22,R1
0005a2 935f      	PUSH R21
0005a3 df8a      	RCALL __REPACK
0005a4 915f      	POP  R21
                 __CDF10:
0005a5 9508      	RET
                 
                 __ZERORES:
0005a6 27ee      	CLR  R30
0005a7 27ff      	CLR  R31
0005a8 2766      	CLR  R22
0005a9 2777      	CLR  R23
0005aa 915f      	POP  R21
0005ab 9508      	RET
                 
                 __MINRES:
0005ac efef      	SER  R30
0005ad efff      	SER  R31
0005ae e76f      	LDI  R22,0x7F
0005af ef7f      	SER  R23
0005b0 915f      	POP  R21
0005b1 9508      	RET
                 
                 __MAXRES:
0005b2 efef      	SER  R30
0005b3 efff      	SER  R31
0005b4 e76f      	LDI  R22,0x7F
0005b5 e77f      	LDI  R23,0x7F
0005b6 915f      	POP  R21
0005b7 9508      	RET
                 
                 __MULF12:
0005b8 935f      	PUSH R21
0005b9 df86      	RCALL __UNPACK
0005ba 3870      	CPI  R23,0x80
0005bb f351      	BREQ __ZERORES
0005bc 3890      	CPI  R25,0x80
0005bd f341      	BREQ __ZERORES
0005be 2401      	EOR  R0,R1
0005bf 9408      	SEC
0005c0 1f79      	ADC  R23,R25
0005c1 f423      	BRVC __MULF124
0005c2 f31c      	BRLT __ZERORES
                 __MULF125:
0005c3 2000      	TST  R0
0005c4 f33a      	BRMI __MINRES
0005c5 cfec      	RJMP __MAXRES
                 __MULF124:
0005c6 920f      	PUSH R0
0005c7 931f      	PUSH R17
0005c8 932f      	PUSH R18
0005c9 933f      	PUSH R19
0005ca 934f      	PUSH R20
0005cb 2711      	CLR  R17
0005cc 2722      	CLR  R18
0005cd 2799      	CLR  R25
0005ce 9f68      	MUL  R22,R24
0005cf 01a0      	MOVW R20,R0
0005d0 9f8f      	MUL  R24,R31
0005d1 2d30      	MOV  R19,R0
0005d2 0d41      	ADD  R20,R1
0005d3 1f59      	ADC  R21,R25
0005d4 9f6b      	MUL  R22,R27
0005d5 0d30      	ADD  R19,R0
0005d6 1d41      	ADC  R20,R1
0005d7 1f59      	ADC  R21,R25
0005d8 9f8e      	MUL  R24,R30
0005d9 d027      	RCALL __MULF126
0005da 9fbf      	MUL  R27,R31
0005db d025      	RCALL __MULF126
0005dc 9f6a      	MUL  R22,R26
0005dd d023      	RCALL __MULF126
0005de 9fbe      	MUL  R27,R30
0005df d01d      	RCALL __MULF127
0005e0 9faf      	MUL  R26,R31
0005e1 d01b      	RCALL __MULF127
0005e2 9fae      	MUL  R26,R30
0005e3 0d11      	ADD  R17,R1
0005e4 1f29      	ADC  R18,R25
0005e5 1f39      	ADC  R19,R25
0005e6 1f49      	ADC  R20,R25
0005e7 1f59      	ADC  R21,R25
0005e8 2fe3      	MOV  R30,R19
0005e9 2ff4      	MOV  R31,R20
0005ea 2f65      	MOV  R22,R21
0005eb 2f52      	MOV  R21,R18
0005ec 914f      	POP  R20
0005ed 913f      	POP  R19
0005ee 912f      	POP  R18
0005ef 911f      	POP  R17
0005f0 900f      	POP  R0
0005f1 2366      	TST  R22
0005f2 f02a      	BRMI __MULF122
0005f3 0f55      	LSL  R21
0005f4 1fee      	ROL  R30
0005f5 1fff      	ROL  R31
0005f6 1f66      	ROL  R22
0005f7 c002      	RJMP __MULF123
                 __MULF122:
0005f8 9573      	INC  R23
0005f9 f24b      	BRVS __MULF125
                 __MULF123:
0005fa df29      	RCALL __ROUND_REPACK
0005fb 915f      	POP  R21
0005fc 9508      	RET
                 
                 __MULF127:
0005fd 0d10      	ADD  R17,R0
0005fe 1d21      	ADC  R18,R1
0005ff 1f39      	ADC  R19,R25
000600 c002      	RJMP __MULF128
                 __MULF126:
000601 0d20      	ADD  R18,R0
000602 1d31      	ADC  R19,R1
                 __MULF128:
000603 1f49      	ADC  R20,R25
000604 1f59      	ADC  R21,R25
000605 9508      	RET
                 
                 __ADDW2R15:
000606 2400      	CLR  R0
000607 0daf      	ADD  R26,R15
000608 1db0      	ADC  R27,R0
000609 9508      	RET
                 
                 __ANEGW1:
00060a 95f1      	NEG  R31
00060b 95e1      	NEG  R30
00060c 40f0      	SBCI R31,0
00060d 9508      	RET
                 
                 __ANEGD1:
00060e 95f0      	COM  R31
00060f 9560      	COM  R22
000610 9570      	COM  R23
000611 95e1      	NEG  R30
000612 4fff      	SBCI R31,-1
000613 4f6f      	SBCI R22,-1
000614 4f7f      	SBCI R23,-1
000615 9508      	RET
                 
                 __CWD1:
000616 2f6f      	MOV  R22,R31
000617 0f66      	ADD  R22,R22
000618 0b66      	SBC  R22,R22
000619 2f76      	MOV  R23,R22
00061a 9508      	RET
                 
                 __MULW12U:
00061b 9ffa      	MUL  R31,R26
00061c 2df0      	MOV  R31,R0
00061d 9feb      	MUL  R30,R27
00061e 0df0      	ADD  R31,R0
00061f 9fea      	MUL  R30,R26
000620 2de0      	MOV  R30,R0
000621 0df1      	ADD  R31,R1
000622 9508      	RET
                 
                 __GETW1P:
000623 91ed      	LD   R30,X+
000624 91fc      	LD   R31,X
000625 9711      	SBIW R26,1
000626 9508      	RET
                 
                 __GETD1P_INC:
000627 91ed      	LD   R30,X+
000628 91fd      	LD   R31,X+
000629 916d      	LD   R22,X+
00062a 917d      	LD   R23,X+
00062b 9508      	RET
                 
                 __PUTDP1:
00062c 93ed      	ST   X+,R30
00062d 93fd      	ST   X+,R31
00062e 936d      	ST   X+,R22
00062f 937c      	ST   X,R23
000630 9508      	RET
                 
                 __PUTDP1_DEC:
000631 937e      	ST   -X,R23
000632 936e      	ST   -X,R22
000633 93fe      	ST   -X,R31
000634 93ee      	ST   -X,R30
000635 9508      	RET
                 
                 __GETW1PF:
000636 9005      	LPM  R0,Z+
000637 91f4      	LPM  R31,Z
000638 2de0      	MOV  R30,R0
000639 9508      	RET
                 
                 __PUTPARD1:
00063a 937a      	ST   -Y,R23
00063b 936a      	ST   -Y,R22
00063c 93fa      	ST   -Y,R31
00063d 93ea      	ST   -Y,R30
00063e 9508      	RET
                 
                 __SAVELOCR6:
00063f 935a      	ST   -Y,R21
                 __SAVELOCR5:
000640 934a      	ST   -Y,R20
                 __SAVELOCR4:
000641 933a      	ST   -Y,R19
                 __SAVELOCR3:
000642 932a      	ST   -Y,R18
                 __SAVELOCR2:
000643 931a      	ST   -Y,R17
000644 930a      	ST   -Y,R16
000645 9508      	RET
                 
                 __LOADLOCR6:
000646 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000647 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000648 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000649 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00064a 8119      	LDD  R17,Y+1
00064b 8108      	LD   R16,Y
00064c 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00064d 0fac      	ADD  R26,R28
00064e 1fbd      	ADC  R27,R29
                 __INITLOC0:
00064f 9005      	LPM  R0,Z+
000650 920d      	ST   X+,R0
000651 958a      	DEC  R24
000652 f7e1      	BRNE __INITLOC0
000653 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  36 r1 :  16 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   4 r7 :   3 
r8 :   3 r9 :   0 r10:   0 r11:   4 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  39 r17:  30 r18:  39 r19:  17 r20:  18 r21:  62 r22:  62 r23:  55 
r24:  20 r25:  22 r26:  91 r27:  45 r28:  26 r29:   2 r30: 286 r31: 133 
x  :  50 y  : 193 z  :  24 
Registers used: 26 out of 35 (74.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  20 add   :  16 
adiw  :  31 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  30 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   1 brmi  :   6 brne  :  28 brpl  :   6 brsh  :   2 brtc  :   2 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   1 bst   :   0 call  :  84 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  30 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   6 
cp    :   7 cpc   :   3 cpi   :  48 cpse  :   0 dec   :   5 des   :   0 
elpm  :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   7 inc   :   2 jmp   :  39 ld    :  51 ldd   :  85 
ldi   : 135 lds   :   6 lpm   :  15 lsl   :  12 lsr   :   1 mov   :  34 
movw  :  28 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   0 ori   :   7 out   :  23 pop   :  12 push  :  11 rcall :  18 
ret   :  49 reti  :   3 rjmp  :  79 rol   :  14 ror   :   7 sbc   :   2 
sbci  :  21 sbi   :   8 sbic  :   6 sbis  :   1 sbiw  :  21 sbr   :   0 
sbrc  :   3 sbrs  :  11 sec   :   1 seh   :   0 sei   :   0 sen   :   0 
ser   :   9 ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  88 std   :  30 sts   :  15 sub   :   2 subi  :  22 
swap  :   0 tst   :  18 wdr   :   0 
Instructions used: 73 out of 117 (62.4%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ca8   2858    382   3240  131072   2.5%
[.dseg] 0x000100 0x000520      0     32     32    4351   0.7%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 9 warnings
