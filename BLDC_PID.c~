#include <mega128.h>
#include <stdio.h>
#include <stdlib.h>
#include <delay.h>

#define MOTOR2_DIRECTION PORTB.3
#define MOTOR1_DIRECTION PORTB.4                
#define HALLA PINE.5
#define HALLB PINE.6
#define HALLC PINE.7
#define Kp 10
#define Ki 0
#define Kd 0
#define lessDuty 0.95
#define topDuty 0.52

//ENCODER
long int hall_sensor_value = 0;

//USART
unsigned char RXC_BUFF[20] = {0x0a,};
unsigned char RXC_index = 0;
unsigned char SET_RXC1 = 0;                        
unsigned char recByte = 0;
unsigned char BUFF = 0;  

//PID
unsigned char update = 0;
float Time = 0.01;

void GPIO_SETUP(void)
{
    //PWM
    DDRB.6 = 1;
    DDRB.7 = 1;    

    //motor direction
    DDRB.4 = 1;
    DDRB.3 = 1;

    PORTB.4 = 0;
    PORTB.3 = 0;

    //nBrake;   
    DDRB.2 = 1;
    DDRB.5 = 1;
    
    PORTB.2 = 0;
    PORTB.5 = 0;
}

void USART1_init(void)
{
    UCSR1A = 0x00;
    UCSR1B = (1<<TXEN1)|(1<<RXEN0)|(1<<RXCIE0);                           
    UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
    UCSR1C &= ~(0<<UMSEL1);

    UBRR1H = 0;
    UBRR1L = 7;
}

void Data_Tx1(unsigned char bData)
{
    while(!(UCSR1A & (1<<UDRE1))); //wait until data can be loaded.
    UDR1 = bData; //data load to TxD buffer
}

unsigned char Data_Rx1(void)
{
    while(!(UCSR1A & (1<<RXC1))); // RXC0 flag is USART Receive Complete
    return UDR1;
}

//sprintf printing function
void string_tx1(unsigned char *str)
{
    while (*str)
    {
        Data_Tx1(*str++);
    }
}

void EXT_INT_init(void)
{
    EICRB = (1<<ISC50)|(1<<ISC60)|(1<<ISC70);
    EIMSK = (1<<INT5)|(1<<INT6)|(1<<INT7);

    DDRE.5 = 0;
    DDRE.6 = 0;
    DDRE.7 = 0;
}

void TIMER_init(void)                            
{
    //TIMER2
    TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// 일반모드, 1024분주;
    
    TCCR1A = (1<<WGM11)|(1<<COM1C1)|(1<<COM1B1);    TCCR1B = (1<<WGM13)|(1<<WGM12); // WGM bit setting
    TCCR1B |= (1<<CS10); // Clock source choie

    OCR2 = 150;
    OCR1B = 0x00;
    OCR1CH = 0x00;
    OCR1CL = 0x00;
    ICR1 = 664;//1200; //664
    
    TIMSK = (1<<OCIE2);
}

unsigned int MV_Rebuilding(int less, int top, long int MV)
{
    unsigned int reMV;
    if(MV>=0)
    {
        if(top >= MV && MV >= less) return (unsigned int)MV;
        else if(MV > top) return (unsigned int)top;
        else if(less > MV) return (unsigned int)less;
    }
    if(MV < 0)
    {
        reMV = -MV;
        if(top >= reMV && MV >= less) return (unsigned int)reMV;
        else if(reMV > top) return (unsigned int)top;
        else if(less > MV) return (unsigned int)less;
    }
    return -1;
}


long int PID_Controller(int Goal, float now, float* integral, float* Err_previous)
{
    long int pErr = 0;
    float dErr = 0;
    long int MV = 0;
    float Err = 0;
    unsigned char BUFF[128]={0,};

    Err = Goal - now; //ERROR

    pErr = (Kp*Err); // P
    *integral = *integral +(Ki * Err * Time); // I
    dErr = (Kd * (Err - *Err_previous)) / Time; // D
    MV = (long int)(pErr+ *integral + dErr);// PID Control Volume

    //sprintf(BUFF, "pErr=%d, integral=%d, dErr=%d, MV=%d  Err=%d\r\n", (int)pErr, *integral, dErr, MV, (int)Err);
    //string_tx1(BUFF);

    *Err_previous = Err;
    
    return MV;
}

void producePWM(long int OCR_val, unsigned int OCR_SET)
{
    if(OCR_val < 0)
    {
        MOTOR1_DIRECTION = 1;
        MOTOR2_DIRECTION = 1;
        
        OCR1B = OCR_SET;
        OCR1CH = (OCR_SET & 0xFF00) >> 8;
        OCR1CL = 0x00FF & (OCR_SET);
    }
    else if(OCR_val >= 0)
    {
        MOTOR1_DIRECTION = 0;
        MOTOR2_DIRECTION = 0;

        OCR1B = OCR_SET;
        OCR1CH = (OCR_SET & 0xFF00) >> 8;
        OCR1CL = 0x00FF & (OCR_SET);
    }
}

interrupt [TIM2_COMP] void timer2_overflow(void)
{
    update = 1;
}

interrupt [USART1_RXC]void int_USART1(void)
{
    BUFF = UDR1;

    if(BUFF != 0x0a)
    {
        SET_RXC1 = 0;
        RXC_BUFF[RXC_index] = BUFF;
        RXC_index++;
    }
    else
    {
        RXC_index = 0;
        SET_RXC1 = 1;
    }
}

interrupt [EXT_INT5] void hall_sensor_detection1(void)
{
    if(HALLA != HALLB) hall_sensor_value--;
    else hall_sensor_value++;    
}

interrupt [EXT_INT6] void hall_sensor_detection2(void)
{
    if(HALLB != HALLC) hall_sensor_value--;
    else hall_sensor_value++;
}

interrupt [EXT_INT7] void hall_sensor_detection3(void)
{
    if(HALLC != HALLA) hall_sensor_value--;
    else hall_sensor_value++;
}

void main(void)
{
    int i = 0;

    int Goal = 0;
    float Err = 0;
    float integral = 0;
    float now = 0;
    float now_check = 0;

    unsigned char update_cnt = 0;
    char BUFF[128]={0,};
    
    //Controll Volume
    long int OCR_val = 0;
    unsigned int OCR_SET = 0;

    USART1_init();
    TIMER_init();
    GPIO_SETUP();
    EXT_INT_init();

    SREG |= 0x80;      
    
    while(1)
    {

        
        if(update)
        {
            now = (hall_sensor_value / 0.06);

            if(SET_RXC1)
            {
                Goal = atoi(RXC_BUFF);
                SET_RXC1 = 0;
            }
            for(i = 0; i<20; i++)
            {
                RXC_BUFF[i] = 0;
            }

            OCR_val = PID_Controller(Goal, now, &integral, &Err);
            OCR_SET = MV_Rebuilding(-(ICR1*Duty), (ICR1*topDuty), OCR_val);
            producePWM(OCR_val, OCR_SET);

            update_cnt++;
            update = 0;
            hall_sensor_value = 0;
        }
        
        if(update_cnt == 10)
        {
            sprintf(BUFF, "Goal=%d,%d,%d,%d,%d \r\n", Goal,(int)now, (int)Err, OCR_val,OCR_SET*((MOTOR1_DIRECTION)?-1:1));
            string_tx1(BUFF);
            update_cnt = 0;
        }
    }
}