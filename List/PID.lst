
AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\PID\List\PID.asm Tue Dec 24 17:55:13 2019

C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1061): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1062): warning: Register r6 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1063): warning: Register r9 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1064): warning: Register r8 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1065): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _RXC_index=R7
                 	.DEF _SET_RXC1=R6
                 	.DEF _recByte=R9
                 	.DEF _BUFF=R8
                 	.DEF _tick=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0105 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0282 	JMP  _hall_sensor_detection1
00000e 940c 0296 	JMP  _hall_sensor_detection2
000010 940c 02aa 	JMP  _hall_sensor_detection3
000012 940c 0000 	JMP  0x00
000014 940c 0260 	JMP  _timer2_overflow
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0269 	JMP  _int_USART1
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1117): warning: .cseg .db misalignment - padding zero byte
00004f 000a      	.DB  0xA
                 _0x4:
000050 aa47
000051 3b6f      	.DB  0x47,0xAA,0x6F,0x3B
                 _0x30:
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 0000
000063 0000
000064 0000
000065 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000066 0000
000067 0000
000068 0000
000069 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006a 0000
00006b 0000
00006c 0000
00006d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006e 0000
00006f 0000
000070 0000
000071 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000072 0000
000073 0000
000074 0000
000075 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000076 0000
000077 0000
000078 0000
000079 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007a 0000
00007b 0000
00007c 0000
00007d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007e 0000
00007f 0000
000080 0000
000081 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000082 0000
000083 0000
000084 0000
000085 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000086 0000
000087 0000
000088 0000
000089 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008a 0000
00008b 0000
00008c 0000
00008d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008e 0000
00008f 0000
000090 0000
000091 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000092 0000
000093 0000
000094 0000
000095 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000096 0000
000097 0000
000098 0000
000099 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x44:
00009a 0000
00009b 0000
00009c 0000
00009d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00009e 0000
00009f 0000
0000a0 0000
0000a1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a2 0000
0000a3 0000
0000a4 0000
0000a5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a6 0000
0000a7 0000
0000a8 0000
0000a9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000aa 0000
0000ab 0000
0000ac 0000
0000ad 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ae 0000
0000af 0000
0000b0 0000
0000b1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b2 0000
0000b3 0000
0000b4 0000
0000b5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b6 0000
0000b7 0000
0000b8 0000
0000b9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ba 0000
0000bb 0000
0000bc 0000
0000bd 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000be 0000
0000bf 0000
0000c0 0000
0000c1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000c2 0000
0000c3 0000
0000c4 0000
0000c5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000c6 0000
0000c7 0000
0000c8 0000
0000c9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ca 0000
0000cb 0000
0000cc 0000
0000cd 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ce 0000
0000cf 0000
0000d0 0000
0000d1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000d2 0000
0000d3 0000
0000d4 0000
0000d5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000d6 0000
0000d7 0000
0000d8 0000
0000d9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000da 0000
0000db 0000
0000dc 0000
0000dd 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000de 0000
0000df 0000
0000e0 0000
0000e1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000e2 0000      	.DB  0x0,0x0
                 _0x52:
0000e3 0000
0000e4 0000
0000e5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
0000e6 6f47
0000e7 6c61
0000e8 253d
0000e9 2c64      	.DB  0x47,0x6F,0x61,0x6C,0x3D,0x25,0x64,0x2C
0000ea 6425
0000eb 252c
0000ec 2c64
0000ed 6425      	.DB  0x25,0x64,0x2C,0x25,0x64,0x2C,0x25,0x64
0000ee 252c
0000ef 2064
0000f0 0a0d
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1164): warning: .cseg .db misalignment - padding zero byte
0000f1 0000      	.DB  0x2C,0x25,0x64,0x20,0xD,0xA,0x0
                 _0x2020060:
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1166): warning: .cseg .db misalignment - padding zero byte
0000f2 0001      	.DB  0x1
                 _0x2020000:
0000f3 4e2d
0000f4 4e41
0000f5 4900
0000f6 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1169): warning: .cseg .db misalignment - padding zero byte
0000f7 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
0000f8 0001      	.DW  0x01
0000f9 0504      	.DW  _RXC_BUFF
0000fa 009e      	.DW  _0x3*2
                 
0000fb 0004      	.DW  0x04
0000fc 0518      	.DW  _Time
0000fd 00a0      	.DW  _0x4*2
                 
0000fe 0006      	.DW  0x06
0000ff 0006      	.DW  0x06
000100 01c6      	.DW  _0x52*2
                 
000101 0001      	.DW  0x01
000102 051c      	.DW  __seed_G101
000103 01e4      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000104 0000      	.DW  0
                 
                 __RESET:
000105 94f8      	CLI
000106 27ee      	CLR  R30
000107 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000108 e0f1      	LDI  R31,1
000109 bff5      	OUT  MCUCR,R31
00010a bfe5      	OUT  MCUCR,R30
00010b 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00010d e1f8      	LDI  R31,0x18
00010e bdf1      	OUT  WDTCR,R31
00010f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000110 e08d      	LDI  R24,(14-2)+1
000111 e0a2      	LDI  R26,2
000112 27bb      	CLR  R27
                 __CLEAR_REG:
000113 93ed      	ST   X+,R30
000114 958a      	DEC  R24
000115 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000116 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000117 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000118 e0a0      	LDI  R26,LOW(__SRAM_START)
000119 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00011a 93ed      	ST   X+,R30
00011b 9701      	SBIW R24,1
00011c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00011d efe0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00011e e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00011f 9185      	LPM  R24,Z+
000120 9195      	LPM  R25,Z+
000121 9700      	SBIW R24,0
000122 f061      	BREQ __GLOBAL_INI_END
000123 91a5      	LPM  R26,Z+
000124 91b5      	LPM  R27,Z+
000125 9005      	LPM  R0,Z+
000126 9015      	LPM  R1,Z+
000127 01bf      	MOVW R22,R30
000128 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000129 9005      	LPM  R0,Z+
00012a 920d      	ST   X+,R0
00012b 9701      	SBIW R24,1
00012c f7e1      	BRNE __GLOBAL_INI_LOOP
00012d 01fb      	MOVW R30,R22
00012e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00012f bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000130 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000131 bfed      	OUT  SPL,R30
000132 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000133 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000134 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000135 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000136 940c 02c6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;
                 ;#define MOTOR2_DIRECTION PORTB.3
                 ;#define MOTOR1_DIRECTION PORTB.4
                 ;#define HALLA PINE.5
                 ;#define HALLB PINE.6
                 ;#define HALLC PINE.7
                 ;#define Kp 100
                 ;//#define Ki 0.2
                 ;#define Ki 0
                 ;#define Kd 0
                 ;
                 ;#define Duty 0.45
                 ;
                 ;//ENCODER
                 ;long int hall_sensor_value = 0;
                 ;
                 ;//USART
                 ;unsigned char RXC_BUFF[20] = {0x0a,};
                 
                 	.DSEG
                 ;unsigned char RXC_index = 0;
                 ;unsigned char SET_RXC1 = 0;
                 ;unsigned char recByte = 0;
                 ;unsigned char BUFF = 0;
                 ;
                 ;//PID
                 ;char tick = 0;
                 ;float Time = 0.003657;
                 ;
                 ;void GPIO_SETUP(void)
                 ; 0000 0021 {
                 
                 	.CSEG
                 _GPIO_SETUP:
                 ; 0000 0022     //PWM
                 ; 0000 0023     DDRB.6 = 1;
000138 9abe      	SBI  0x17,6
                 ; 0000 0024     DDRB.7 = 1;
000139 9abf      	SBI  0x17,7
                 ; 0000 0025 
                 ; 0000 0026     //motor direction
                 ; 0000 0027     DDRB.4 = 1;
00013a 9abc      	SBI  0x17,4
                 ; 0000 0028     DDRB.3 = 1;
00013b 9abb      	SBI  0x17,3
                 ; 0000 0029 
                 ; 0000 002A     PORTB.4 = 0;
00013c 98c4      	CBI  0x18,4
                 ; 0000 002B     PORTB.3 = 0;
00013d 98c3      	CBI  0x18,3
                 ; 0000 002C 
                 ; 0000 002D     //nBrake;
                 ; 0000 002E     DDRB.2 = 1;
00013e 9aba      	SBI  0x17,2
                 ; 0000 002F     DDRB.5 = 1;
00013f 9abd      	SBI  0x17,5
                 ; 0000 0030 
                 ; 0000 0031     PORTB.2 = 0;
000140 98c2      	CBI  0x18,2
                 ; 0000 0032     PORTB.5 = 0;
000141 98c5      	CBI  0x18,5
                 ; 0000 0033 }
000142 9508      	RET
                 ;
                 ;void USART1_init(void)
                 ; 0000 0036 {
                 _USART1_init:
                 ; 0000 0037     UCSR1A = 0x00;
000143 e0e0      	LDI  R30,LOW(0)
000144 93e0 009b 	STS  155,R30
                 ; 0000 0038     UCSR1B = (1<<TXEN1)|(1<<RXEN0)|(1<<RXCIE0);
000146 e9e8      	LDI  R30,LOW(152)
000147 93e0 009a 	STS  154,R30
                 ; 0000 0039     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
000149 e0e6      	LDI  R30,LOW(6)
00014a 93e0 009d 	STS  157,R30
                 ; 0000 003A     UCSR1C &= ~(0<<UMSEL1);
00014c e9ad      	LDI  R26,LOW(157)
00014d e0b0      	LDI  R27,HIGH(157)
00014e 91ec      	LD   R30,X
00014f 93ec      	ST   X,R30
                 ; 0000 003B 
                 ; 0000 003C     UBRR1H = 0;
000150 e0e0      	LDI  R30,LOW(0)
000151 93e0 0098 	STS  152,R30
                 ; 0000 003D     UBRR1L = 7;
000153 e0e7      	LDI  R30,LOW(7)
000154 93e0 0099 	STS  153,R30
                 ; 0000 003E }
000156 9508      	RET
                 ;
                 ;void Data_Tx1(unsigned char bData)
                 ; 0000 0041 {
                 _Data_Tx1:
                 ; 0000 0042     while(!(UCSR1A & (1<<UDRE1))); //wait until data can be loaded.
                 ;	bData -> Y+0
                 _0x19:
000157 91e0 009b 	LDS  R30,155
000159 72e0      	ANDI R30,LOW(0x20)
00015a f3e1      	BREQ _0x19
                 ; 0000 0043     UDR1 = bData; //data load to TxD buffer
00015b 81e8      	LD   R30,Y
00015c 93e0 009c 	STS  156,R30
                 ; 0000 0044 }
00015e 9621      	ADIW R28,1
00015f 9508      	RET
                 ;
                 ;unsigned char Data_Rx1(void)
                 ; 0000 0047 {
                 ; 0000 0048     while(!(UCSR1A & (1<<RXC1))); // RXC0 flag is USART Receive Complete
                 ; 0000 0049     return UDR1;
                 ; 0000 004A }
                 ;
                 ;//sprintf printing function
                 ;void string_tx1(unsigned char *str)
                 ; 0000 004E {
                 _string_tx1:
                 ; 0000 004F     while (*str)
                 ;	*str -> Y+0
                 _0x1F:
000160 81a8      	LD   R26,Y
000161 81b9      	LDD  R27,Y+1
000162 91ec      	LD   R30,X
000163 30e0      	CPI  R30,0
000164 f031      	BREQ _0x21
                 ; 0000 0050     {
                 ; 0000 0051         Data_Tx1(*str++);
000165 91ed      	LD   R30,X+
000166 83a8      	ST   Y,R26
000167 83b9      	STD  Y+1,R27
000168 93ea      	ST   -Y,R30
000169 dfed      	RCALL _Data_Tx1
                 ; 0000 0052     }
00016a cff5      	RJMP _0x1F
                 _0x21:
                 ; 0000 0053 }
00016b 9622      	ADIW R28,2
00016c 9508      	RET
                 ;
                 ;void EXT_INT_init(void)
                 ; 0000 0056 {
                 _EXT_INT_init:
                 ; 0000 0057     EICRB = (1<<ISC50)|(1<<ISC60)|(1<<ISC70);
00016d e5e4      	LDI  R30,LOW(84)
00016e bfea      	OUT  0x3A,R30
                 ; 0000 0058     EIMSK = (1<<INT5)|(1<<INT6)|(1<<INT7);
00016f eee0      	LDI  R30,LOW(224)
000170 bfe9      	OUT  0x39,R30
                 ; 0000 0059 
                 ; 0000 005A     DDRE.5 = 0;
000171 9815      	CBI  0x2,5
                 ; 0000 005B     DDRE.6 = 0;
000172 9816      	CBI  0x2,6
                 ; 0000 005C     DDRE.7 = 0;
000173 9817      	CBI  0x2,7
                 ; 0000 005D }
000174 9508      	RET
                 ;
                 ;void TIMER_init(void)
                 ; 0000 0060 {
                 _TIMER_init:
                 ; 0000 0061     //TIMER2
                 ; 0000 0062     TCCR2 = (1<<CS22)|(1<<CS20);// 일반모드, 1024분주;
000175 e0e5      	LDI  R30,LOW(5)
000176 bde5      	OUT  0x25,R30
                 ; 0000 0063 
                 ; 0000 0064     TCCR1A = (1<<WGM11)|(1<<COM1C1)|(1<<COM1B1);    TCCR1B = (1<<WGM13)|(1<<WGM12); // WGM bit setting
000177 e2ea      	LDI  R30,LOW(42)
000178 bdef      	OUT  0x2F,R30
000179 e1e8      	LDI  R30,LOW(24)
00017a bdee      	OUT  0x2E,R30
                 ; 0000 0065     TCCR1B |= (1<<CS10); // Clock source choie
00017b b5ee      	IN   R30,0x2E
00017c 60e1      	ORI  R30,1
00017d bdee      	OUT  0x2E,R30
                 ; 0000 0066 
                 ; 0000 0067     OCR1B = 0x00;
00017e e0e0      	LDI  R30,LOW(0)
00017f e0f0      	LDI  R31,HIGH(0)
000180 bdf9      	OUT  0x28+1,R31
000181 bde8      	OUT  0x28,R30
                 ; 0000 0068     OCR1CH = 0x00;
000182 93e0 0079 	STS  121,R30
                 ; 0000 0069     OCR1CL = 0x00;
000184 93e0 0078 	STS  120,R30
                 ; 0000 006A     ICR1 = 1200;//1200; //664
000186 ebe0      	LDI  R30,LOW(1200)
000187 e0f4      	LDI  R31,HIGH(1200)
000188 bdf7      	OUT  0x26+1,R31
000189 bde6      	OUT  0x26,R30
                 ; 0000 006B 
                 ; 0000 006C     TIMSK = (1<<TOIE2);
00018a e4e0      	LDI  R30,LOW(64)
00018b bfe7      	OUT  0x37,R30
                 ; 0000 006D }
00018c 9508      	RET
                 ;
                 ;unsigned int MV_Rebuilding(int first, int last, long int MV)
                 ; 0000 0070 {
                 _MV_Rebuilding:
                 ; 0000 0071     unsigned int reMV;
                 ; 0000 0072 
                 ; 0000 0073     if(MV >= last) reMV = (unsigned int)last;
00018d 931a      	ST   -Y,R17
00018e 930a      	ST   -Y,R16
                 ;	first -> Y+8
                 ;	last -> Y+6
                 ;	MV -> Y+2
                 ;	reMV -> R16,R17
00018f 81ee      	LDD  R30,Y+6
000190 81ff      	LDD  R31,Y+6+1
000191 940e 05a4 	CALL SUBOPT_0x0
000193 940e 07d1 	CALL __CPD21
000195 f01c      	BRLT _0x28
                +
000196 810e     +LDD R16 , Y + 6
000197 811f     +LDD R17 , Y + 6 + 1
                 	__GETWRS 16,17,6
                 ; 0000 0074     else if(MV <= first) reMV = (unsigned int)((-1)*first);
000198 c024      	RJMP _0x29
                 _0x28:
000199 85e8      	LDD  R30,Y+8
00019a 85f9      	LDD  R31,Y+8+1
00019b 940e 05a4 	CALL SUBOPT_0x0
00019d 940e 07cc 	CALL __CPD12
00019f f044      	BRLT _0x2A
0001a0 85e8      	LDD  R30,Y+8
0001a1 85f9      	LDD  R31,Y+8+1
0001a2 efaf      	LDI  R26,LOW(65535)
0001a3 efbf      	LDI  R27,HIGH(65535)
0001a4 940e 0785 	CALL __MULW12
0001a6 018f      	MOVW R16,R30
                 ; 0000 0075 
                 ; 0000 0076     else if(MV> first && MV < 0) reMV = (unsigned int)((-1)*MV);
0001a7 c015      	RJMP _0x2B
                 _0x2A:
0001a8 85e8      	LDD  R30,Y+8
0001a9 85f9      	LDD  R31,Y+8+1
0001aa 940e 05a4 	CALL SUBOPT_0x0
0001ac 940e 07cc 	CALL __CPD12
0001ae f41c      	BRGE _0x2D
0001af 81ad      	LDD  R26,Y+5
0001b0 23aa      	TST  R26
0001b1 f00a      	BRMI _0x2E
                 _0x2D:
0001b2 c008      	RJMP _0x2C
                 _0x2E:
0001b3 81ea      	LDD  R30,Y+2
0001b4 81fb      	LDD  R31,Y+2+1
0001b5 efaf      	LDI  R26,LOW(65535)
0001b6 efbf      	LDI  R27,HIGH(65535)
0001b7 940e 0785 	CALL __MULW12
0001b9 018f      	MOVW R16,R30
                 ; 0000 0077     else reMV = MV;
0001ba c002      	RJMP _0x2F
                 _0x2C:
                +
0001bb 810a     +LDD R16 , Y + 2
0001bc 811b     +LDD R17 , Y + 2 + 1
                 	__GETWRS 16,17,2
                 ; 0000 0078 
                 ; 0000 0079     return reMV;
                 _0x2F:
                 _0x2B:
                 _0x29:
0001bd 01f8      	MOVW R30,R16
0001be 8119      	LDD  R17,Y+1
0001bf 8108      	LDD  R16,Y+0
0001c0 962a      	ADIW R28,10
0001c1 9508      	RET
                 ; 0000 007A }
                 ;
                 ;
                 ;long int PID_Controller(int Goal, float now, float* integral, float* Err_previous)
                 ; 0000 007E {
                 _PID_Controller:
                 ; 0000 007F     long int pErr = 0;
                 ; 0000 0080     float dErr = 0;
                 ; 0000 0081     long int MV = 0;
                 ; 0000 0082     float Err = 0;
                 ; 0000 0083     unsigned char BUFF[128]={0,};
                 ; 0000 0084 
                 ; 0000 0085     Err = Goal - now; //ERROR
0001c2 97ef      	SBIW R28,63
0001c3 97ef      	SBIW R28,63
0001c4 9762      	SBIW R28,18
0001c5 e980      	LDI  R24,144
0001c6 e0a0      	LDI  R26,LOW(0)
0001c7 e0b0      	LDI  R27,HIGH(0)
0001c8 eae4      	LDI  R30,LOW(_0x30*2)
0001c9 e0f0      	LDI  R31,HIGH(_0x30*2)
0001ca 940e 07e4 	CALL __INITLOCB
                 ;	Goal -> Y+152
                 ;	now -> Y+148
                 ;	*integral -> Y+146
                 ;	*Err_previous -> Y+144
                 ;	pErr -> Y+140
                 ;	dErr -> Y+136
                 ;	MV -> Y+132
                 ;	Err -> Y+128
                 ;	BUFF -> Y+0
                +
0001cc 01fe     +MOVW R30 , R28
0001cd 56ec     +SUBI R30 , LOW ( - 148 )
0001ce 4fff     +SBCI R31 , HIGH ( - 148 )
0001cf 9001     +LD R0 , Z +
0001d0 9011     +LD R1 , Z +
0001d1 9161     +LD R22 , Z +
0001d2 8170     +LD R23 , Z
0001d3 01f0     +MOVW R30 , R0
                 	__GETD1SX 148
                +
0001d4 01de     +MOVW R26 , R28
0001d5 56a8     +SUBI R26 , LOW ( - 152 )
0001d6 4fbf     +SBCI R27 , HIGH ( - 152 )
0001d7 900d     +LD R0 , X +
0001d8 91bc     +LD R27 , X
0001d9 2da0     +MOV R26 , R0
                 	__GETW2SX 152
0001da 940e 0778 	CALL __CWD2
0001dc 940e 07bc 	CALL __CDF2
0001de 940e 07bf 	CALL __SWAPD12
0001e0 940e 06be 	CALL __SUBF12
                +
0001e2 01de     +MOVW R26 , R28
0001e3 58a0     +SUBI R26 , LOW ( - 128 )
0001e4 4fbf     +SBCI R27 , HIGH ( - 128 )
0001e5 93ed     +ST X + , R30
0001e6 93fd     +ST X + , R31
0001e7 936d     +ST X + , R22
0001e8 937c     +ST X , R23
                 	__PUTD1SX 128
                 ; 0000 0086 
                 ; 0000 0087     pErr = (Kp*Err); // P
0001e9 940e 05ab 	CALL SUBOPT_0x1
                +
0001eb e0a0     +LDI R26 , LOW ( 0x42C80000 )
0001ec e0b0     +LDI R27 , HIGH ( 0x42C80000 )
0001ed ec88     +LDI R24 , BYTE3 ( 0x42C80000 )
0001ee e492     +LDI R25 , BYTE4 ( 0x42C80000 )
                 	__GETD2N 0x42C80000
0001ef 940e 0715 	CALL __MULF12
0001f1 01de      	MOVW R26,R28
0001f2 57a4      	SUBI R26,LOW(-(140))
0001f3 4fbf      	SBCI R27,HIGH(-(140))
0001f4 940e 0654 	CALL __CFD1
0001f6 940e 07a7 	CALL __PUTDP1
                 ; 0000 0088     *integral = *integral +(Ki * Err * Time); // I
0001f8 940e 05b4 	CALL SUBOPT_0x2
0001fa 940e 079c 	CALL __GETD1P
                +
0001fc e0a0     +LDI R26 , LOW ( 0x0 )
0001fd e0b0     +LDI R27 , HIGH ( 0x0 )
0001fe e080     +LDI R24 , BYTE3 ( 0x0 )
0001ff e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
000200 940e 06c5 	CALL __ADDF12
000202 940e 05b4 	CALL SUBOPT_0x2
000204 940e 07a7 	CALL __PUTDP1
                 ; 0000 0089     dErr = (Kd * (Err - *Err_previous)) / Time; // D
000206 e0e0      	LDI  R30,LOW(0)
                +
000207 01de     +MOVW R26 , R28
000208 57a8     +SUBI R26 , LOW ( - 136 )
000209 4fbf     +SBCI R27 , HIGH ( - 136 )
00020a 93ed     +ST X + , R30
00020b 93ed     +ST X + , R30
00020c 93ed     +ST X + , R30
00020d 93ec     +ST X , R30
                 	__CLRD1SX 136
                 ; 0000 008A     MV = (long int)(pErr+ *integral + dErr);// PID Control Volume
00020e 940e 05b4 	CALL SUBOPT_0x2
000210 940e 079c 	CALL __GETD1P
                +
000212 01de     +MOVW R26 , R28
000213 57a4     +SUBI R26 , LOW ( - 140 )
000214 4fbf     +SBCI R27 , HIGH ( - 140 )
000215 900d     +LD R0 , X +
000216 901d     +LD R1 , X +
000217 918d     +LD R24 , X +
000218 919c     +LD R25 , X
000219 01d0     +MOVW R26 , R0
                 	__GETD2SX 140
00021a 940e 07bc 	CALL __CDF2
00021c 940e 06c5 	CALL __ADDF12
                +
00021e 01de     +MOVW R26 , R28
00021f 57a8     +SUBI R26 , LOW ( - 136 )
000220 4fbf     +SBCI R27 , HIGH ( - 136 )
000221 900d     +LD R0 , X +
000222 901d     +LD R1 , X +
000223 918d     +LD R24 , X +
000224 919c     +LD R25 , X
000225 01d0     +MOVW R26 , R0
                 	__GETD2SX 136
000226 940e 06c5 	CALL __ADDF12
000228 940e 0654 	CALL __CFD1
                +
00022a 01de     +MOVW R26 , R28
00022b 57ac     +SUBI R26 , LOW ( - 132 )
00022c 4fbf     +SBCI R27 , HIGH ( - 132 )
00022d 93ed     +ST X + , R30
00022e 93fd     +ST X + , R31
00022f 936d     +ST X + , R22
000230 937c     +ST X , R23
                 	__PUTD1SX 132
                 ; 0000 008B 
                 ; 0000 008C     //sprintf(BUFF, "pErr=%d, integral=%d, dErr=%d, MV=%d  Err=%d\r\n", (int)pErr, *integral, dErr, MV, (int)Err);
                 ; 0000 008D     //string_tx1(BUFF);
                 ; 0000 008E 
                 ; 0000 008F     *Err_previous = Err;
000231 940e 05ab 	CALL SUBOPT_0x1
                +
000233 01de     +MOVW R26 , R28
000234 57a0     +SUBI R26 , LOW ( - 144 )
000235 4fbf     +SBCI R27 , HIGH ( - 144 )
000236 900d     +LD R0 , X +
000237 91bc     +LD R27 , X
000238 2da0     +MOV R26 , R0
                 	__GETW2SX 144
000239 940e 07a7 	CALL __PUTDP1
                 ; 0000 0090 
                 ; 0000 0091     return MV;
                +
00023b 01fe     +MOVW R30 , R28
00023c 57ec     +SUBI R30 , LOW ( - 132 )
00023d 4fff     +SBCI R31 , HIGH ( - 132 )
00023e 9001     +LD R0 , Z +
00023f 9011     +LD R1 , Z +
000240 9161     +LD R22 , Z +
000241 8170     +LD R23 , Z
000242 01f0     +MOVW R30 , R0
                 	__GETD1SX 132
000243 96ef      	ADIW R28,63
000244 96ef      	ADIW R28,63
000245 966c      	ADIW R28,28
000246 9508      	RET
                 ; 0000 0092 }
                 ;
                 ;void producePWM(int OCR_val, unsigned int OCR_SET)
                 ; 0000 0095 {
                 _producePWM:
                 ; 0000 0096     if(OCR_val < 0)
                 ;	OCR_val -> Y+2
                 ;	OCR_SET -> Y+0
000247 81ab      	LDD  R26,Y+3
000248 23aa      	TST  R26
000249 f41a      	BRPL _0x31
                 ; 0000 0097     {
                 ; 0000 0098         MOTOR1_DIRECTION = 1;
00024a 9ac4      	SBI  0x18,4
                 ; 0000 0099         MOTOR2_DIRECTION = 1;
00024b 9ac3      	SBI  0x18,3
                 ; 0000 009A 
                 ; 0000 009B         OCR1B = OCR_SET;
00024c c005      	RJMP _0x50
                 ; 0000 009C         OCR1CH = (OCR_SET & 0xFF00) >> 8;
                 ; 0000 009D         OCR1CL = 0x00FF & (OCR_SET);
                 ; 0000 009E     }
                 ; 0000 009F     else if(OCR_val >= 0)
                 _0x31:
00024d 81ab      	LDD  R26,Y+3
00024e 23aa      	TST  R26
00024f f072      	BRMI _0x37
                 ; 0000 00A0     {
                 ; 0000 00A1         MOTOR1_DIRECTION = 0;
000250 98c4      	CBI  0x18,4
                 ; 0000 00A2         MOTOR2_DIRECTION = 0;
000251 98c3      	CBI  0x18,3
                 ; 0000 00A3 
                 ; 0000 00A4         OCR1B = OCR_SET;
                 _0x50:
000252 81e8      	LD   R30,Y
000253 81f9      	LDD  R31,Y+1
000254 bdf9      	OUT  0x28+1,R31
000255 bde8      	OUT  0x28,R30
                 ; 0000 00A5         OCR1CH = (OCR_SET & 0xFF00) >> 8;
000256 70e0      	ANDI R30,LOW(0xFF00)
000257 2fef      	MOV  R30,R31
000258 e0f0      	LDI  R31,0
000259 93e0 0079 	STS  121,R30
                 ; 0000 00A6         OCR1CL = 0x00FF & (OCR_SET);
00025b 81e8      	LD   R30,Y
00025c 93e0 0078 	STS  120,R30
                 ; 0000 00A7     }
                 ; 0000 00A8 }
                 _0x37:
00025e 9624      	ADIW R28,4
00025f 9508      	RET
                 ;
                 ;interrupt [TIM2_OVF] void timer2_overflow(void)
                 ; 0000 00AB {
                 _timer2_overflow:
000260 93ea      	ST   -Y,R30
000261 b7ef      	IN   R30,SREG
000262 93ea      	ST   -Y,R30
                 ; 0000 00AC     tick += 255;
000263 efef      	LDI  R30,LOW(255)
000264 0ebe      	ADD  R11,R30
                 ; 0000 00AD }
000265 91e9      	LD   R30,Y+
000266 bfef      	OUT  SREG,R30
000267 91e9      	LD   R30,Y+
000268 9518      	RETI
                 ;
                 ;interrupt [USART1_RXC]void int_USART1(void)
                 ; 0000 00B0 {
                 _int_USART1:
000269 93ea      	ST   -Y,R30
00026a 93fa      	ST   -Y,R31
00026b b7ef      	IN   R30,SREG
00026c 93ea      	ST   -Y,R30
                 ; 0000 00B1     BUFF = UDR1;
00026d 9080 009c 	LDS  R8,156
                 ; 0000 00B2 
                 ; 0000 00B3     if(BUFF != 0x0a)
00026f e0ea      	LDI  R30,LOW(10)
000270 15e8      	CP   R30,R8
000271 f041      	BREQ _0x3C
                 ; 0000 00B4     {
                 ; 0000 00B5         SET_RXC1 = 0;
000272 2466      	CLR  R6
                 ; 0000 00B6         RXC_BUFF[RXC_index] = BUFF;
000273 2de7      	MOV  R30,R7
000274 e0f0      	LDI  R31,0
000275 5fec      	SUBI R30,LOW(-_RXC_BUFF)
000276 4ffa      	SBCI R31,HIGH(-_RXC_BUFF)
000277 8280      	ST   Z,R8
                 ; 0000 00B7         RXC_index++;
000278 9473      	INC  R7
                 ; 0000 00B8     }
                 ; 0000 00B9     else
000279 c003      	RJMP _0x3D
                 _0x3C:
                 ; 0000 00BA     {
                 ; 0000 00BB         RXC_index = 0;
00027a 2477      	CLR  R7
                 ; 0000 00BC         SET_RXC1 = 1;
00027b e0e1      	LDI  R30,LOW(1)
00027c 2e6e      	MOV  R6,R30
                 ; 0000 00BD     }
                 _0x3D:
                 ; 0000 00BE }
00027d 91e9      	LD   R30,Y+
00027e bfef      	OUT  SREG,R30
00027f 91f9      	LD   R31,Y+
000280 91e9      	LD   R30,Y+
000281 9518      	RETI
                 ;
                 ;interrupt [EXT_INT5] void hall_sensor_detection1(void)
                 ; 0000 00C1 {
                 _hall_sensor_detection1:
000282 940e 05bb 	CALL SUBOPT_0x3
                 ; 0000 00C2     if(HALLA != HALLB) hall_sensor_value--;
000284 e0a0      	LDI  R26,0
000285 990d      	SBIC 0x1,5
000286 e0a1      	LDI  R26,1
000287 e0e0      	LDI  R30,0
000288 990e      	SBIC 0x1,6
000289 e0e1      	LDI  R30,1
00028a 17ea      	CP   R30,R26
00028b f029      	BREQ _0x3E
00028c 940e 05c4 	CALL SUBOPT_0x4
00028e 940e 05c9 	CALL SUBOPT_0x5
                 ; 0000 00C3     else hall_sensor_value++;
000290 c004      	RJMP _0x3F
                 _0x3E:
000291 940e 05c4 	CALL SUBOPT_0x4
000293 940e 05d3 	CALL SUBOPT_0x6
                 ; 0000 00C4 }
                 _0x3F:
000295 c027      	RJMP _0x51
                 ;
                 ;interrupt [EXT_INT6] void hall_sensor_detection2(void)
                 ; 0000 00C7 {
                 _hall_sensor_detection2:
000296 940e 05bb 	CALL SUBOPT_0x3
                 ; 0000 00C8     if(HALLB != HALLC) hall_sensor_value--;
000298 e0a0      	LDI  R26,0
000299 990e      	SBIC 0x1,6
00029a e0a1      	LDI  R26,1
00029b e0e0      	LDI  R30,0
00029c 990f      	SBIC 0x1,7
00029d e0e1      	LDI  R30,1
00029e 17ea      	CP   R30,R26
00029f f029      	BREQ _0x40
0002a0 940e 05c4 	CALL SUBOPT_0x4
0002a2 940e 05c9 	CALL SUBOPT_0x5
                 ; 0000 00C9     else hall_sensor_value++;
0002a4 c004      	RJMP _0x41
                 _0x40:
0002a5 940e 05c4 	CALL SUBOPT_0x4
0002a7 940e 05d3 	CALL SUBOPT_0x6
                 ; 0000 00CA }
                 _0x41:
0002a9 c013      	RJMP _0x51
                 ;
                 ;interrupt [EXT_INT7] void hall_sensor_detection3(void)
                 ; 0000 00CD {
                 _hall_sensor_detection3:
0002aa 940e 05bb 	CALL SUBOPT_0x3
                 ; 0000 00CE     if(HALLC != HALLA) hall_sensor_value--;
0002ac e0a0      	LDI  R26,0
0002ad 990f      	SBIC 0x1,7
0002ae e0a1      	LDI  R26,1
0002af e0e0      	LDI  R30,0
0002b0 990d      	SBIC 0x1,5
0002b1 e0e1      	LDI  R30,1
0002b2 17ea      	CP   R30,R26
0002b3 f029      	BREQ _0x42
0002b4 940e 05c4 	CALL SUBOPT_0x4
0002b6 940e 05c9 	CALL SUBOPT_0x5
                 ; 0000 00CF     else hall_sensor_value++;
0002b8 c004      	RJMP _0x43
                 _0x42:
0002b9 940e 05c4 	CALL SUBOPT_0x4
0002bb 940e 05d3 	CALL SUBOPT_0x6
                 ; 0000 00D0 }
                 _0x43:
                 _0x51:
0002bd 91e9      	LD   R30,Y+
0002be bfef      	OUT  SREG,R30
0002bf 91f9      	LD   R31,Y+
0002c0 91e9      	LD   R30,Y+
0002c1 91b9      	LD   R27,Y+
0002c2 91a9      	LD   R26,Y+
0002c3 9179      	LD   R23,Y+
0002c4 9169      	LD   R22,Y+
0002c5 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 00D3 {
                 _main:
                 ; 0000 00D4     int i = 0;
                 ; 0000 00D5 
                 ; 0000 00D6     int Goal = 0;
                 ; 0000 00D7     float Err = 0;
                 ; 0000 00D8     float integral = 0;
                 ; 0000 00D9     float now = 0;
                 ; 0000 00DA 
                 ; 0000 00DB     unsigned int current_time = 0;
                 ; 0000 00DC     char BUFF[128]={0,};
                 ; 0000 00DD 
                 ; 0000 00DE     //Controll Volume
                 ; 0000 00DF     long int OCR_val = 0;
                 ; 0000 00E0     unsigned int OCR_SET = 0;
                 ; 0000 00E1 
                 ; 0000 00E2     USART1_init();
0002c6 97ef      	SBIW R28,63
0002c7 97ef      	SBIW R28,63
0002c8 9764      	SBIW R28,20
0002c9 e982      	LDI  R24,146
0002ca e0a0      	LDI  R26,LOW(0)
0002cb e0b0      	LDI  R27,HIGH(0)
0002cc e3e4      	LDI  R30,LOW(_0x44*2)
0002cd e0f1      	LDI  R31,HIGH(_0x44*2)
0002ce 940e 07e4 	CALL __INITLOCB
                 ;	i -> R16,R17
                 ;	Goal -> R18,R19
                 ;	Err -> Y+142
                 ;	integral -> Y+138
                 ;	now -> Y+134
                 ;	current_time -> R20,R21
                 ;	BUFF -> Y+6
                 ;	OCR_val -> Y+2
                 ;	OCR_SET -> Y+0
                +
0002d0 e000     +LDI R16 , LOW ( 0 )
0002d1 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0002d2 e020     +LDI R18 , LOW ( 0 )
0002d3 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0002d4 e040     +LDI R20 , LOW ( 0 )
0002d5 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0002d6 de6c      	RCALL _USART1_init
                 ; 0000 00E3     TIMER_init();
0002d7 de9d      	RCALL _TIMER_init
                 ; 0000 00E4     GPIO_SETUP();
0002d8 de5f      	RCALL _GPIO_SETUP
                 ; 0000 00E5     EXT_INT_init();
0002d9 de93      	RCALL _EXT_INT_init
                 ; 0000 00E6 
                 ; 0000 00E7     SREG |= 0x80;
0002da 9478      	BSET 7
                 ; 0000 00E8 
                 ; 0000 00E9     while(1)
                 _0x45:
                 ; 0000 00EA     {
                 ; 0000 00EB         if(SET_RXC1)
0002db 2066      	TST  R6
0002dc f041      	BREQ _0x48
                 ; 0000 00EC         {
                 ; 0000 00ED             Goal = atoi(RXC_BUFF);
0002dd e0e4      	LDI  R30,LOW(_RXC_BUFF)
0002de e0f5      	LDI  R31,HIGH(_RXC_BUFF)
0002df 93fa      	ST   -Y,R31
0002e0 93ea      	ST   -Y,R30
0002e1 940e 054c 	CALL _atoi
0002e3 019f      	MOVW R18,R30
                 ; 0000 00EE             SET_RXC1 = 0;
0002e4 2466      	CLR  R6
                 ; 0000 00EF         }
                 ; 0000 00F0         for(i = 0; i<20; i++)
                 _0x48:
                +
0002e5 e000     +LDI R16 , LOW ( 0 )
0002e6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4A:
                +
0002e7 3104     +CPI R16 , LOW ( 20 )
0002e8 e0e0     +LDI R30 , HIGH ( 20 )
0002e9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,20
0002ea f44c      	BRGE _0x4B
                 ; 0000 00F1         {
                 ; 0000 00F2             RXC_BUFF[i] = 0;
0002eb e0a4      	LDI  R26,LOW(_RXC_BUFF)
0002ec e0b5      	LDI  R27,HIGH(_RXC_BUFF)
0002ed 0fa0      	ADD  R26,R16
0002ee 1fb1      	ADC  R27,R17
0002ef e0e0      	LDI  R30,LOW(0)
0002f0 93ec      	ST   X,R30
                 ; 0000 00F3         }
                +
0002f1 5f0f     +SUBI R16 , LOW ( - 1 )
0002f2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002f3 cff3      	RJMP _0x4A
                 _0x4B:
                 ; 0000 00F4 
                 ; 0000 00F5         now = (7.5*hall_sensor_value);
0002f4 91e0 0500 	LDS  R30,_hall_sensor_value
0002f6 91f0 0501 	LDS  R31,_hall_sensor_value+1
0002f8 9160 0502 	LDS  R22,_hall_sensor_value+2
0002fa 9170 0503 	LDS  R23,_hall_sensor_value+3
0002fc 940e 068b 	CALL __CDF1
                +
0002fe e0a0     +LDI R26 , LOW ( 0x40F00000 )
0002ff e0b0     +LDI R27 , HIGH ( 0x40F00000 )
000300 ef80     +LDI R24 , BYTE3 ( 0x40F00000 )
000301 e490     +LDI R25 , BYTE4 ( 0x40F00000 )
                 	__GETD2N 0x40F00000
000302 940e 0715 	CALL __MULF12
                +
000304 01de     +MOVW R26 , R28
000305 57aa     +SUBI R26 , LOW ( - 134 )
000306 4fbf     +SBCI R27 , HIGH ( - 134 )
000307 93ed     +ST X + , R30
000308 93fd     +ST X + , R31
000309 936d     +ST X + , R22
00030a 937c     +ST X , R23
                 	__PUTD1SX 134
                 ; 0000 00F6         OCR_val = PID_Controller(Goal, now, &integral, &Err);
00030b 933a      	ST   -Y,R19
00030c 932a      	ST   -Y,R18
                +
00030d 01fe     +MOVW R30 , R28
00030e 57e8     +SUBI R30 , LOW ( - 136 )
00030f 4fff     +SBCI R31 , HIGH ( - 136 )
000310 9001     +LD R0 , Z +
000311 9011     +LD R1 , Z +
000312 9161     +LD R22 , Z +
000313 8170     +LD R23 , Z
000314 01f0     +MOVW R30 , R0
                 	__GETD1SX 136
000315 940e 07b5 	CALL __PUTPARD1
000317 01fe      	MOVW R30,R28
000318 57e0      	SUBI R30,LOW(-(144))
000319 4fff      	SBCI R31,HIGH(-(144))
00031a 93fa      	ST   -Y,R31
00031b 93ea      	ST   -Y,R30
00031c 01fe      	MOVW R30,R28
00031d 56ea      	SUBI R30,LOW(-(150))
00031e 4fff      	SBCI R31,HIGH(-(150))
00031f 93fa      	ST   -Y,R31
000320 93ea      	ST   -Y,R30
000321 dea0      	RCALL _PID_Controller
                +
000322 83ea     +STD Y + 2 , R30
000323 83fb     +STD Y + 2 + 1 , R31
000324 836c     +STD Y + 2 + 2 , R22
000325 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00F7 
                 ; 0000 00F8         OCR_SET = MV_Rebuilding(-(ICR1*Duty), (ICR1*Duty), OCR_val);
000326 940e 05dd 	CALL SUBOPT_0x7
000328 940e 061f 	CALL __ANEGF1
00032a 940e 0654 	CALL __CFD1
00032c 93fa      	ST   -Y,R31
00032d 93ea      	ST   -Y,R30
00032e 940e 05dd 	CALL SUBOPT_0x7
000330 940e 0654 	CALL __CFD1
000332 93fa      	ST   -Y,R31
000333 93ea      	ST   -Y,R30
                +
000334 81ee     +LDD R30 , Y + 6
000335 81ff     +LDD R31 , Y + 6 + 1
000336 8568     +LDD R22 , Y + 6 + 2
000337 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000338 940e 07b5 	CALL __PUTPARD1
00033a de52      	RCALL _MV_Rebuilding
00033b 83e8      	ST   Y,R30
00033c 83f9      	STD  Y+1,R31
                 ; 0000 00F9         producePWM(OCR_val, OCR_SET);
00033d 81ea      	LDD  R30,Y+2
00033e 81fb      	LDD  R31,Y+2+1
00033f 93fa      	ST   -Y,R31
000340 93ea      	ST   -Y,R30
000341 81ea      	LDD  R30,Y+2
000342 81fb      	LDD  R31,Y+2+1
000343 93fa      	ST   -Y,R31
000344 93ea      	ST   -Y,R30
000345 df01      	RCALL _producePWM
                 ; 0000 00FA 
                 ; 0000 00FB 
                 ; 0000 00FC         tick += TCNT2;
000346 b5e4      	IN   R30,0x24
000347 0ebe      	ADD  R11,R30
                 ; 0000 00FD         TCNT2 = 0;
000348 e0e0      	LDI  R30,LOW(0)
000349 bde4      	OUT  0x24,R30
                 ; 0000 00FE         Time = 0.000069*tick;
00034a 2deb      	MOV  R30,R11
00034b e0f0      	LDI  R31,0
00034c 940e 0773 	CALL __CWD1
00034e 940e 068b 	CALL __CDF1
                +
000350 e1a8     +LDI R26 , LOW ( 0x3890B418 )
000351 ebb4     +LDI R27 , HIGH ( 0x3890B418 )
000352 e980     +LDI R24 , BYTE3 ( 0x3890B418 )
000353 e398     +LDI R25 , BYTE4 ( 0x3890B418 )
                 	__GETD2N 0x3890B418
000354 940e 0715 	CALL __MULF12
000356 93e0 0518 	STS  _Time,R30
000358 93f0 0519 	STS  _Time+1,R31
00035a 9360 051a 	STS  _Time+2,R22
00035c 9370 051b 	STS  _Time+3,R23
                 ; 0000 00FF         sprintf(BUFF, "Goal=%d,%d,%d,%d,%d \r\n", Goal, (int)now, (int)Err, OCR_val,OCR_SET*((MOTOR1_DIRECTION)?-1:1));
00035e 01fe      	MOVW R30,R28
00035f 9636      	ADIW R30,6
000360 93fa      	ST   -Y,R31
000361 93ea      	ST   -Y,R30
                +
000362 ecec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000363 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000364 93fa      	ST   -Y,R31
000365 93ea      	ST   -Y,R30
000366 01f9      	MOVW R30,R18
000367 940e 05ea 	CALL SUBOPT_0x8
                +
000369 01fe     +MOVW R30 , R28
00036a 57e2     +SUBI R30 , LOW ( - 142 )
00036b 4fff     +SBCI R31 , HIGH ( - 142 )
00036c 9001     +LD R0 , Z +
00036d 9011     +LD R1 , Z +
00036e 9161     +LD R22 , Z +
00036f 8170     +LD R23 , Z
000370 01f0     +MOVW R30 , R0
                 	__GETD1SX 142
000371 940e 0654 	CALL __CFD1
000373 940e 05ea 	CALL SUBOPT_0x8
                +
000375 01fe     +MOVW R30 , R28
000376 56e6     +SUBI R30 , LOW ( - 154 )
000377 4fff     +SBCI R31 , HIGH ( - 154 )
000378 9001     +LD R0 , Z +
000379 9011     +LD R1 , Z +
00037a 9161     +LD R22 , Z +
00037b 8170     +LD R23 , Z
00037c 01f0     +MOVW R30 , R0
                 	__GETD1SX 154
00037d 940e 0654 	CALL __CFD1
00037f 940e 05ea 	CALL SUBOPT_0x8
                +
000381 89ea     +LDD R30 , Y + 18
000382 89fb     +LDD R31 , Y + 18 + 1
000383 896c     +LDD R22 , Y + 18 + 2
000384 897d     +LDD R23 , Y + 18 + 3
                 	__GETD1S 18
000385 940e 07b5 	CALL __PUTPARD1
000387 9bc4      	SBIS 0x18,4
000388 c002      	RJMP _0x4C
000389 efef      	LDI  R30,LOW(255)
00038a c001      	RJMP _0x4D
                 _0x4C:
00038b e0e1      	LDI  R30,LOW(1)
                 _0x4D:
00038c e0f0      	LDI  R31,0
00038d fde7      	SBRC R30,7
00038e efff      	SER  R31
00038f 89ac      	LDD  R26,Y+20
000390 89bd      	LDD  R27,Y+20+1
000391 940e 077d 	CALL __MULW12U
000393 2766      	CLR  R22
000394 2777      	CLR  R23
000395 940e 07b5 	CALL __PUTPARD1
000397 e184      	LDI  R24,20
000398 940e 0516 	CALL _sprintf
00039a 9668      	ADIW R28,24
                 ; 0000 0100         string_tx1(BUFF);
00039b 01fe      	MOVW R30,R28
00039c 9636      	ADIW R30,6
00039d 93fa      	ST   -Y,R31
00039e 93ea      	ST   -Y,R30
00039f ddc0      	RCALL _string_tx1
                 ; 0000 0101 
                 ; 0000 0102         tick = 0;
0003a0 24bb      	CLR  R11
                 ; 0000 0103     }
0003a1 cf39      	RJMP _0x45
                 ; 0000 0104 }
                 _0x4F:
0003a2 cfff      	RJMP _0x4F
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
0003a3 931a      	ST   -Y,R17
0003a4 930a      	ST   -Y,R16
0003a5 81aa      	LDD  R26,Y+2
0003a6 81bb      	LDD  R27,Y+2+1
0003a7 9612      	ADIW R26,2
0003a8 940e 0798 	CALL __GETW1P
0003aa 9730      	SBIW R30,0
0003ab f159      	BREQ _0x2000010
0003ac 81aa      	LDD  R26,Y+2
0003ad 81bb      	LDD  R27,Y+2+1
0003ae 9614      	ADIW R26,4
0003af 940e 0798 	CALL __GETW1P
0003b1 018f      	MOVW R16,R30
0003b2 9730      	SBIW R30,0
0003b3 f061      	BREQ _0x2000012
                +
0003b4 3002     +CPI R16 , LOW ( 2 )
0003b5 e0e0     +LDI R30 , HIGH ( 2 )
0003b6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0003b7 f0f0      	BRLO _0x2000013
0003b8 01f8      	MOVW R30,R16
0003b9 9731      	SBIW R30,1
0003ba 018f      	MOVW R16,R30
                +
0003bb 81aa     +LDD R26 , Y + 2
0003bc 81bb     +LDD R27 , Y + 2 + 1
0003bd 9614     +ADIW R26 , 4
0003be 93ed     +ST X + , R30
0003bf 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0003c0 81aa      	LDD  R26,Y+2
0003c1 81bb      	LDD  R27,Y+2+1
0003c2 9612      	ADIW R26,2
0003c3 91ed      	LD   R30,X+
0003c4 91fd      	LD   R31,X+
0003c5 9631      	ADIW R30,1
0003c6 93fe      	ST   -X,R31
0003c7 93ee      	ST   -X,R30
0003c8 9731      	SBIW R30,1
0003c9 81ac      	LDD  R26,Y+4
0003ca 83a0      	STD  Z+0,R26
0003cb 81aa      	LDD  R26,Y+2
0003cc 81bb      	LDD  R27,Y+2+1
0003cd 940e 0798 	CALL __GETW1P
0003cf 23ff      	TST  R31
0003d0 f02a      	BRMI _0x2000014
0003d1 91ed      	LD   R30,X+
0003d2 91fd      	LD   R31,X+
0003d3 9631      	ADIW R30,1
0003d4 93fe      	ST   -X,R31
0003d5 93ee      	ST   -X,R30
                 _0x2000014:
                 _0x2000013:
0003d6 c006      	RJMP _0x2000015
                 _0x2000010:
0003d7 81aa      	LDD  R26,Y+2
0003d8 81bb      	LDD  R27,Y+2+1
0003d9 efef      	LDI  R30,LOW(65535)
0003da efff      	LDI  R31,HIGH(65535)
0003db 93ed      	ST   X+,R30
0003dc 93fc      	ST   X,R31
                 _0x2000015:
0003dd 8119      	LDD  R17,Y+1
0003de 8108      	LDD  R16,Y+0
0003df 9625      	ADIW R28,5
0003e0 9508      	RET
                 __print_G100:
0003e1 9726      	SBIW R28,6
0003e2 940e 07d6 	CALL __SAVELOCR6
0003e4 e010      	LDI  R17,0
0003e5 85ac      	LDD  R26,Y+12
0003e6 85bd      	LDD  R27,Y+12+1
0003e7 e0e0      	LDI  R30,LOW(0)
0003e8 e0f0      	LDI  R31,HIGH(0)
0003e9 93ed      	ST   X+,R30
0003ea 93fc      	ST   X,R31
                 _0x2000016:
0003eb 89ea      	LDD  R30,Y+18
0003ec 89fb      	LDD  R31,Y+18+1
0003ed 9631      	ADIW R30,1
0003ee 8bea      	STD  Y+18,R30
0003ef 8bfb      	STD  Y+18+1,R31
0003f0 9731      	SBIW R30,1
0003f1 91e4      	LPM  R30,Z
0003f2 2f2e      	MOV  R18,R30
0003f3 30e0      	CPI  R30,0
0003f4 f411      	BRNE PC+3
0003f5 940c 050e 	JMP _0x2000018
0003f7 2fe1      	MOV  R30,R17
0003f8 30e0      	CPI  R30,0
0003f9 f439      	BRNE _0x200001C
0003fa 3225      	CPI  R18,37
0003fb f411      	BRNE _0x200001D
0003fc e011      	LDI  R17,LOW(1)
0003fd c002      	RJMP _0x200001E
                 _0x200001D:
0003fe 940e 05ef 	CALL SUBOPT_0x9
                 _0x200001E:
000400 c10c      	RJMP _0x200001B
                 _0x200001C:
000401 30e1      	CPI  R30,LOW(0x1)
000402 f4a9      	BRNE _0x200001F
000403 3225      	CPI  R18,37
000404 f419      	BRNE _0x2000020
000405 940e 05ef 	CALL SUBOPT_0x9
000407 c104      	RJMP _0x20000C9
                 _0x2000020:
000408 e012      	LDI  R17,LOW(2)
000409 e040      	LDI  R20,LOW(0)
00040a e000      	LDI  R16,LOW(0)
00040b 322d      	CPI  R18,45
00040c f411      	BRNE _0x2000021
00040d e001      	LDI  R16,LOW(1)
00040e c0fe      	RJMP _0x200001B
                 _0x2000021:
00040f 322b      	CPI  R18,43
000410 f411      	BRNE _0x2000022
000411 e24b      	LDI  R20,LOW(43)
000412 c0fa      	RJMP _0x200001B
                 _0x2000022:
000413 3220      	CPI  R18,32
000414 f411      	BRNE _0x2000023
000415 e240      	LDI  R20,LOW(32)
000416 c0f6      	RJMP _0x200001B
                 _0x2000023:
000417 c002      	RJMP _0x2000024
                 _0x200001F:
000418 30e2      	CPI  R30,LOW(0x2)
000419 f439      	BRNE _0x2000025
                 _0x2000024:
00041a e050      	LDI  R21,LOW(0)
00041b e013      	LDI  R17,LOW(3)
00041c 3320      	CPI  R18,48
00041d f411      	BRNE _0x2000026
00041e 6800      	ORI  R16,LOW(128)
00041f c0ed      	RJMP _0x200001B
                 _0x2000026:
000420 c004      	RJMP _0x2000027
                 _0x2000025:
000421 30e3      	CPI  R30,LOW(0x3)
000422 f011      	BREQ PC+3
000423 940c 050d 	JMP _0x200001B
                 _0x2000027:
000425 3320      	CPI  R18,48
000426 f010      	BRLO _0x200002A
000427 332a      	CPI  R18,58
000428 f008      	BRLO _0x200002B
                 _0x200002A:
000429 c007      	RJMP _0x2000029
                 _0x200002B:
00042a e0aa      	LDI  R26,LOW(10)
00042b 9f5a      	MUL  R21,R26
00042c 2d50      	MOV  R21,R0
00042d 2fe2      	MOV  R30,R18
00042e 53e0      	SUBI R30,LOW(48)
00042f 0f5e      	ADD  R21,R30
000430 c0dc      	RJMP _0x200001B
                 _0x2000029:
000431 2fe2      	MOV  R30,R18
000432 36e3      	CPI  R30,LOW(0x63)
000433 f449      	BRNE _0x200002F
000434 940e 05f8 	CALL SUBOPT_0xA
000436 89e8      	LDD  R30,Y+16
000437 89f9      	LDD  R31,Y+16+1
000438 81a4      	LDD  R26,Z+4
000439 93aa      	ST   -Y,R26
00043a 940e 05fe 	CALL SUBOPT_0xB
00043c c0cf      	RJMP _0x2000030
                 _0x200002F:
00043d 37e3      	CPI  R30,LOW(0x73)
00043e f441      	BRNE _0x2000032
00043f 940e 05f8 	CALL SUBOPT_0xA
000441 940e 0606 	CALL SUBOPT_0xC
000443 940e 058f 	CALL _strlen
000445 2f1e      	MOV  R17,R30
000446 c00a      	RJMP _0x2000033
                 _0x2000032:
000447 37e0      	CPI  R30,LOW(0x70)
000448 f461      	BRNE _0x2000035
000449 940e 05f8 	CALL SUBOPT_0xA
00044b 940e 0606 	CALL SUBOPT_0xC
00044d 940e 0599 	CALL _strlenf
00044f 2f1e      	MOV  R17,R30
000450 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000451 6002      	ORI  R16,LOW(2)
000452 770f      	ANDI R16,LOW(127)
000453 e030      	LDI  R19,LOW(0)
000454 c035      	RJMP _0x2000036
                 _0x2000035:
000455 36e4      	CPI  R30,LOW(0x64)
000456 f011      	BREQ _0x2000039
000457 36e9      	CPI  R30,LOW(0x69)
000458 f411      	BRNE _0x200003A
                 _0x2000039:
000459 6004      	ORI  R16,LOW(4)
00045a c002      	RJMP _0x200003B
                 _0x200003A:
00045b 37e5      	CPI  R30,LOW(0x75)
00045c f431      	BRNE _0x200003C
                 _0x200003B:
00045d e8ec      	LDI  R30,LOW(_tbl10_G100*2)
00045e e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00045f 83ee      	STD  Y+6,R30
000460 83ff      	STD  Y+6+1,R31
000461 e015      	LDI  R17,LOW(5)
000462 c00d      	RJMP _0x200003D
                 _0x200003C:
000463 35e8      	CPI  R30,LOW(0x58)
000464 f411      	BRNE _0x200003F
000465 6008      	ORI  R16,LOW(8)
000466 c004      	RJMP _0x2000040
                 _0x200003F:
000467 37e8      	CPI  R30,LOW(0x78)
000468 f011      	BREQ PC+3
000469 940c 050c 	JMP _0x2000071
                 _0x2000040:
00046b e9e6      	LDI  R30,LOW(_tbl16_G100*2)
00046c e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00046d 83ee      	STD  Y+6,R30
00046e 83ff      	STD  Y+6+1,R31
00046f e014      	LDI  R17,LOW(4)
                 _0x200003D:
000470 ff02      	SBRS R16,2
000471 c014      	RJMP _0x2000042
000472 940e 05f8 	CALL SUBOPT_0xA
000474 940e 0610 	CALL SUBOPT_0xD
000476 85ab      	LDD  R26,Y+11
000477 23aa      	TST  R26
000478 f43a      	BRPL _0x2000043
000479 85ea      	LDD  R30,Y+10
00047a 85fb      	LDD  R31,Y+10+1
00047b 940e 0767 	CALL __ANEGW1
00047d 87ea      	STD  Y+10,R30
00047e 87fb      	STD  Y+10+1,R31
00047f e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000480 3040      	CPI  R20,0
000481 f011      	BREQ _0x2000044
000482 5f1f      	SUBI R17,-LOW(1)
000483 c001      	RJMP _0x2000045
                 _0x2000044:
000484 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000485 c004      	RJMP _0x2000046
                 _0x2000042:
000486 940e 05f8 	CALL SUBOPT_0xA
000488 940e 0610 	CALL SUBOPT_0xD
                 _0x2000046:
                 _0x2000036:
00048a fd00      	SBRC R16,0
00048b c011      	RJMP _0x2000047
                 _0x2000048:
00048c 1715      	CP   R17,R21
00048d f478      	BRSH _0x200004A
00048e ff07      	SBRS R16,7
00048f c008      	RJMP _0x200004B
000490 ff02      	SBRS R16,2
000491 c004      	RJMP _0x200004C
000492 7f0b      	ANDI R16,LOW(251)
000493 2f24      	MOV  R18,R20
000494 5011      	SUBI R17,LOW(1)
000495 c001      	RJMP _0x200004D
                 _0x200004C:
000496 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000497 c001      	RJMP _0x200004E
                 _0x200004B:
000498 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000499 940e 05ef 	CALL SUBOPT_0x9
00049b 5051      	SUBI R21,LOW(1)
00049c cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00049d 2f31      	MOV  R19,R17
00049e ff01      	SBRS R16,1
00049f c017      	RJMP _0x200004F
                 _0x2000050:
0004a0 3030      	CPI  R19,0
0004a1 f0a1      	BREQ _0x2000052
0004a2 ff03      	SBRS R16,3
0004a3 c006      	RJMP _0x2000053
0004a4 81ee      	LDD  R30,Y+6
0004a5 81ff      	LDD  R31,Y+6+1
0004a6 9125      	LPM  R18,Z+
0004a7 83ee      	STD  Y+6,R30
0004a8 83ff      	STD  Y+6+1,R31
0004a9 c005      	RJMP _0x2000054
                 _0x2000053:
0004aa 81ae      	LDD  R26,Y+6
0004ab 81bf      	LDD  R27,Y+6+1
0004ac 912d      	LD   R18,X+
0004ad 83ae      	STD  Y+6,R26
0004ae 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0004af 940e 05ef 	CALL SUBOPT_0x9
0004b1 3050      	CPI  R21,0
0004b2 f009      	BREQ _0x2000055
0004b3 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0004b4 5031      	SUBI R19,LOW(1)
0004b5 cfea      	RJMP _0x2000050
                 _0x2000052:
0004b6 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0004b7 e320      	LDI  R18,LOW(48)
0004b8 81ee      	LDD  R30,Y+6
0004b9 81ff      	LDD  R31,Y+6+1
0004ba 940e 07b1 	CALL __GETW1PF
0004bc 87e8      	STD  Y+8,R30
0004bd 87f9      	STD  Y+8+1,R31
0004be 81ee      	LDD  R30,Y+6
0004bf 81ff      	LDD  R31,Y+6+1
0004c0 9632      	ADIW R30,2
0004c1 83ee      	STD  Y+6,R30
0004c2 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0004c3 85e8      	LDD  R30,Y+8
0004c4 85f9      	LDD  R31,Y+8+1
0004c5 85aa      	LDD  R26,Y+10
0004c6 85bb      	LDD  R27,Y+10+1
0004c7 17ae      	CP   R26,R30
0004c8 07bf      	CPC  R27,R31
0004c9 f050      	BRLO _0x200005C
0004ca 5f2f      	SUBI R18,-LOW(1)
0004cb 85a8      	LDD  R26,Y+8
0004cc 85b9      	LDD  R27,Y+8+1
0004cd 85ea      	LDD  R30,Y+10
0004ce 85fb      	LDD  R31,Y+10+1
0004cf 1bea      	SUB  R30,R26
0004d0 0bfb      	SBC  R31,R27
0004d1 87ea      	STD  Y+10,R30
0004d2 87fb      	STD  Y+10+1,R31
0004d3 cfef      	RJMP _0x200005A
                 _0x200005C:
0004d4 332a      	CPI  R18,58
0004d5 f028      	BRLO _0x200005D
0004d6 ff03      	SBRS R16,3
0004d7 c002      	RJMP _0x200005E
0004d8 5f29      	SUBI R18,-LOW(7)
0004d9 c001      	RJMP _0x200005F
                 _0x200005E:
0004da 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0004db fd04      	SBRC R16,4
0004dc c01a      	RJMP _0x2000061
0004dd 3321      	CPI  R18,49
0004de f420      	BRSH _0x2000063
0004df 85a8      	LDD  R26,Y+8
0004e0 85b9      	LDD  R27,Y+8+1
0004e1 9711      	SBIW R26,1
0004e2 f409      	BRNE _0x2000062
                 _0x2000063:
0004e3 c009      	RJMP _0x20000CA
                 _0x2000062:
0004e4 1753      	CP   R21,R19
0004e5 f010      	BRLO _0x2000067
0004e6 ff00      	SBRS R16,0
0004e7 c001      	RJMP _0x2000068
                 _0x2000067:
0004e8 c013      	RJMP _0x2000066
                 _0x2000068:
0004e9 e220      	LDI  R18,LOW(32)
0004ea ff07      	SBRS R16,7
0004eb c00b      	RJMP _0x2000069
0004ec e320      	LDI  R18,LOW(48)
                 _0x20000CA:
0004ed 6100      	ORI  R16,LOW(16)
0004ee ff02      	SBRS R16,2
0004ef c007      	RJMP _0x200006A
0004f0 7f0b      	ANDI R16,LOW(251)
0004f1 934a      	ST   -Y,R20
0004f2 940e 05fe 	CALL SUBOPT_0xB
0004f4 3050      	CPI  R21,0
0004f5 f009      	BREQ _0x200006B
0004f6 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0004f7 940e 05ef 	CALL SUBOPT_0x9
0004f9 3050      	CPI  R21,0
0004fa f009      	BREQ _0x200006C
0004fb 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0004fc 5031      	SUBI R19,LOW(1)
0004fd 85a8      	LDD  R26,Y+8
0004fe 85b9      	LDD  R27,Y+8+1
0004ff 9712      	SBIW R26,2
000500 f008      	BRLO _0x2000059
000501 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000502 ff00      	SBRS R16,0
000503 c008      	RJMP _0x200006D
                 _0x200006E:
000504 3050      	CPI  R21,0
000505 f031      	BREQ _0x2000070
000506 5051      	SUBI R21,LOW(1)
000507 e2e0      	LDI  R30,LOW(32)
000508 93ea      	ST   -Y,R30
000509 940e 05fe 	CALL SUBOPT_0xB
00050b cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
00050c e010      	LDI  R17,LOW(0)
                 _0x200001B:
00050d cedd      	RJMP _0x2000016
                 _0x2000018:
00050e 85ac      	LDD  R26,Y+12
00050f 85bd      	LDD  R27,Y+12+1
000510 940e 0798 	CALL __GETW1P
000512 940e 07dd 	CALL __LOADLOCR6
000514 9664      	ADIW R28,20
000515 9508      	RET
                 _sprintf:
000516 92ff      	PUSH R15
000517 2ef8      	MOV  R15,R24
000518 9726      	SBIW R28,6
000519 940e 07d8 	CALL __SAVELOCR4
00051b 940e 0618 	CALL SUBOPT_0xE
00051d 9730      	SBIW R30,0
00051e f419      	BRNE _0x2000072
00051f efef      	LDI  R30,LOW(65535)
000520 efff      	LDI  R31,HIGH(65535)
000521 c025      	RJMP _0x20A0001
                 _0x2000072:
000522 01de      	MOVW R26,R28
000523 9616      	ADIW R26,6
000524 940e 0763 	CALL __ADDW2R15
000526 018d      	MOVW R16,R26
000527 940e 0618 	CALL SUBOPT_0xE
000529 83ee      	STD  Y+6,R30
00052a 83ff      	STD  Y+6+1,R31
00052b e0e0      	LDI  R30,LOW(0)
00052c 87e8      	STD  Y+8,R30
00052d 87e9      	STD  Y+8+1,R30
00052e 01de      	MOVW R26,R28
00052f 961a      	ADIW R26,10
000530 940e 0763 	CALL __ADDW2R15
000532 940e 0798 	CALL __GETW1P
000534 93fa      	ST   -Y,R31
000535 93ea      	ST   -Y,R30
000536 931a      	ST   -Y,R17
000537 930a      	ST   -Y,R16
000538 eae3      	LDI  R30,LOW(_put_buff_G100)
000539 e0f3      	LDI  R31,HIGH(_put_buff_G100)
00053a 93fa      	ST   -Y,R31
00053b 93ea      	ST   -Y,R30
00053c 01fe      	MOVW R30,R28
00053d 963a      	ADIW R30,10
00053e 93fa      	ST   -Y,R31
00053f 93ea      	ST   -Y,R30
000540 dea0      	RCALL __print_G100
000541 019f      	MOVW R18,R30
000542 81ae      	LDD  R26,Y+6
000543 81bf      	LDD  R27,Y+6+1
000544 e0e0      	LDI  R30,LOW(0)
000545 93ec      	ST   X,R30
000546 01f9      	MOVW R30,R18
                 _0x20A0001:
000547 940e 07df 	CALL __LOADLOCR4
000549 962a      	ADIW R28,10
00054a 90ff      	POP  R15
00054b 9508      	RET
                 
                 	.CSEG
                 _atoi:
00054c 81b9         	ldd  r27,y+1
00054d 81a8         	ld   r26,y
                 __atoi0:
00054e 91ec         	ld   r30,x
00054f 93ea      	ST   -Y,R30
000550 940e 0585 	CALL _isspace
000552 23ee         	tst  r30
000553 f011         	breq __atoi1
000554 9611         	adiw r26,1
000555 cff8         	rjmp __atoi0
                 __atoi1:
000556 94e8         	clt
000557 91ec         	ld   r30,x
000558 32ed         	cpi  r30,'-'
000559 f411         	brne __atoi2
00055a 9468         	set
00055b c002         	rjmp __atoi3
                 __atoi2:
00055c 32eb         	cpi  r30,'+'
00055d f409         	brne __atoi4
                 __atoi3:
00055e 9611         	adiw r26,1
                 __atoi4:
00055f 2766         	clr  r22
000560 2777         	clr  r23
                 __atoi5:
000561 91ec         	ld   r30,x
000562 93ea      	ST   -Y,R30
000563 940e 057d 	CALL _isdigit
000565 23ee         	tst  r30
000566 f079         	breq __atoi6
000567 01fb         	movw r30,r22
000568 0f66         	lsl  r22
000569 1f77         	rol  r23
00056a 0f66         	lsl  r22
00056b 1f77         	rol  r23
00056c 0f6e         	add  r22,r30
00056d 1f7f         	adc  r23,r31
00056e 0f66         	lsl  r22
00056f 1f77         	rol  r23
000570 91ed         	ld   r30,x+
000571 27ff         	clr  r31
000572 53e0         	subi r30,'0'
000573 0f6e         	add  r22,r30
000574 1f7f         	adc  r23,r31
000575 cfeb         	rjmp __atoi5
                 __atoi6:
000576 01fb         	movw r30,r22
000577 f41e         	brtc __atoi7
000578 95e0         	com  r30
000579 95f0         	com  r31
00057a 9631         	adiw r30,1
                 __atoi7:
00057b 9622         	adiw r28,2
00057c 9508         	ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _isdigit:
00057d e0e1          ldi  r30,1
00057e 91f9          ld   r31,y+
00057f 33f0          cpi  r31,'0'
000580 f010          brlo isdigit0
000581 33fa          cpi  r31,'9'+1
000582 f008          brlo isdigit1
                 isdigit0:
000583 27ee          clr  r30
                 isdigit1:
000584 9508          ret
                 _isspace:
000585 e0e1          ldi  r30,1
000586 91f9          ld   r31,y+
000587 32f0          cpi  r31,' '
000588 f029          breq isspace1
000589 30f9          cpi  r31,9
00058a f010          brlo isspace0
00058b 30fe          cpi  r31,13+1
00058c f008          brlo isspace1
                 isspace0:
00058d 27ee          clr  r30
                 isspace1:
00058e 9508          ret
                 
                 	.CSEG
                 _strlen:
00058f 91a9          ld   r26,y+
000590 91b9          ld   r27,y+
000591 27ee          clr  r30
000592 27ff          clr  r31
                 strlen0:
000593 916d          ld   r22,x+
000594 2366          tst  r22
000595 f011          breq strlen1
000596 9631          adiw r30,1
000597 cffb          rjmp strlen0
                 strlen1:
000598 9508          ret
                 _strlenf:
000599 27aa          clr  r26
00059a 27bb          clr  r27
00059b 91e9          ld   r30,y+
00059c 91f9          ld   r31,y+
                 strlenf0:
00059d 9005      	lpm  r0,z+
00059e 2000          tst  r0
00059f f011          breq strlenf1
0005a0 9611          adiw r26,1
0005a1 cffb          rjmp strlenf0
                 strlenf1:
0005a2 01fd          movw r30,r26
0005a3 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _hall_sensor_value:
000500           	.BYTE 0x4
                 _RXC_BUFF:
000504           	.BYTE 0x14
                 _Time:
000518           	.BYTE 0x4
                 __seed_G101:
00051c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
                +
0005a4 81aa     +LDD R26 , Y + 2
0005a5 81bb     +LDD R27 , Y + 2 + 1
0005a6 818c     +LDD R24 , Y + 2 + 2
0005a7 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0005a8 940e 0773 	CALL __CWD1
0005aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
                +
0005ab 01fe     +MOVW R30 , R28
0005ac 58e0     +SUBI R30 , LOW ( - 128 )
0005ad 4fff     +SBCI R31 , HIGH ( - 128 )
0005ae 9001     +LD R0 , Z +
0005af 9011     +LD R1 , Z +
0005b0 9161     +LD R22 , Z +
0005b1 8170     +LD R23 , Z
0005b2 01f0     +MOVW R30 , R0
                 	__GETD1SX 128
0005b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
                +
0005b4 01de     +MOVW R26 , R28
0005b5 56ae     +SUBI R26 , LOW ( - 146 )
0005b6 4fbf     +SBCI R27 , HIGH ( - 146 )
0005b7 900d     +LD R0 , X +
0005b8 91bc     +LD R27 , X
0005b9 2da0     +MOV R26 , R0
                 	__GETW2SX 146
0005ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0005bb 936a      	ST   -Y,R22
0005bc 937a      	ST   -Y,R23
0005bd 93aa      	ST   -Y,R26
0005be 93ba      	ST   -Y,R27
0005bf 93ea      	ST   -Y,R30
0005c0 93fa      	ST   -Y,R31
0005c1 b7ef      	IN   R30,SREG
0005c2 93ea      	ST   -Y,R30
0005c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0005c4 e0a0      	LDI  R26,LOW(_hall_sensor_value)
0005c5 e0b5      	LDI  R27,HIGH(_hall_sensor_value)
0005c6 940e 07a2 	CALL __GETD1P_INC
0005c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x5:
0005c9 9731      	SBIW R30,1
0005ca 4060      	SBCI R22,0
0005cb 4070      	SBCI R23,0
0005cc 940e 07ac 	CALL __PUTDP1_DEC
                +
0005ce 5fef     +SUBI R30 , LOW ( - 1 )
0005cf 4fff     +SBCI R31 , HIGH ( - 1 )
0005d0 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0005d1 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0005d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x6:
                +
0005d3 5fef     +SUBI R30 , LOW ( - 1 )
0005d4 4fff     +SBCI R31 , HIGH ( - 1 )
0005d5 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0005d6 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0005d7 940e 07ac 	CALL __PUTDP1_DEC
0005d9 9731      	SBIW R30,1
0005da 4060      	SBCI R22,0
0005db 4070      	SBCI R23,0
0005dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
0005dd b5e6      	IN   R30,0x26
0005de b5f7      	IN   R31,0x26+1
0005df 2766      	CLR  R22
0005e0 2777      	CLR  R23
0005e1 940e 068b 	CALL __CDF1
                +
0005e3 e6a6     +LDI R26 , LOW ( 0x3EE66666 )
0005e4 e6b6     +LDI R27 , HIGH ( 0x3EE66666 )
0005e5 ee86     +LDI R24 , BYTE3 ( 0x3EE66666 )
0005e6 e39e     +LDI R25 , BYTE4 ( 0x3EE66666 )
                 	__GETD2N 0x3EE66666
0005e7 940e 0715 	CALL __MULF12
0005e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0005ea 940e 0773 	CALL __CWD1
0005ec 940e 07b5 	CALL __PUTPARD1
0005ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x9:
0005ef 932a      	ST   -Y,R18
0005f0 85ed      	LDD  R30,Y+13
0005f1 85fe      	LDD  R31,Y+13+1
0005f2 93fa      	ST   -Y,R31
0005f3 93ea      	ST   -Y,R30
0005f4 89e9      	LDD  R30,Y+17
0005f5 89fa      	LDD  R31,Y+17+1
0005f6 9509      	ICALL
0005f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
0005f8 89e8      	LDD  R30,Y+16
0005f9 89f9      	LDD  R31,Y+16+1
0005fa 9734      	SBIW R30,4
0005fb 8be8      	STD  Y+16,R30
0005fc 8bf9      	STD  Y+16+1,R31
0005fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
0005fe 85ed      	LDD  R30,Y+13
0005ff 85fe      	LDD  R31,Y+13+1
000600 93fa      	ST   -Y,R31
000601 93ea      	ST   -Y,R30
000602 89e9      	LDD  R30,Y+17
000603 89fa      	LDD  R31,Y+17+1
000604 9509      	ICALL
000605 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xC:
000606 89a8      	LDD  R26,Y+16
000607 89b9      	LDD  R27,Y+16+1
000608 9614      	ADIW R26,4
000609 940e 0798 	CALL __GETW1P
00060b 83ee      	STD  Y+6,R30
00060c 83ff      	STD  Y+6+1,R31
00060d 93fa      	ST   -Y,R31
00060e 93ea      	ST   -Y,R30
00060f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
000610 89a8      	LDD  R26,Y+16
000611 89b9      	LDD  R27,Y+16+1
000612 9614      	ADIW R26,4
000613 940e 0798 	CALL __GETW1P
000615 87ea      	STD  Y+10,R30
000616 87fb      	STD  Y+10+1,R31
000617 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000618 01de      	MOVW R26,R28
000619 961c      	ADIW R26,12
00061a 940e 0763 	CALL __ADDW2R15
00061c 940e 0798 	CALL __GETW1P
00061e 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGF1:
00061f 9730      	SBIW R30,0
000620 4060      	SBCI R22,0
000621 4070      	SBCI R23,0
000622 f009      	BREQ __ANEGF10
000623 5870      	SUBI R23,0x80
                 __ANEGF10:
000624 9508      	RET
                 
                 __ROUND_REPACK:
000625 2355      	TST  R21
000626 f442      	BRPL __REPACK
000627 3850      	CPI  R21,0x80
000628 f411      	BRNE __ROUND_REPACK0
000629 ffe0      	SBRS R30,0
00062a c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00062b 9631      	ADIW R30,1
00062c 1f69      	ADC  R22,R25
00062d 1f79      	ADC  R23,R25
00062e f06b      	BRVS __REPACK1
                 
                 __REPACK:
00062f e850      	LDI  R21,0x80
000630 2757      	EOR  R21,R23
000631 f411      	BRNE __REPACK0
000632 935f      	PUSH R21
000633 c0cf      	RJMP __ZERORES
                 __REPACK0:
000634 3f5f      	CPI  R21,0xFF
000635 f031      	BREQ __REPACK1
000636 0f66      	LSL  R22
000637 0c00      	LSL  R0
000638 9557      	ROR  R21
000639 9567      	ROR  R22
00063a 2f75      	MOV  R23,R21
00063b 9508      	RET
                 __REPACK1:
00063c 935f      	PUSH R21
00063d 2000      	TST  R0
00063e f00a      	BRMI __REPACK2
00063f c0cf      	RJMP __MAXRES
                 __REPACK2:
000640 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000641 e850      	LDI  R21,0x80
000642 2e19      	MOV  R1,R25
000643 2215      	AND  R1,R21
000644 0f88      	LSL  R24
000645 1f99      	ROL  R25
000646 2795      	EOR  R25,R21
000647 0f55      	LSL  R21
000648 9587      	ROR  R24
                 
                 __UNPACK1:
000649 e850      	LDI  R21,0x80
00064a 2e07      	MOV  R0,R23
00064b 2205      	AND  R0,R21
00064c 0f66      	LSL  R22
00064d 1f77      	ROL  R23
00064e 2775      	EOR  R23,R21
00064f 0f55      	LSL  R21
000650 9567      	ROR  R22
000651 9508      	RET
                 
                 __CFD1U:
000652 9468      	SET
000653 c001      	RJMP __CFD1U0
                 __CFD1:
000654 94e8      	CLT
                 __CFD1U0:
000655 935f      	PUSH R21
000656 dff2      	RCALL __UNPACK1
000657 3870      	CPI  R23,0x80
000658 f018      	BRLO __CFD10
000659 3f7f      	CPI  R23,0xFF
00065a f408      	BRCC __CFD10
00065b c0a7      	RJMP __ZERORES
                 __CFD10:
00065c e156      	LDI  R21,22
00065d 1b57      	SUB  R21,R23
00065e f4aa      	BRPL __CFD11
00065f 9551      	NEG  R21
000660 3058      	CPI  R21,8
000661 f40e      	BRTC __CFD19
000662 3059      	CPI  R21,9
                 __CFD19:
000663 f030      	BRLO __CFD17
000664 efef      	SER  R30
000665 efff      	SER  R31
000666 ef6f      	SER  R22
000667 e77f      	LDI  R23,0x7F
000668 f977      	BLD  R23,7
000669 c01a      	RJMP __CFD15
                 __CFD17:
00066a 2777      	CLR  R23
00066b 2355      	TST  R21
00066c f0b9      	BREQ __CFD15
                 __CFD18:
00066d 0fee      	LSL  R30
00066e 1fff      	ROL  R31
00066f 1f66      	ROL  R22
000670 1f77      	ROL  R23
000671 955a      	DEC  R21
000672 f7d1      	BRNE __CFD18
000673 c010      	RJMP __CFD15
                 __CFD11:
000674 2777      	CLR  R23
                 __CFD12:
000675 3058      	CPI  R21,8
000676 f028      	BRLO __CFD13
000677 2fef      	MOV  R30,R31
000678 2ff6      	MOV  R31,R22
000679 2f67      	MOV  R22,R23
00067a 5058      	SUBI R21,8
00067b cff9      	RJMP __CFD12
                 __CFD13:
00067c 2355      	TST  R21
00067d f031      	BREQ __CFD15
                 __CFD14:
00067e 9576      	LSR  R23
00067f 9567      	ROR  R22
000680 95f7      	ROR  R31
000681 95e7      	ROR  R30
000682 955a      	DEC  R21
000683 f7d1      	BRNE __CFD14
                 __CFD15:
000684 2000      	TST  R0
000685 f40a      	BRPL __CFD16
000686 d0e4      	RCALL __ANEGD1
                 __CFD16:
000687 915f      	POP  R21
000688 9508      	RET
                 
                 __CDF1U:
000689 9468      	SET
00068a c001      	RJMP __CDF1U0
                 __CDF1:
00068b 94e8      	CLT
                 __CDF1U0:
00068c 9730      	SBIW R30,0
00068d 4060      	SBCI R22,0
00068e 4070      	SBCI R23,0
00068f f0b1      	BREQ __CDF10
000690 2400      	CLR  R0
000691 f026      	BRTS __CDF11
000692 2377      	TST  R23
000693 f412      	BRPL __CDF11
000694 9400      	COM  R0
000695 d0d5      	RCALL __ANEGD1
                 __CDF11:
000696 2e17      	MOV  R1,R23
000697 e17e      	LDI  R23,30
000698 2011      	TST  R1
                 __CDF12:
000699 f032      	BRMI __CDF13
00069a 957a      	DEC  R23
00069b 0fee      	LSL  R30
00069c 1fff      	ROL  R31
00069d 1f66      	ROL  R22
00069e 1c11      	ROL  R1
00069f cff9      	RJMP __CDF12
                 __CDF13:
0006a0 2fef      	MOV  R30,R31
0006a1 2ff6      	MOV  R31,R22
0006a2 2d61      	MOV  R22,R1
0006a3 935f      	PUSH R21
0006a4 df8a      	RCALL __REPACK
0006a5 915f      	POP  R21
                 __CDF10:
0006a6 9508      	RET
                 
                 __SWAPACC:
0006a7 934f      	PUSH R20
0006a8 01af      	MOVW R20,R30
0006a9 01fd      	MOVW R30,R26
0006aa 01da      	MOVW R26,R20
0006ab 01ab      	MOVW R20,R22
0006ac 01bc      	MOVW R22,R24
0006ad 01ca      	MOVW R24,R20
0006ae 2d40      	MOV  R20,R0
0006af 2c01      	MOV  R0,R1
0006b0 2e14      	MOV  R1,R20
0006b1 914f      	POP  R20
0006b2 9508      	RET
                 
                 __UADD12:
0006b3 0fea      	ADD  R30,R26
0006b4 1ffb      	ADC  R31,R27
0006b5 1f68      	ADC  R22,R24
0006b6 9508      	RET
                 
                 __NEGMAN1:
0006b7 95e0      	COM  R30
0006b8 95f0      	COM  R31
0006b9 9560      	COM  R22
0006ba 5fef      	SUBI R30,-1
0006bb 4fff      	SBCI R31,-1
0006bc 4f6f      	SBCI R22,-1
0006bd 9508      	RET
                 
                 __SUBF12:
0006be 935f      	PUSH R21
0006bf df81      	RCALL __UNPACK
0006c0 3890      	CPI  R25,0x80
0006c1 f171      	BREQ __ADDF129
0006c2 e850      	LDI  R21,0x80
0006c3 2615      	EOR  R1,R21
                 
0006c4 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0006c5 935f      	PUSH R21
0006c6 df7a      	RCALL __UNPACK
0006c7 3890      	CPI  R25,0x80
0006c8 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0006c9 3870      	CPI  R23,0x80
0006ca f121      	BREQ __ADDF128
                 __ADDF121:
0006cb 2f57      	MOV  R21,R23
0006cc 1b59      	SUB  R21,R25
0006cd f12b      	BRVS __ADDF1211
0006ce f412      	BRPL __ADDF122
0006cf dfd7      	RCALL __SWAPACC
0006d0 cffa      	RJMP __ADDF121
                 __ADDF122:
0006d1 3158      	CPI  R21,24
0006d2 f018      	BRLO __ADDF123
0006d3 27aa      	CLR  R26
0006d4 27bb      	CLR  R27
0006d5 2788      	CLR  R24
                 __ADDF123:
0006d6 3058      	CPI  R21,8
0006d7 f028      	BRLO __ADDF124
0006d8 2fab      	MOV  R26,R27
0006d9 2fb8      	MOV  R27,R24
0006da 2788      	CLR  R24
0006db 5058      	SUBI R21,8
0006dc cff9      	RJMP __ADDF123
                 __ADDF124:
0006dd 2355      	TST  R21
0006de f029      	BREQ __ADDF126
                 __ADDF125:
0006df 9586      	LSR  R24
0006e0 95b7      	ROR  R27
0006e1 95a7      	ROR  R26
0006e2 955a      	DEC  R21
0006e3 f7d9      	BRNE __ADDF125
                 __ADDF126:
0006e4 2d50      	MOV  R21,R0
0006e5 2551      	EOR  R21,R1
0006e6 f072      	BRMI __ADDF127
0006e7 dfcb      	RCALL __UADD12
0006e8 f438      	BRCC __ADDF129
0006e9 9567      	ROR  R22
0006ea 95f7      	ROR  R31
0006eb 95e7      	ROR  R30
0006ec 9573      	INC  R23
0006ed f413      	BRVC __ADDF129
0006ee c020      	RJMP __MAXRES
                 __ADDF128:
0006ef dfb7      	RCALL __SWAPACC
                 __ADDF129:
0006f0 df3e      	RCALL __REPACK
0006f1 915f      	POP  R21
0006f2 9508      	RET
                 __ADDF1211:
0006f3 f7d8      	BRCC __ADDF128
0006f4 cffb      	RJMP __ADDF129
                 __ADDF127:
0006f5 1bea      	SUB  R30,R26
0006f6 0bfb      	SBC  R31,R27
0006f7 0b68      	SBC  R22,R24
0006f8 f051      	BREQ __ZERORES
0006f9 f410      	BRCC __ADDF1210
0006fa 9400      	COM  R0
0006fb dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0006fc 2366      	TST  R22
0006fd f392      	BRMI __ADDF129
0006fe 0fee      	LSL  R30
0006ff 1fff      	ROL  R31
000700 1f66      	ROL  R22
000701 957a      	DEC  R23
000702 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000703 27ee      	CLR  R30
000704 27ff      	CLR  R31
000705 2766      	CLR  R22
000706 2777      	CLR  R23
000707 915f      	POP  R21
000708 9508      	RET
                 
                 __MINRES:
000709 efef      	SER  R30
00070a efff      	SER  R31
00070b e76f      	LDI  R22,0x7F
00070c ef7f      	SER  R23
00070d 915f      	POP  R21
00070e 9508      	RET
                 
                 __MAXRES:
00070f efef      	SER  R30
000710 efff      	SER  R31
000711 e76f      	LDI  R22,0x7F
000712 e77f      	LDI  R23,0x7F
000713 915f      	POP  R21
000714 9508      	RET
                 
                 __MULF12:
000715 935f      	PUSH R21
000716 df2a      	RCALL __UNPACK
000717 3870      	CPI  R23,0x80
000718 f351      	BREQ __ZERORES
000719 3890      	CPI  R25,0x80
00071a f341      	BREQ __ZERORES
00071b 2401      	EOR  R0,R1
00071c 9408      	SEC
00071d 1f79      	ADC  R23,R25
00071e f423      	BRVC __MULF124
00071f f31c      	BRLT __ZERORES
                 __MULF125:
000720 2000      	TST  R0
000721 f33a      	BRMI __MINRES
000722 cfec      	RJMP __MAXRES
                 __MULF124:
000723 920f      	PUSH R0
000724 931f      	PUSH R17
000725 932f      	PUSH R18
000726 933f      	PUSH R19
000727 934f      	PUSH R20
000728 2711      	CLR  R17
000729 2722      	CLR  R18
00072a 2799      	CLR  R25
00072b 9f68      	MUL  R22,R24
00072c 01a0      	MOVW R20,R0
00072d 9f8f      	MUL  R24,R31
00072e 2d30      	MOV  R19,R0
00072f 0d41      	ADD  R20,R1
000730 1f59      	ADC  R21,R25
000731 9f6b      	MUL  R22,R27
000732 0d30      	ADD  R19,R0
000733 1d41      	ADC  R20,R1
000734 1f59      	ADC  R21,R25
000735 9f8e      	MUL  R24,R30
000736 d027      	RCALL __MULF126
000737 9fbf      	MUL  R27,R31
000738 d025      	RCALL __MULF126
000739 9f6a      	MUL  R22,R26
00073a d023      	RCALL __MULF126
00073b 9fbe      	MUL  R27,R30
00073c d01d      	RCALL __MULF127
00073d 9faf      	MUL  R26,R31
00073e d01b      	RCALL __MULF127
00073f 9fae      	MUL  R26,R30
000740 0d11      	ADD  R17,R1
000741 1f29      	ADC  R18,R25
000742 1f39      	ADC  R19,R25
000743 1f49      	ADC  R20,R25
000744 1f59      	ADC  R21,R25
000745 2fe3      	MOV  R30,R19
000746 2ff4      	MOV  R31,R20
000747 2f65      	MOV  R22,R21
000748 2f52      	MOV  R21,R18
000749 914f      	POP  R20
00074a 913f      	POP  R19
00074b 912f      	POP  R18
00074c 911f      	POP  R17
00074d 900f      	POP  R0
00074e 2366      	TST  R22
00074f f02a      	BRMI __MULF122
000750 0f55      	LSL  R21
000751 1fee      	ROL  R30
000752 1fff      	ROL  R31
000753 1f66      	ROL  R22
000754 c002      	RJMP __MULF123
                 __MULF122:
000755 9573      	INC  R23
000756 f24b      	BRVS __MULF125
                 __MULF123:
000757 decd      	RCALL __ROUND_REPACK
000758 915f      	POP  R21
000759 9508      	RET
                 
                 __MULF127:
00075a 0d10      	ADD  R17,R0
00075b 1d21      	ADC  R18,R1
00075c 1f39      	ADC  R19,R25
00075d c002      	RJMP __MULF128
                 __MULF126:
00075e 0d20      	ADD  R18,R0
00075f 1d31      	ADC  R19,R1
                 __MULF128:
000760 1f49      	ADC  R20,R25
000761 1f59      	ADC  R21,R25
000762 9508      	RET
                 
                 __ADDW2R15:
000763 2400      	CLR  R0
000764 0daf      	ADD  R26,R15
000765 1db0      	ADC  R27,R0
000766 9508      	RET
                 
                 __ANEGW1:
000767 95f1      	NEG  R31
000768 95e1      	NEG  R30
000769 40f0      	SBCI R31,0
00076a 9508      	RET
                 
                 __ANEGD1:
00076b 95f0      	COM  R31
00076c 9560      	COM  R22
00076d 9570      	COM  R23
00076e 95e1      	NEG  R30
00076f 4fff      	SBCI R31,-1
000770 4f6f      	SBCI R22,-1
000771 4f7f      	SBCI R23,-1
000772 9508      	RET
                 
                 __CWD1:
000773 2f6f      	MOV  R22,R31
000774 0f66      	ADD  R22,R22
000775 0b66      	SBC  R22,R22
000776 2f76      	MOV  R23,R22
000777 9508      	RET
                 
                 __CWD2:
000778 2f8b      	MOV  R24,R27
000779 0f88      	ADD  R24,R24
00077a 0b88      	SBC  R24,R24
00077b 2f98      	MOV  R25,R24
00077c 9508      	RET
                 
                 __MULW12U:
00077d 9ffa      	MUL  R31,R26
00077e 2df0      	MOV  R31,R0
00077f 9feb      	MUL  R30,R27
000780 0df0      	ADD  R31,R0
000781 9fea      	MUL  R30,R26
000782 2de0      	MOV  R30,R0
000783 0df1      	ADD  R31,R1
000784 9508      	RET
                 
                 __MULW12:
000785 d004      	RCALL __CHKSIGNW
000786 dff6      	RCALL __MULW12U
000787 f40e      	BRTC __MULW121
000788 dfde      	RCALL __ANEGW1
                 __MULW121:
000789 9508      	RET
                 
                 __CHKSIGNW:
00078a 94e8      	CLT
00078b fff7      	SBRS R31,7
00078c c002      	RJMP __CHKSW1
00078d dfd9      	RCALL __ANEGW1
00078e 9468      	SET
                 __CHKSW1:
00078f ffb7      	SBRS R27,7
000790 c006      	RJMP __CHKSW2
000791 95a0      	COM  R26
000792 95b0      	COM  R27
000793 9611      	ADIW R26,1
000794 f800      	BLD  R0,0
000795 9403      	INC  R0
000796 fa00      	BST  R0,0
                 __CHKSW2:
000797 9508      	RET
                 
                 __GETW1P:
000798 91ed      	LD   R30,X+
000799 91fc      	LD   R31,X
00079a 9711      	SBIW R26,1
00079b 9508      	RET
                 
                 __GETD1P:
00079c 91ed      	LD   R30,X+
00079d 91fd      	LD   R31,X+
00079e 916d      	LD   R22,X+
00079f 917c      	LD   R23,X
0007a0 9713      	SBIW R26,3
0007a1 9508      	RET
                 
                 __GETD1P_INC:
0007a2 91ed      	LD   R30,X+
0007a3 91fd      	LD   R31,X+
0007a4 916d      	LD   R22,X+
0007a5 917d      	LD   R23,X+
0007a6 9508      	RET
                 
                 __PUTDP1:
0007a7 93ed      	ST   X+,R30
0007a8 93fd      	ST   X+,R31
0007a9 936d      	ST   X+,R22
0007aa 937c      	ST   X,R23
0007ab 9508      	RET
                 
                 __PUTDP1_DEC:
0007ac 937e      	ST   -X,R23
0007ad 936e      	ST   -X,R22
0007ae 93fe      	ST   -X,R31
0007af 93ee      	ST   -X,R30
0007b0 9508      	RET
                 
                 __GETW1PF:
0007b1 9005      	LPM  R0,Z+
0007b2 91f4      	LPM  R31,Z
0007b3 2de0      	MOV  R30,R0
0007b4 9508      	RET
                 
                 __PUTPARD1:
0007b5 937a      	ST   -Y,R23
0007b6 936a      	ST   -Y,R22
0007b7 93fa      	ST   -Y,R31
0007b8 93ea      	ST   -Y,R30
0007b9 9508      	RET
                 
                 __CDF2U:
0007ba 9468      	SET
0007bb c001      	RJMP __CDF2U0
                 __CDF2:
0007bc 94e8      	CLT
                 __CDF2U0:
0007bd d001      	RCALL __SWAPD12
0007be decd      	RCALL __CDF1U0
                 
                 __SWAPD12:
0007bf 2e18      	MOV  R1,R24
0007c0 2f86      	MOV  R24,R22
0007c1 2d61      	MOV  R22,R1
0007c2 2e19      	MOV  R1,R25
0007c3 2f97      	MOV  R25,R23
0007c4 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0007c5 2e1b      	MOV  R1,R27
0007c6 2fbf      	MOV  R27,R31
0007c7 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0007c8 2e1a      	MOV  R1,R26
0007c9 2fae      	MOV  R26,R30
0007ca 2de1      	MOV  R30,R1
0007cb 9508      	RET
                 
                 __CPD12:
0007cc 17ea      	CP   R30,R26
0007cd 07fb      	CPC  R31,R27
0007ce 0768      	CPC  R22,R24
0007cf 0779      	CPC  R23,R25
0007d0 9508      	RET
                 
                 __CPD21:
0007d1 17ae      	CP   R26,R30
0007d2 07bf      	CPC  R27,R31
0007d3 0786      	CPC  R24,R22
0007d4 0797      	CPC  R25,R23
0007d5 9508      	RET
                 
                 __SAVELOCR6:
0007d6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0007d7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0007d8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0007d9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0007da 931a      	ST   -Y,R17
0007db 930a      	ST   -Y,R16
0007dc 9508      	RET
                 
                 __LOADLOCR6:
0007dd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0007de 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0007df 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0007e0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0007e1 8119      	LDD  R17,Y+1
0007e2 8108      	LD   R16,Y
0007e3 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0007e4 0fac      	ADD  R26,R28
0007e5 1fbd      	ADC  R27,R29
                 __INITLOC0:
0007e6 9005      	LPM  R0,Z+
0007e7 920d      	ST   X+,R0
0007e8 958a      	DEC  R24
0007e9 f7e1      	BRNE __INITLOC0
0007ea 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  61 r1 :  34 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   4 r7 :   3 
r8 :   3 r9 :   0 r10:   0 r11:   4 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  46 r17:  34 r18:  40 r19:  18 r20:  26 r21:  76 r22:  84 r23:  73 
r24:  44 r25:  35 r26: 133 r27:  76 r28:  46 r29:   2 r30: 343 r31: 166 
x  :  78 y  : 236 z  :  40 
Registers used: 26 out of 35 (74.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  18 
adiw  :  35 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  36 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   3 brmi  :   9 brne  :  29 brpl  :   7 brsh  :   2 brtc  :   3 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   1 bst   :   1 call  : 116 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  34 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :  12 
cp    :   9 cpc   :   9 cpi   :  53 cpse  :   0 dec   :   7 des   :   0 
elpm  :   0 eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   7 inc   :   4 jmp   :  39 ld    :  85 ldd   : 108 
ldi   : 156 lds   :   6 lpm   :  15 lsl   :  13 lsr   :   2 mov   :  58 
movw  :  56 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   0 ori   :   7 out   :  25 pop   :  14 push  :  14 rcall :  34 
ret   :  67 reti  :   3 rjmp  :  91 rol   :  16 ror   :  12 sbc   :   5 
sbci  :  40 sbi   :   8 sbic  :   6 sbis  :   1 sbiw  :  26 sbr   :   0 
sbrc  :   3 sbrs  :  13 sec   :   1 seh   :   0 sei   :   0 sen   :   0 
ser   :   9 ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 113 std   :  35 sts   :  15 sub   :   4 subi  :  40 
swap  :   0 tst   :  21 wdr   :   0 
Instructions used: 74 out of 117 (63.2%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000fd6   3672    382   4054  131072   3.1%
[.dseg] 0x000100 0x000520      0     32     32    4351   0.7%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 9 warnings
