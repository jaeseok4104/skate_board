
AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\PID\List\PID.asm Mon Dec 30 15:29:03 2019

C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1061): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1062): warning: Register r6 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1063): warning: Register r9 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1064): warning: Register r8 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1065): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _RXC_index=R7
                 	.DEF _SET_RXC1=R6
                 	.DEF _recByte=R9
                 	.DEF _BUFF=R8
                 	.DEF _update=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0107 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 02a3 	JMP  _hall_sensor_detection1
00000e 940c 02b7 	JMP  _hall_sensor_detection2
000010 940c 02cb 	JMP  _hall_sensor_detection3
000012 940c 0285 	JMP  _timer2_overflow
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 028a 	JMP  _int_USART1
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1117): warning: .cseg .db misalignment - padding zero byte
00004f 000a      	.DB  0xA
                 _0x4:
000050 d70a
000051 3c23      	.DB  0xA,0xD7,0x23,0x3C
                 _0x38:
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 0000
000063 0000
000064 0000
000065 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000066 0000
000067 0000
000068 0000
000069 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006a 0000
00006b 0000
00006c 0000
00006d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006e 0000
00006f 0000
000070 0000
000071 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000072 0000
000073 0000
000074 0000
000075 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000076 0000
000077 0000
000078 0000
000079 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007a 0000
00007b 0000
00007c 0000
00007d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007e 0000
00007f 0000
000080 0000
000081 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000082 0000
000083 0000
000084 0000
000085 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000086 0000
000087 0000
000088 0000
000089 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008a 0000
00008b 0000
00008c 0000
00008d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008e 0000
00008f 0000
000090 0000
000091 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000092 0000
000093 0000
000094 0000
000095 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000096 0000
000097 0000
000098 0000
000099 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x4C:
00009a 0000
00009b 0000
00009c 0000
00009d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00009e 0000
00009f 0000
0000a0 0000
0000a1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a2 0000
0000a3 0000
0000a4 0000
0000a5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a6 0000
0000a7 0000
0000a8 0000
0000a9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000aa 0000
0000ab 0000
0000ac 0000
0000ad 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ae 0000
0000af 0000
0000b0 0000
0000b1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b2 0000
0000b3 0000
0000b4 0000
0000b5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b6 0000
0000b7 0000
0000b8 0000
0000b9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ba 0000
0000bb 0000
0000bc 0000
0000bd 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000be 0000
0000bf 0000
0000c0 0000
0000c1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000c2 0000
0000c3 0000
0000c4 0000
0000c5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000c6 0000
0000c7 0000
0000c8 0000
0000c9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ca 0000
0000cb 0000
0000cc 0000
0000cd 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ce 0000
0000cf 0000
0000d0 0000
0000d1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000d2 0000
0000d3 0000
0000d4 0000
0000d5 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000d6 0000
0000d7 0000
0000d8 0000
0000d9 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000da 0000
0000db 0000
0000dc 0000
0000dd 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000de 0000
0000df 0000
0000e0 0000
0000e1 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000e2 0000
0000e3 0000
0000e4 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x5C:
0000e5 0000
0000e6 0000
0000e7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
0000e8 6f47
0000e9 6c61
0000ea 253d
0000eb 2c64      	.DB  0x47,0x6F,0x61,0x6C,0x3D,0x25,0x64,0x2C
0000ec 6425
0000ed 252c
0000ee 2c64
0000ef 6425      	.DB  0x25,0x64,0x2C,0x25,0x64,0x2C,0x25,0x64
0000f0 252c
0000f1 2064
0000f2 0a0d
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1164): warning: .cseg .db misalignment - padding zero byte
0000f3 0000      	.DB  0x2C,0x25,0x64,0x20,0xD,0xA,0x0
                 _0x2020060:
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1166): warning: .cseg .db misalignment - padding zero byte
0000f4 0001      	.DB  0x1
                 _0x2020000:
0000f5 4e2d
0000f6 4e41
0000f7 4900
0000f8 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1169): warning: .cseg .db misalignment - padding zero byte
0000f9 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
0000fa 0001      	.DW  0x01
0000fb 0504      	.DW  _RXC_BUFF
0000fc 009e      	.DW  _0x3*2
                 
0000fd 0004      	.DW  0x04
0000fe 0518      	.DW  _Time
0000ff 00a0      	.DW  _0x4*2
                 
000100 0006      	.DW  0x06
000101 0006      	.DW  0x06
000102 01ca      	.DW  _0x5C*2
                 
000103 0001      	.DW  0x01
000104 051c      	.DW  __seed_G101
000105 01e8      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000106 0000      	.DW  0
                 
                 __RESET:
000107 94f8      	CLI
000108 27ee      	CLR  R30
000109 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00010a e0f1      	LDI  R31,1
00010b bff5      	OUT  MCUCR,R31
00010c bfe5      	OUT  MCUCR,R30
00010d 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00010f e1f8      	LDI  R31,0x18
000110 bdf1      	OUT  WDTCR,R31
000111 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000112 e08d      	LDI  R24,(14-2)+1
000113 e0a2      	LDI  R26,2
000114 27bb      	CLR  R27
                 __CLEAR_REG:
000115 93ed      	ST   X+,R30
000116 958a      	DEC  R24
000117 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000118 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000119 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00011a e0a0      	LDI  R26,LOW(__SRAM_START)
00011b e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00011c 93ed      	ST   X+,R30
00011d 9701      	SBIW R24,1
00011e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00011f efe4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000120 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000121 9185      	LPM  R24,Z+
000122 9195      	LPM  R25,Z+
000123 9700      	SBIW R24,0
000124 f061      	BREQ __GLOBAL_INI_END
000125 91a5      	LPM  R26,Z+
000126 91b5      	LPM  R27,Z+
000127 9005      	LPM  R0,Z+
000128 9015      	LPM  R1,Z+
000129 01bf      	MOVW R22,R30
00012a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00012b 9005      	LPM  R0,Z+
00012c 920d      	ST   X+,R0
00012d 9701      	SBIW R24,1
00012e f7e1      	BRNE __GLOBAL_INI_LOOP
00012f 01fb      	MOVW R30,R22
000130 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000131 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000132 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000133 bfed      	OUT  SPL,R30
000134 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000135 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000136 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000137 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000138 940c 02e7 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;
                 ;#define MOTOR2_DIRECTION PORTB.3
                 ;#define MOTOR1_DIRECTION PORTB.4
                 ;#define HALLA PINE.5
                 ;#define HALLB PINE.6
                 ;#define HALLC PINE.7
                 ;#define Kp 10
                 ;#define Ki 0
                 ;#define Kd 0
                 ;#define lessDuty 0.95
                 ;#define topDuty 0.52
                 ;
                 ;//ENCODER
                 ;long int hall_sensor_value = 0;
                 ;
                 ;//USART
                 ;unsigned char RXC_BUFF[20] = {0x0a,};
                 
                 	.DSEG
                 ;unsigned char RXC_index = 0;
                 ;unsigned char SET_RXC1 = 0;
                 ;unsigned char recByte = 0;
                 ;unsigned char BUFF = 0;
                 ;
                 ;//PID
                 ;unsigned char update = 0;
                 ;float Time = 0.01;
                 ;
                 ;void GPIO_SETUP(void)
                 ; 0000 0020 {
                 
                 	.CSEG
                 _GPIO_SETUP:
                 ; 0000 0021     //PWM
                 ; 0000 0022     DDRB.6 = 1;
00013a 9abe      	SBI  0x17,6
                 ; 0000 0023     DDRB.7 = 1;
00013b 9abf      	SBI  0x17,7
                 ; 0000 0024 
                 ; 0000 0025     //motor direction
                 ; 0000 0026     DDRB.4 = 1;
00013c 9abc      	SBI  0x17,4
                 ; 0000 0027     DDRB.3 = 1;
00013d 9abb      	SBI  0x17,3
                 ; 0000 0028 
                 ; 0000 0029     PORTB.4 = 0;
00013e 98c4      	CBI  0x18,4
                 ; 0000 002A     PORTB.3 = 0;
00013f 98c3      	CBI  0x18,3
                 ; 0000 002B 
                 ; 0000 002C     //nBrake;
                 ; 0000 002D     DDRB.2 = 1;
000140 9aba      	SBI  0x17,2
                 ; 0000 002E     DDRB.5 = 1;
000141 9abd      	SBI  0x17,5
                 ; 0000 002F 
                 ; 0000 0030     PORTB.2 = 0;
000142 98c2      	CBI  0x18,2
                 ; 0000 0031     PORTB.5 = 0;
000143 98c5      	CBI  0x18,5
                 ; 0000 0032 }
000144 9508      	RET
                 ;
                 ;void USART1_init(void)
                 ; 0000 0035 {
                 _USART1_init:
                 ; 0000 0036     UCSR1A = 0x00;
000145 e0e0      	LDI  R30,LOW(0)
000146 93e0 009b 	STS  155,R30
                 ; 0000 0037     UCSR1B = (1<<TXEN1)|(1<<RXEN0)|(1<<RXCIE0);
000148 e9e8      	LDI  R30,LOW(152)
000149 93e0 009a 	STS  154,R30
                 ; 0000 0038     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
00014b e0e6      	LDI  R30,LOW(6)
00014c 93e0 009d 	STS  157,R30
                 ; 0000 0039     UCSR1C &= ~(0<<UMSEL1);
00014e e9ad      	LDI  R26,LOW(157)
00014f e0b0      	LDI  R27,HIGH(157)
000150 91ec      	LD   R30,X
000151 93ec      	ST   X,R30
                 ; 0000 003A 
                 ; 0000 003B     UBRR1H = 0;
000152 e0e0      	LDI  R30,LOW(0)
000153 93e0 0098 	STS  152,R30
                 ; 0000 003C     UBRR1L = 7;
000155 e0e7      	LDI  R30,LOW(7)
000156 93e0 0099 	STS  153,R30
                 ; 0000 003D }
000158 9508      	RET
                 ;
                 ;void Data_Tx1(unsigned char bData)
                 ; 0000 0040 {
                 _Data_Tx1:
                 ; 0000 0041     while(!(UCSR1A & (1<<UDRE1))); //wait until data can be loaded.
                 ;	bData -> Y+0
                 _0x19:
000159 91e0 009b 	LDS  R30,155
00015b 72e0      	ANDI R30,LOW(0x20)
00015c f3e1      	BREQ _0x19
                 ; 0000 0042     UDR1 = bData; //data load to TxD buffer
00015d 81e8      	LD   R30,Y
00015e 93e0 009c 	STS  156,R30
                 ; 0000 0043 }
000160 9621      	ADIW R28,1
000161 9508      	RET
                 ;
                 ;unsigned char Data_Rx1(void)
                 ; 0000 0046 {
                 ; 0000 0047     while(!(UCSR1A & (1<<RXC1))); // RXC0 flag is USART Receive Complete
                 ; 0000 0048     return UDR1;
                 ; 0000 0049 }
                 ;
                 ;//sprintf printing function
                 ;void string_tx1(unsigned char *str)
                 ; 0000 004D {
                 _string_tx1:
                 ; 0000 004E     while (*str)
                 ;	*str -> Y+0
                 _0x1F:
000162 81a8      	LD   R26,Y
000163 81b9      	LDD  R27,Y+1
000164 91ec      	LD   R30,X
000165 30e0      	CPI  R30,0
000166 f031      	BREQ _0x21
                 ; 0000 004F     {
                 ; 0000 0050         Data_Tx1(*str++);
000167 91ed      	LD   R30,X+
000168 83a8      	ST   Y,R26
000169 83b9      	STD  Y+1,R27
00016a 93ea      	ST   -Y,R30
00016b dfed      	RCALL _Data_Tx1
                 ; 0000 0051     }
00016c cff5      	RJMP _0x1F
                 _0x21:
                 ; 0000 0052 }
00016d 9622      	ADIW R28,2
00016e 9508      	RET
                 ;
                 ;void EXT_INT_init(void)
                 ; 0000 0055 {
                 _EXT_INT_init:
                 ; 0000 0056     EICRB = (1<<ISC50)|(1<<ISC60)|(1<<ISC70);
00016f e5e4      	LDI  R30,LOW(84)
000170 bfea      	OUT  0x3A,R30
                 ; 0000 0057     EIMSK = (1<<INT5)|(1<<INT6)|(1<<INT7);
000171 eee0      	LDI  R30,LOW(224)
000172 bfe9      	OUT  0x39,R30
                 ; 0000 0058 
                 ; 0000 0059     DDRE.5 = 0;
000173 9815      	CBI  0x2,5
                 ; 0000 005A     DDRE.6 = 0;
000174 9816      	CBI  0x2,6
                 ; 0000 005B     DDRE.7 = 0;
000175 9817      	CBI  0x2,7
                 ; 0000 005C }
000176 9508      	RET
                 ;
                 ;void TIMER_init(void)
                 ; 0000 005F {
                 _TIMER_init:
                 ; 0000 0060     //TIMER2
                 ; 0000 0061     TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS20);// 일반모드, 1024분주;
000177 e0ed      	LDI  R30,LOW(13)
000178 bde5      	OUT  0x25,R30
                 ; 0000 0062 
                 ; 0000 0063     TCCR1A = (1<<WGM11)|(1<<COM1C1)|(1<<COM1B1);    TCCR1B = (1<<WGM13)|(1<<WGM12); // WGM bit setting
000179 e2ea      	LDI  R30,LOW(42)
00017a bdef      	OUT  0x2F,R30
00017b e1e8      	LDI  R30,LOW(24)
00017c bdee      	OUT  0x2E,R30
                 ; 0000 0064     TCCR1B |= (1<<CS10); // Clock source choie
00017d b5ee      	IN   R30,0x2E
00017e 60e1      	ORI  R30,1
00017f bdee      	OUT  0x2E,R30
                 ; 0000 0065 
                 ; 0000 0066     OCR2 = 150;
000180 e9e6      	LDI  R30,LOW(150)
000181 bde3      	OUT  0x23,R30
                 ; 0000 0067     OCR1B = 0x00;
000182 e0e0      	LDI  R30,LOW(0)
000183 e0f0      	LDI  R31,HIGH(0)
000184 bdf9      	OUT  0x28+1,R31
000185 bde8      	OUT  0x28,R30
                 ; 0000 0068     OCR1CH = 0x00;
000186 93e0 0079 	STS  121,R30
                 ; 0000 0069     OCR1CL = 0x00;
000188 93e0 0078 	STS  120,R30
                 ; 0000 006A     ICR1 = 800;//1200; //664
00018a e2e0      	LDI  R30,LOW(800)
00018b e0f3      	LDI  R31,HIGH(800)
00018c bdf7      	OUT  0x26+1,R31
00018d bde6      	OUT  0x26,R30
                 ; 0000 006B 
                 ; 0000 006C     TIMSK = (1<<OCIE2);
00018e e8e0      	LDI  R30,LOW(128)
00018f bfe7      	OUT  0x37,R30
                 ; 0000 006D }
000190 9508      	RET
                 ;
                 ;unsigned int MV_Rebuilding(int less, int top, long int MV)
                 ; 0000 0070 {
                 _MV_Rebuilding:
                 ; 0000 0071     unsigned int reMV;
                 ; 0000 0072     if(MV>0)
000191 931a      	ST   -Y,R17
000192 930a      	ST   -Y,R16
                 ;	less -> Y+8
                 ;	top -> Y+6
                 ;	MV -> Y+2
                 ;	reMV -> R16,R17
000193 940e 05c3 	CALL SUBOPT_0x0
000195 940e 0823 	CALL __CPD02
000197 f544      	BRGE _0x28
                 ; 0000 0073     {
                 ; 0000 0074         if(top >= MV && MV >= less) return (unsigned int)MV;
000198 940e 05c8 	CALL SUBOPT_0x1
00019a 81ae      	LDD  R26,Y+6
00019b 81bf      	LDD  R27,Y+6+1
00019c 940e 07e2 	CALL __CWD2
00019e 940e 082e 	CALL __CPD21
0001a0 f01c      	BRLT _0x2A
0001a1 940e 05cd 	CALL SUBOPT_0x2
0001a3 f40c      	BRGE _0x2B
                 _0x2A:
0001a4 c003      	RJMP _0x29
                 _0x2B:
0001a5 81ea      	LDD  R30,Y+2
0001a6 81fb      	LDD  R31,Y+2+1
0001a7 c03b      	RJMP _0x20A0002
                 ; 0000 0075         else if(MV > top) return (unsigned int)top;
                 _0x29:
0001a8 81ee      	LDD  R30,Y+6
0001a9 81ff      	LDD  R31,Y+6+1
0001aa 940e 05c3 	CALL SUBOPT_0x0
0001ac 940e 07dd 	CALL __CWD1
0001ae 940e 0829 	CALL __CPD12
0001b0 f41c      	BRGE _0x2D
0001b1 81ee      	LDD  R30,Y+6
0001b2 81ff      	LDD  R31,Y+6+1
0001b3 c02f      	RJMP _0x20A0002
                 ; 0000 0076         else if(less > MV) return (unsigned int)less;
                 _0x2D:
0001b4 940e 05c8 	CALL SUBOPT_0x1
0001b6 85a8      	LDD  R26,Y+8
0001b7 85b9      	LDD  R27,Y+8+1
0001b8 940e 07e2 	CALL __CWD2
0001ba 940e 0829 	CALL __CPD12
0001bc f41c      	BRGE _0x2F
0001bd 85e8      	LDD  R30,Y+8
0001be 85f9      	LDD  R31,Y+8+1
0001bf c023      	RJMP _0x20A0002
                 ; 0000 0077     }
                 _0x2F:
                 ; 0000 0078     if(MV < 0)
                 _0x28:
0001c0 81ad      	LDD  R26,Y+5
0001c1 23aa      	TST  R26
0001c2 f4f2      	BRPL _0x30
                 ; 0000 0079     {
                 ; 0000 007A         reMV = -MV;
0001c3 81ea      	LDD  R30,Y+2
0001c4 81fb      	LDD  R31,Y+2+1
0001c5 940e 07d1 	CALL __ANEGW1
0001c7 018f      	MOVW R16,R30
                 ; 0000 007B         if(top >= reMV && MV >= less) return (unsigned int)reMV;
0001c8 81ae      	LDD  R26,Y+6
0001c9 81bf      	LDD  R27,Y+6+1
0001ca 17a0      	CP   R26,R16
0001cb 07b1      	CPC  R27,R17
0001cc f018      	BRLO _0x32
0001cd 940e 05cd 	CALL SUBOPT_0x2
0001cf f40c      	BRGE _0x33
                 _0x32:
0001d0 c002      	RJMP _0x31
                 _0x33:
0001d1 01f8      	MOVW R30,R16
0001d2 c010      	RJMP _0x20A0002
                 ; 0000 007C         else if(reMV > top) return (unsigned int)top;
                 _0x31:
0001d3 81ee      	LDD  R30,Y+6
0001d4 81ff      	LDD  R31,Y+6+1
0001d5 17e0      	CP   R30,R16
0001d6 07f1      	CPC  R31,R17
0001d7 f408      	BRSH _0x35
0001d8 c00a      	RJMP _0x20A0002
                 ; 0000 007D         else if(less > reMV) return (unsigned int)less;
                 _0x35:
0001d9 85a8      	LDD  R26,Y+8
0001da 85b9      	LDD  R27,Y+8+1
0001db 170a      	CP   R16,R26
0001dc 071b      	CPC  R17,R27
0001dd f418      	BRSH _0x37
0001de 85e8      	LDD  R30,Y+8
0001df 85f9      	LDD  R31,Y+8+1
0001e0 c002      	RJMP _0x20A0002
                 ; 0000 007E     }
                 _0x37:
                 ; 0000 007F     return 0;
                 _0x30:
0001e1 e0e0      	LDI  R30,LOW(0)
0001e2 e0f0      	LDI  R31,HIGH(0)
                 _0x20A0002:
0001e3 8119      	LDD  R17,Y+1
0001e4 8108      	LDD  R16,Y+0
0001e5 962a      	ADIW R28,10
0001e6 9508      	RET
                 ; 0000 0080 }
                 ;
                 ;
                 ;long int PID_Controller(int Goal, float now, float* integral, float* Err_previous)
                 ; 0000 0084 {
                 _PID_Controller:
                 ; 0000 0085     long int pErr = 0;
                 ; 0000 0086     float dErr = 0;
                 ; 0000 0087     long int MV = 0;
                 ; 0000 0088     float Err = 0;
                 ; 0000 0089     unsigned char BUFF[128]={0,};
                 ; 0000 008A 
                 ; 0000 008B     Err = Goal - now; //ERROR
0001e7 97ef      	SBIW R28,63
0001e8 97ef      	SBIW R28,63
0001e9 9762      	SBIW R28,18
0001ea e980      	LDI  R24,144
0001eb e0a0      	LDI  R26,LOW(0)
0001ec e0b0      	LDI  R27,HIGH(0)
0001ed eae4      	LDI  R30,LOW(_0x38*2)
0001ee e0f0      	LDI  R31,HIGH(_0x38*2)
0001ef 940e 0841 	CALL __INITLOCB
                 ;	Goal -> Y+152
                 ;	now -> Y+148
                 ;	*integral -> Y+146
                 ;	*Err_previous -> Y+144
                 ;	pErr -> Y+140
                 ;	dErr -> Y+136
                 ;	MV -> Y+132
                 ;	Err -> Y+128
                 ;	BUFF -> Y+0
                +
0001f1 01fe     +MOVW R30 , R28
0001f2 56ec     +SUBI R30 , LOW ( - 148 )
0001f3 4fff     +SBCI R31 , HIGH ( - 148 )
0001f4 9001     +LD R0 , Z +
0001f5 9011     +LD R1 , Z +
0001f6 9161     +LD R22 , Z +
0001f7 8170     +LD R23 , Z
0001f8 01f0     +MOVW R30 , R0
                 	__GETD1SX 148
                +
0001f9 01de     +MOVW R26 , R28
0001fa 56a8     +SUBI R26 , LOW ( - 152 )
0001fb 4fbf     +SBCI R27 , HIGH ( - 152 )
0001fc 900d     +LD R0 , X +
0001fd 91bc     +LD R27 , X
0001fe 2da0     +MOV R26 , R0
                 	__GETW2SX 152
0001ff 940e 07e2 	CALL __CWD2
000201 940e 0813 	CALL __CDF2
000203 940e 0816 	CALL __SWAPD12
000205 940e 06e3 	CALL __SUBF12
                +
000207 01de     +MOVW R26 , R28
000208 58a0     +SUBI R26 , LOW ( - 128 )
000209 4fbf     +SBCI R27 , HIGH ( - 128 )
00020a 93ed     +ST X + , R30
00020b 93fd     +ST X + , R31
00020c 936d     +ST X + , R22
00020d 937c     +ST X , R23
                 	__PUTD1SX 128
                 ; 0000 008C 
                 ; 0000 008D     pErr = (Kp*Err); // P
00020e 940e 05d5 	CALL SUBOPT_0x3
                +
000210 e0a0     +LDI R26 , LOW ( 0x41200000 )
000211 e0b0     +LDI R27 , HIGH ( 0x41200000 )
000212 e280     +LDI R24 , BYTE3 ( 0x41200000 )
000213 e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
000214 940e 073a 	CALL __MULF12
000216 01de      	MOVW R26,R28
000217 57a4      	SUBI R26,LOW(-(140))
000218 4fbf      	SBCI R27,HIGH(-(140))
000219 940e 0679 	CALL __CFD1
00021b 940e 07fe 	CALL __PUTDP1
                 ; 0000 008E     *integral = *integral +(Ki * Err * Time); // I
00021d 940e 05de 	CALL SUBOPT_0x4
00021f 940e 07f3 	CALL __GETD1P
                +
000221 e0a0     +LDI R26 , LOW ( 0x0 )
000222 e0b0     +LDI R27 , HIGH ( 0x0 )
000223 e080     +LDI R24 , BYTE3 ( 0x0 )
000224 e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
000225 940e 06ea 	CALL __ADDF12
000227 940e 05de 	CALL SUBOPT_0x4
000229 940e 07fe 	CALL __PUTDP1
                 ; 0000 008F     dErr = (Kd * (Err - *Err_previous)) / Time; // D
00022b e0e0      	LDI  R30,LOW(0)
                +
00022c 01de     +MOVW R26 , R28
00022d 57a8     +SUBI R26 , LOW ( - 136 )
00022e 4fbf     +SBCI R27 , HIGH ( - 136 )
00022f 93ed     +ST X + , R30
000230 93ed     +ST X + , R30
000231 93ed     +ST X + , R30
000232 93ec     +ST X , R30
                 	__CLRD1SX 136
                 ; 0000 0090     MV = (long int)(pErr+ *integral + dErr);// PID Control Volume
000233 940e 05de 	CALL SUBOPT_0x4
000235 940e 07f3 	CALL __GETD1P
                +
000237 01de     +MOVW R26 , R28
000238 57a4     +SUBI R26 , LOW ( - 140 )
000239 4fbf     +SBCI R27 , HIGH ( - 140 )
00023a 900d     +LD R0 , X +
00023b 901d     +LD R1 , X +
00023c 918d     +LD R24 , X +
00023d 919c     +LD R25 , X
00023e 01d0     +MOVW R26 , R0
                 	__GETD2SX 140
00023f 940e 0813 	CALL __CDF2
000241 940e 06ea 	CALL __ADDF12
                +
000243 01de     +MOVW R26 , R28
000244 57a8     +SUBI R26 , LOW ( - 136 )
000245 4fbf     +SBCI R27 , HIGH ( - 136 )
000246 900d     +LD R0 , X +
000247 901d     +LD R1 , X +
000248 918d     +LD R24 , X +
000249 919c     +LD R25 , X
00024a 01d0     +MOVW R26 , R0
                 	__GETD2SX 136
00024b 940e 06ea 	CALL __ADDF12
00024d 940e 0679 	CALL __CFD1
                +
00024f 01de     +MOVW R26 , R28
000250 57ac     +SUBI R26 , LOW ( - 132 )
000251 4fbf     +SBCI R27 , HIGH ( - 132 )
000252 93ed     +ST X + , R30
000253 93fd     +ST X + , R31
000254 936d     +ST X + , R22
000255 937c     +ST X , R23
                 	__PUTD1SX 132
                 ; 0000 0091 
                 ; 0000 0092     //sprintf(BUFF, "pErr=%d, integral=%d, dErr=%d, MV=%d  Err=%d\r\n", (int)pErr, *integral, dErr, MV, (int)Err);
                 ; 0000 0093     //string_tx1(BUFF);
                 ; 0000 0094 
                 ; 0000 0095     *Err_previous = Err;
000256 940e 05d5 	CALL SUBOPT_0x3
                +
000258 01de     +MOVW R26 , R28
000259 57a0     +SUBI R26 , LOW ( - 144 )
00025a 4fbf     +SBCI R27 , HIGH ( - 144 )
00025b 900d     +LD R0 , X +
00025c 91bc     +LD R27 , X
00025d 2da0     +MOV R26 , R0
                 	__GETW2SX 144
00025e 940e 07fe 	CALL __PUTDP1
                 ; 0000 0096 
                 ; 0000 0097     return MV;
                +
000260 01fe     +MOVW R30 , R28
000261 57ec     +SUBI R30 , LOW ( - 132 )
000262 4fff     +SBCI R31 , HIGH ( - 132 )
000263 9001     +LD R0 , Z +
000264 9011     +LD R1 , Z +
000265 9161     +LD R22 , Z +
000266 8170     +LD R23 , Z
000267 01f0     +MOVW R30 , R0
                 	__GETD1SX 132
000268 96ef      	ADIW R28,63
000269 96ef      	ADIW R28,63
00026a 966c      	ADIW R28,28
00026b 9508      	RET
                 ; 0000 0098 }
                 ;
                 ;void producePWM(long int OCR_val, unsigned int OCR_SET)
                 ; 0000 009B {
                 _producePWM:
                 ; 0000 009C     if(OCR_val < 0)
                 ;	OCR_val -> Y+2
                 ;	OCR_SET -> Y+0
00026c 81ad      	LDD  R26,Y+5
00026d 23aa      	TST  R26
00026e f41a      	BRPL _0x39
                 ; 0000 009D     {
                 ; 0000 009E         MOTOR1_DIRECTION = 1;
00026f 9ac4      	SBI  0x18,4
                 ; 0000 009F         MOTOR2_DIRECTION = 1;
000270 9ac3      	SBI  0x18,3
                 ; 0000 00A0 
                 ; 0000 00A1         OCR1B = OCR_SET;
000271 c005      	RJMP _0x5A
                 ; 0000 00A2         OCR1CH = (OCR_SET & 0xFF00) >> 8;
                 ; 0000 00A3         OCR1CL = 0x00FF & (OCR_SET);
                 ; 0000 00A4     }
                 ; 0000 00A5     else if(OCR_val >= 0)
                 _0x39:
000272 81ad      	LDD  R26,Y+5
000273 23aa      	TST  R26
000274 f072      	BRMI _0x3F
                 ; 0000 00A6     {
                 ; 0000 00A7         MOTOR1_DIRECTION = 0;
000275 98c4      	CBI  0x18,4
                 ; 0000 00A8         MOTOR2_DIRECTION = 0;
000276 98c3      	CBI  0x18,3
                 ; 0000 00A9 
                 ; 0000 00AA         OCR1B = OCR_SET;
                 _0x5A:
000277 81e8      	LD   R30,Y
000278 81f9      	LDD  R31,Y+1
000279 bdf9      	OUT  0x28+1,R31
00027a bde8      	OUT  0x28,R30
                 ; 0000 00AB         OCR1CH = (OCR_SET & 0xFF00) >> 8;
00027b 70e0      	ANDI R30,LOW(0xFF00)
00027c 2fef      	MOV  R30,R31
00027d e0f0      	LDI  R31,0
00027e 93e0 0079 	STS  121,R30
                 ; 0000 00AC         OCR1CL = 0x00FF & (OCR_SET);
000280 81e8      	LD   R30,Y
000281 93e0 0078 	STS  120,R30
                 ; 0000 00AD     }
                 ; 0000 00AE }
                 _0x3F:
000283 9626      	ADIW R28,6
000284 9508      	RET
                 ;
                 ;interrupt [TIM2_COMP] void timer2_overflow(void)
                 ; 0000 00B1 {
                 _timer2_overflow:
000285 93ea      	ST   -Y,R30
                 ; 0000 00B2     update = 1;
000286 e0e1      	LDI  R30,LOW(1)
000287 2ebe      	MOV  R11,R30
                 ; 0000 00B3 }
000288 91e9      	LD   R30,Y+
000289 9518      	RETI
                 ;
                 ;interrupt [USART1_RXC]void int_USART1(void)
                 ; 0000 00B6 {
                 _int_USART1:
00028a 93ea      	ST   -Y,R30
00028b 93fa      	ST   -Y,R31
00028c b7ef      	IN   R30,SREG
00028d 93ea      	ST   -Y,R30
                 ; 0000 00B7     BUFF = UDR1;
00028e 9080 009c 	LDS  R8,156
                 ; 0000 00B8 
                 ; 0000 00B9     if(BUFF != 0x0a)
000290 e0ea      	LDI  R30,LOW(10)
000291 15e8      	CP   R30,R8
000292 f041      	BREQ _0x44
                 ; 0000 00BA     {
                 ; 0000 00BB         SET_RXC1 = 0;
000293 2466      	CLR  R6
                 ; 0000 00BC         RXC_BUFF[RXC_index] = BUFF;
000294 2de7      	MOV  R30,R7
000295 e0f0      	LDI  R31,0
000296 5fec      	SUBI R30,LOW(-_RXC_BUFF)
000297 4ffa      	SBCI R31,HIGH(-_RXC_BUFF)
000298 8280      	ST   Z,R8
                 ; 0000 00BD         RXC_index++;
000299 9473      	INC  R7
                 ; 0000 00BE     }
                 ; 0000 00BF     else
00029a c003      	RJMP _0x45
                 _0x44:
                 ; 0000 00C0     {
                 ; 0000 00C1         RXC_index = 0;
00029b 2477      	CLR  R7
                 ; 0000 00C2         SET_RXC1 = 1;
00029c e0e1      	LDI  R30,LOW(1)
00029d 2e6e      	MOV  R6,R30
                 ; 0000 00C3     }
                 _0x45:
                 ; 0000 00C4 }
00029e 91e9      	LD   R30,Y+
00029f bfef      	OUT  SREG,R30
0002a0 91f9      	LD   R31,Y+
0002a1 91e9      	LD   R30,Y+
0002a2 9518      	RETI
                 ;
                 ;interrupt [EXT_INT5] void hall_sensor_detection1(void)
                 ; 0000 00C7 {
                 _hall_sensor_detection1:
0002a3 940e 05e5 	CALL SUBOPT_0x5
                 ; 0000 00C8     if(HALLA != HALLB) hall_sensor_value--;
0002a5 e0a0      	LDI  R26,0
0002a6 990d      	SBIC 0x1,5
0002a7 e0a1      	LDI  R26,1
0002a8 e0e0      	LDI  R30,0
0002a9 990e      	SBIC 0x1,6
0002aa e0e1      	LDI  R30,1
0002ab 17ea      	CP   R30,R26
0002ac f029      	BREQ _0x46
0002ad 940e 05ee 	CALL SUBOPT_0x6
0002af 940e 05f3 	CALL SUBOPT_0x7
                 ; 0000 00C9     else hall_sensor_value++;
0002b1 c004      	RJMP _0x47
                 _0x46:
0002b2 940e 05ee 	CALL SUBOPT_0x6
0002b4 940e 05fd 	CALL SUBOPT_0x8
                 ; 0000 00CA }
                 _0x47:
0002b6 c027      	RJMP _0x5B
                 ;
                 ;interrupt [EXT_INT6] void hall_sensor_detection2(void)
                 ; 0000 00CD {
                 _hall_sensor_detection2:
0002b7 940e 05e5 	CALL SUBOPT_0x5
                 ; 0000 00CE     if(HALLB != HALLC) hall_sensor_value--;
0002b9 e0a0      	LDI  R26,0
0002ba 990e      	SBIC 0x1,6
0002bb e0a1      	LDI  R26,1
0002bc e0e0      	LDI  R30,0
0002bd 990f      	SBIC 0x1,7
0002be e0e1      	LDI  R30,1
0002bf 17ea      	CP   R30,R26
0002c0 f029      	BREQ _0x48
0002c1 940e 05ee 	CALL SUBOPT_0x6
0002c3 940e 05f3 	CALL SUBOPT_0x7
                 ; 0000 00CF     else hall_sensor_value++;
0002c5 c004      	RJMP _0x49
                 _0x48:
0002c6 940e 05ee 	CALL SUBOPT_0x6
0002c8 940e 05fd 	CALL SUBOPT_0x8
                 ; 0000 00D0 }
                 _0x49:
0002ca c013      	RJMP _0x5B
                 ;
                 ;interrupt [EXT_INT7] void hall_sensor_detection3(void)
                 ; 0000 00D3 {
                 _hall_sensor_detection3:
0002cb 940e 05e5 	CALL SUBOPT_0x5
                 ; 0000 00D4     if(HALLC != HALLA) hall_sensor_value--;
0002cd e0a0      	LDI  R26,0
0002ce 990f      	SBIC 0x1,7
0002cf e0a1      	LDI  R26,1
0002d0 e0e0      	LDI  R30,0
0002d1 990d      	SBIC 0x1,5
0002d2 e0e1      	LDI  R30,1
0002d3 17ea      	CP   R30,R26
0002d4 f029      	BREQ _0x4A
0002d5 940e 05ee 	CALL SUBOPT_0x6
0002d7 940e 05f3 	CALL SUBOPT_0x7
                 ; 0000 00D5     else hall_sensor_value++;
0002d9 c004      	RJMP _0x4B
                 _0x4A:
0002da 940e 05ee 	CALL SUBOPT_0x6
0002dc 940e 05fd 	CALL SUBOPT_0x8
                 ; 0000 00D6 }
                 _0x4B:
                 _0x5B:
0002de 91e9      	LD   R30,Y+
0002df bfef      	OUT  SREG,R30
0002e0 91f9      	LD   R31,Y+
0002e1 91e9      	LD   R30,Y+
0002e2 91b9      	LD   R27,Y+
0002e3 91a9      	LD   R26,Y+
0002e4 9179      	LD   R23,Y+
0002e5 9169      	LD   R22,Y+
0002e6 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 00D9 {
                 _main:
                 ; 0000 00DA     int i = 0;
                 ; 0000 00DB 
                 ; 0000 00DC     int Goal = 0;
                 ; 0000 00DD     float Err = 0;
                 ; 0000 00DE     float integral = 0;
                 ; 0000 00DF     float now = 0;
                 ; 0000 00E0     float now_check = 0;
                 ; 0000 00E1 
                 ; 0000 00E2     unsigned char update_cnt = 0;
                 ; 0000 00E3     char BUFF[128]={0,};
                 ; 0000 00E4 
                 ; 0000 00E5     //Controll Volume
                 ; 0000 00E6     long int OCR_val = 0;
                 ; 0000 00E7     unsigned int OCR_SET = 0;
                 ; 0000 00E8 
                 ; 0000 00E9     USART1_init();
0002e7 97ef      	SBIW R28,63
0002e8 97ef      	SBIW R28,63
0002e9 9768      	SBIW R28,24
0002ea e986      	LDI  R24,150
0002eb e0a0      	LDI  R26,LOW(0)
0002ec e0b0      	LDI  R27,HIGH(0)
0002ed e3e4      	LDI  R30,LOW(_0x4C*2)
0002ee e0f1      	LDI  R31,HIGH(_0x4C*2)
0002ef 940e 0841 	CALL __INITLOCB
                 ;	i -> R16,R17
                 ;	Goal -> R18,R19
                 ;	Err -> Y+146
                 ;	integral -> Y+142
                 ;	now -> Y+138
                 ;	now_check -> Y+134
                 ;	update_cnt -> R21
                 ;	BUFF -> Y+6
                 ;	OCR_val -> Y+2
                 ;	OCR_SET -> Y+0
                +
0002f1 e000     +LDI R16 , LOW ( 0 )
0002f2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0002f3 e020     +LDI R18 , LOW ( 0 )
0002f4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0002f5 e050      	LDI  R21,0
0002f6 de4e      	RCALL _USART1_init
                 ; 0000 00EA     TIMER_init();
0002f7 de7f      	RCALL _TIMER_init
                 ; 0000 00EB     GPIO_SETUP();
0002f8 de41      	RCALL _GPIO_SETUP
                 ; 0000 00EC     EXT_INT_init();
0002f9 de75      	RCALL _EXT_INT_init
                 ; 0000 00ED 
                 ; 0000 00EE     SREG |= 0x80;
0002fa 9478      	BSET 7
                 ; 0000 00EF 
                 ; 0000 00F0     while(1)
                 _0x4D:
                 ; 0000 00F1     {
                 ; 0000 00F2 
                 ; 0000 00F3 
                 ; 0000 00F4         if(update)
0002fb 20bb      	TST  R11
0002fc f411      	BRNE PC+3
0002fd 940c 0379 	JMP _0x50
                 ; 0000 00F5         {
                 ; 0000 00F6             now = (hall_sensor_value / 0.001);
0002ff 91e0 0500 	LDS  R30,_hall_sensor_value
000301 91f0 0501 	LDS  R31,_hall_sensor_value+1
000303 9160 0502 	LDS  R22,_hall_sensor_value+2
000305 9170 0503 	LDS  R23,_hall_sensor_value+3
000307 940e 06b0 	CALL __CDF1
000309 01df      	MOVW R26,R30
00030a 01cb      	MOVW R24,R22
                +
00030b e6ef     +LDI R30 , LOW ( 0x3A83126F )
00030c e1f2     +LDI R31 , HIGH ( 0x3A83126F )
00030d e863     +LDI R22 , BYTE3 ( 0x3A83126F )
00030e e37a     +LDI R23 , BYTE4 ( 0x3A83126F )
                 	__GETD1N 0x3A83126F
00030f 940e 0788 	CALL __DIVF21
                +
000311 01de     +MOVW R26 , R28
000312 57a6     +SUBI R26 , LOW ( - 138 )
000313 4fbf     +SBCI R27 , HIGH ( - 138 )
000314 93ed     +ST X + , R30
000315 93fd     +ST X + , R31
000316 936d     +ST X + , R22
000317 937c     +ST X , R23
                 	__PUTD1SX 138
                 ; 0000 00F7 
                 ; 0000 00F8             if(SET_RXC1)
000318 2066      	TST  R6
000319 f041      	BREQ _0x51
                 ; 0000 00F9             {
                 ; 0000 00FA                 Goal = atoi(RXC_BUFF);
00031a e0e4      	LDI  R30,LOW(_RXC_BUFF)
00031b e0f5      	LDI  R31,HIGH(_RXC_BUFF)
00031c 93fa      	ST   -Y,R31
00031d 93ea      	ST   -Y,R30
00031e 940e 056b 	CALL _atoi
000320 019f      	MOVW R18,R30
                 ; 0000 00FB                 SET_RXC1 = 0;
000321 2466      	CLR  R6
                 ; 0000 00FC             }
                 ; 0000 00FD             for(i = 0; i<20; i++)
                 _0x51:
                +
000322 e000     +LDI R16 , LOW ( 0 )
000323 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x53:
                +
000324 3104     +CPI R16 , LOW ( 20 )
000325 e0e0     +LDI R30 , HIGH ( 20 )
000326 071e     +CPC R17 , R30
                 	__CPWRN 16,17,20
000327 f44c      	BRGE _0x54
                 ; 0000 00FE             {
                 ; 0000 00FF                 RXC_BUFF[i] = 0;
000328 e0a4      	LDI  R26,LOW(_RXC_BUFF)
000329 e0b5      	LDI  R27,HIGH(_RXC_BUFF)
00032a 0fa0      	ADD  R26,R16
00032b 1fb1      	ADC  R27,R17
00032c e0e0      	LDI  R30,LOW(0)
00032d 93ec      	ST   X,R30
                 ; 0000 0100             }
                +
00032e 5f0f     +SUBI R16 , LOW ( - 1 )
00032f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000330 cff3      	RJMP _0x53
                 _0x54:
                 ; 0000 0101 
                 ; 0000 0102             OCR_val = PID_Controller(Goal, now, &integral, &Err);
000331 933a      	ST   -Y,R19
000332 932a      	ST   -Y,R18
                +
000333 01fe     +MOVW R30 , R28
000334 57e4     +SUBI R30 , LOW ( - 140 )
000335 4fff     +SBCI R31 , HIGH ( - 140 )
000336 9001     +LD R0 , Z +
000337 9011     +LD R1 , Z +
000338 9161     +LD R22 , Z +
000339 8170     +LD R23 , Z
00033a 01f0     +MOVW R30 , R0
                 	__GETD1SX 140
00033b 940e 080c 	CALL __PUTPARD1
00033d 01fe      	MOVW R30,R28
00033e 56ec      	SUBI R30,LOW(-(148))
00033f 4fff      	SBCI R31,HIGH(-(148))
000340 93fa      	ST   -Y,R31
000341 93ea      	ST   -Y,R30
000342 01fe      	MOVW R30,R28
000343 56e6      	SUBI R30,LOW(-(154))
000344 4fff      	SBCI R31,HIGH(-(154))
000345 93fa      	ST   -Y,R31
000346 93ea      	ST   -Y,R30
000347 de9f      	RCALL _PID_Controller
                +
000348 83ea     +STD Y + 2 , R30
000349 83fb     +STD Y + 2 + 1 , R31
00034a 836c     +STD Y + 2 + 2 , R22
00034b 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 0103             OCR_SET = MV_Rebuilding((ICR1*lessDuty), (ICR1*topDuty), OCR_val);
00034c 940e 0607 	CALL SUBOPT_0x9
                +
00034e e3a3     +LDI R26 , LOW ( 0x3F733333 )
00034f e3b3     +LDI R27 , HIGH ( 0x3F733333 )
000350 e783     +LDI R24 , BYTE3 ( 0x3F733333 )
000351 e39f     +LDI R25 , BYTE4 ( 0x3F733333 )
                 	__GETD2N 0x3F733333
000352 940e 060e 	CALL SUBOPT_0xA
000354 940e 0607 	CALL SUBOPT_0x9
                +
000356 eba8     +LDI R26 , LOW ( 0x3F051EB8 )
000357 e1be     +LDI R27 , HIGH ( 0x3F051EB8 )
000358 e085     +LDI R24 , BYTE3 ( 0x3F051EB8 )
000359 e39f     +LDI R25 , BYTE4 ( 0x3F051EB8 )
                 	__GETD2N 0x3F051EB8
00035a 940e 060e 	CALL SUBOPT_0xA
                +
00035c 81ee     +LDD R30 , Y + 6
00035d 81ff     +LDD R31 , Y + 6 + 1
00035e 8568     +LDD R22 , Y + 6 + 2
00035f 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000360 940e 080c 	CALL __PUTPARD1
000362 de2e      	RCALL _MV_Rebuilding
000363 83e8      	ST   Y,R30
000364 83f9      	STD  Y+1,R31
                 ; 0000 0104             producePWM(OCR_val, OCR_SET);
000365 940e 05c8 	CALL SUBOPT_0x1
000367 940e 080c 	CALL __PUTPARD1
000369 81ec      	LDD  R30,Y+4
00036a 81fd      	LDD  R31,Y+4+1
00036b 93fa      	ST   -Y,R31
00036c 93ea      	ST   -Y,R30
00036d defe      	RCALL _producePWM
                 ; 0000 0105 
                 ; 0000 0106             update_cnt++;
00036e 5f5f      	SUBI R21,-1
                 ; 0000 0107             update = 0;
00036f 24bb      	CLR  R11
                 ; 0000 0108             hall_sensor_value = 0;
000370 e0e0      	LDI  R30,LOW(0)
000371 93e0 0500 	STS  _hall_sensor_value,R30
000373 93e0 0501 	STS  _hall_sensor_value+1,R30
000375 93e0 0502 	STS  _hall_sensor_value+2,R30
000377 93e0 0503 	STS  _hall_sensor_value+3,R30
                 ; 0000 0109         }
                 ; 0000 010A 
                 ; 0000 010B         if(update_cnt == 10)
                 _0x50:
000379 305a      	CPI  R21,10
00037a f011      	BREQ PC+3
00037b 940c 03c0 	JMP _0x55
                 ; 0000 010C         {
                 ; 0000 010D             sprintf(BUFF, "Goal=%d,%d,%d,%d,%d \r\n", Goal,(int)now, (int)Err, OCR_val,OCR_SET*((MOTOR1_DIRECTION)?-1:1));
00037d 01fe      	MOVW R30,R28
00037e 9636      	ADIW R30,6
00037f 93fa      	ST   -Y,R31
000380 93ea      	ST   -Y,R30
                +
000381 ede0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000382 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000383 93fa      	ST   -Y,R31
000384 93ea      	ST   -Y,R30
000385 01f9      	MOVW R30,R18
000386 940e 0615 	CALL SUBOPT_0xB
                +
000388 01fe     +MOVW R30 , R28
000389 56ee     +SUBI R30 , LOW ( - 146 )
00038a 4fff     +SBCI R31 , HIGH ( - 146 )
00038b 9001     +LD R0 , Z +
00038c 9011     +LD R1 , Z +
00038d 9161     +LD R22 , Z +
00038e 8170     +LD R23 , Z
00038f 01f0     +MOVW R30 , R0
                 	__GETD1SX 146
000390 940e 0679 	CALL __CFD1
000392 940e 0615 	CALL SUBOPT_0xB
                +
000394 01fe     +MOVW R30 , R28
000395 56e2     +SUBI R30 , LOW ( - 158 )
000396 4fff     +SBCI R31 , HIGH ( - 158 )
000397 9001     +LD R0 , Z +
000398 9011     +LD R1 , Z +
000399 9161     +LD R22 , Z +
00039a 8170     +LD R23 , Z
00039b 01f0     +MOVW R30 , R0
                 	__GETD1SX 158
00039c 940e 0679 	CALL __CFD1
00039e 940e 0615 	CALL SUBOPT_0xB
                +
0003a0 89ea     +LDD R30 , Y + 18
0003a1 89fb     +LDD R31 , Y + 18 + 1
0003a2 896c     +LDD R22 , Y + 18 + 2
0003a3 897d     +LDD R23 , Y + 18 + 3
                 	__GETD1S 18
0003a4 940e 080c 	CALL __PUTPARD1
0003a6 9bc4      	SBIS 0x18,4
0003a7 c002      	RJMP _0x56
0003a8 efef      	LDI  R30,LOW(255)
0003a9 c001      	RJMP _0x57
                 _0x56:
0003aa e0e1      	LDI  R30,LOW(1)
                 _0x57:
0003ab e0f0      	LDI  R31,0
0003ac fde7      	SBRC R30,7
0003ad efff      	SER  R31
0003ae 89ac      	LDD  R26,Y+20
0003af 89bd      	LDD  R27,Y+20+1
0003b0 940e 07e7 	CALL __MULW12U
0003b2 2766      	CLR  R22
0003b3 2777      	CLR  R23
0003b4 940e 080c 	CALL __PUTPARD1
0003b6 e184      	LDI  R24,20
0003b7 940e 0535 	CALL _sprintf
0003b9 9668      	ADIW R28,24
                 ; 0000 010E             string_tx1(BUFF);
0003ba 01fe      	MOVW R30,R28
0003bb 9636      	ADIW R30,6
0003bc 93fa      	ST   -Y,R31
0003bd 93ea      	ST   -Y,R30
0003be dda3      	RCALL _string_tx1
                 ; 0000 010F             update_cnt = 0;
0003bf e050      	LDI  R21,LOW(0)
                 ; 0000 0110         }
                 ; 0000 0111     }
                 _0x55:
0003c0 cf3a      	RJMP _0x4D
                 ; 0000 0112 }
                 _0x59:
0003c1 cfff      	RJMP _0x59
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
0003c2 931a      	ST   -Y,R17
0003c3 930a      	ST   -Y,R16
0003c4 81aa      	LDD  R26,Y+2
0003c5 81bb      	LDD  R27,Y+2+1
0003c6 9612      	ADIW R26,2
0003c7 940e 07ef 	CALL __GETW1P
0003c9 9730      	SBIW R30,0
0003ca f159      	BREQ _0x2000010
0003cb 81aa      	LDD  R26,Y+2
0003cc 81bb      	LDD  R27,Y+2+1
0003cd 9614      	ADIW R26,4
0003ce 940e 07ef 	CALL __GETW1P
0003d0 018f      	MOVW R16,R30
0003d1 9730      	SBIW R30,0
0003d2 f061      	BREQ _0x2000012
                +
0003d3 3002     +CPI R16 , LOW ( 2 )
0003d4 e0e0     +LDI R30 , HIGH ( 2 )
0003d5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0003d6 f0f0      	BRLO _0x2000013
0003d7 01f8      	MOVW R30,R16
0003d8 9731      	SBIW R30,1
0003d9 018f      	MOVW R16,R30
                +
0003da 81aa     +LDD R26 , Y + 2
0003db 81bb     +LDD R27 , Y + 2 + 1
0003dc 9614     +ADIW R26 , 4
0003dd 93ed     +ST X + , R30
0003de 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0003df 81aa      	LDD  R26,Y+2
0003e0 81bb      	LDD  R27,Y+2+1
0003e1 9612      	ADIW R26,2
0003e2 91ed      	LD   R30,X+
0003e3 91fd      	LD   R31,X+
0003e4 9631      	ADIW R30,1
0003e5 93fe      	ST   -X,R31
0003e6 93ee      	ST   -X,R30
0003e7 9731      	SBIW R30,1
0003e8 81ac      	LDD  R26,Y+4
0003e9 83a0      	STD  Z+0,R26
0003ea 81aa      	LDD  R26,Y+2
0003eb 81bb      	LDD  R27,Y+2+1
0003ec 940e 07ef 	CALL __GETW1P
0003ee 23ff      	TST  R31
0003ef f02a      	BRMI _0x2000014
0003f0 91ed      	LD   R30,X+
0003f1 91fd      	LD   R31,X+
0003f2 9631      	ADIW R30,1
0003f3 93fe      	ST   -X,R31
0003f4 93ee      	ST   -X,R30
                 _0x2000014:
                 _0x2000013:
0003f5 c006      	RJMP _0x2000015
                 _0x2000010:
0003f6 81aa      	LDD  R26,Y+2
0003f7 81bb      	LDD  R27,Y+2+1
0003f8 efef      	LDI  R30,LOW(65535)
0003f9 efff      	LDI  R31,HIGH(65535)
0003fa 93ed      	ST   X+,R30
0003fb 93fc      	ST   X,R31
                 _0x2000015:
0003fc 8119      	LDD  R17,Y+1
0003fd 8108      	LDD  R16,Y+0
0003fe 9625      	ADIW R28,5
0003ff 9508      	RET
                 __print_G100:
000400 9726      	SBIW R28,6
000401 940e 0833 	CALL __SAVELOCR6
000403 e010      	LDI  R17,0
000404 85ac      	LDD  R26,Y+12
000405 85bd      	LDD  R27,Y+12+1
000406 e0e0      	LDI  R30,LOW(0)
000407 e0f0      	LDI  R31,HIGH(0)
000408 93ed      	ST   X+,R30
000409 93fc      	ST   X,R31
                 _0x2000016:
00040a 89ea      	LDD  R30,Y+18
00040b 89fb      	LDD  R31,Y+18+1
00040c 9631      	ADIW R30,1
00040d 8bea      	STD  Y+18,R30
00040e 8bfb      	STD  Y+18+1,R31
00040f 9731      	SBIW R30,1
000410 91e4      	LPM  R30,Z
000411 2f2e      	MOV  R18,R30
000412 30e0      	CPI  R30,0
000413 f411      	BRNE PC+3
000414 940c 052d 	JMP _0x2000018
000416 2fe1      	MOV  R30,R17
000417 30e0      	CPI  R30,0
000418 f439      	BRNE _0x200001C
000419 3225      	CPI  R18,37
00041a f411      	BRNE _0x200001D
00041b e011      	LDI  R17,LOW(1)
00041c c002      	RJMP _0x200001E
                 _0x200001D:
00041d 940e 061a 	CALL SUBOPT_0xC
                 _0x200001E:
00041f c10c      	RJMP _0x200001B
                 _0x200001C:
000420 30e1      	CPI  R30,LOW(0x1)
000421 f4a9      	BRNE _0x200001F
000422 3225      	CPI  R18,37
000423 f419      	BRNE _0x2000020
000424 940e 061a 	CALL SUBOPT_0xC
000426 c104      	RJMP _0x20000C9
                 _0x2000020:
000427 e012      	LDI  R17,LOW(2)
000428 e040      	LDI  R20,LOW(0)
000429 e000      	LDI  R16,LOW(0)
00042a 322d      	CPI  R18,45
00042b f411      	BRNE _0x2000021
00042c e001      	LDI  R16,LOW(1)
00042d c0fe      	RJMP _0x200001B
                 _0x2000021:
00042e 322b      	CPI  R18,43
00042f f411      	BRNE _0x2000022
000430 e24b      	LDI  R20,LOW(43)
000431 c0fa      	RJMP _0x200001B
                 _0x2000022:
000432 3220      	CPI  R18,32
000433 f411      	BRNE _0x2000023
000434 e240      	LDI  R20,LOW(32)
000435 c0f6      	RJMP _0x200001B
                 _0x2000023:
000436 c002      	RJMP _0x2000024
                 _0x200001F:
000437 30e2      	CPI  R30,LOW(0x2)
000438 f439      	BRNE _0x2000025
                 _0x2000024:
000439 e050      	LDI  R21,LOW(0)
00043a e013      	LDI  R17,LOW(3)
00043b 3320      	CPI  R18,48
00043c f411      	BRNE _0x2000026
00043d 6800      	ORI  R16,LOW(128)
00043e c0ed      	RJMP _0x200001B
                 _0x2000026:
00043f c004      	RJMP _0x2000027
                 _0x2000025:
000440 30e3      	CPI  R30,LOW(0x3)
000441 f011      	BREQ PC+3
000442 940c 052c 	JMP _0x200001B
                 _0x2000027:
000444 3320      	CPI  R18,48
000445 f010      	BRLO _0x200002A
000446 332a      	CPI  R18,58
000447 f008      	BRLO _0x200002B
                 _0x200002A:
000448 c007      	RJMP _0x2000029
                 _0x200002B:
000449 e0aa      	LDI  R26,LOW(10)
00044a 9f5a      	MUL  R21,R26
00044b 2d50      	MOV  R21,R0
00044c 2fe2      	MOV  R30,R18
00044d 53e0      	SUBI R30,LOW(48)
00044e 0f5e      	ADD  R21,R30
00044f c0dc      	RJMP _0x200001B
                 _0x2000029:
000450 2fe2      	MOV  R30,R18
000451 36e3      	CPI  R30,LOW(0x63)
000452 f449      	BRNE _0x200002F
000453 940e 0623 	CALL SUBOPT_0xD
000455 89e8      	LDD  R30,Y+16
000456 89f9      	LDD  R31,Y+16+1
000457 81a4      	LDD  R26,Z+4
000458 93aa      	ST   -Y,R26
000459 940e 0629 	CALL SUBOPT_0xE
00045b c0cf      	RJMP _0x2000030
                 _0x200002F:
00045c 37e3      	CPI  R30,LOW(0x73)
00045d f441      	BRNE _0x2000032
00045e 940e 0623 	CALL SUBOPT_0xD
000460 940e 0631 	CALL SUBOPT_0xF
000462 940e 05ae 	CALL _strlen
000464 2f1e      	MOV  R17,R30
000465 c00a      	RJMP _0x2000033
                 _0x2000032:
000466 37e0      	CPI  R30,LOW(0x70)
000467 f461      	BRNE _0x2000035
000468 940e 0623 	CALL SUBOPT_0xD
00046a 940e 0631 	CALL SUBOPT_0xF
00046c 940e 05b8 	CALL _strlenf
00046e 2f1e      	MOV  R17,R30
00046f 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000470 6002      	ORI  R16,LOW(2)
000471 770f      	ANDI R16,LOW(127)
000472 e030      	LDI  R19,LOW(0)
000473 c035      	RJMP _0x2000036
                 _0x2000035:
000474 36e4      	CPI  R30,LOW(0x64)
000475 f011      	BREQ _0x2000039
000476 36e9      	CPI  R30,LOW(0x69)
000477 f411      	BRNE _0x200003A
                 _0x2000039:
000478 6004      	ORI  R16,LOW(4)
000479 c002      	RJMP _0x200003B
                 _0x200003A:
00047a 37e5      	CPI  R30,LOW(0x75)
00047b f431      	BRNE _0x200003C
                 _0x200003B:
00047c e8ec      	LDI  R30,LOW(_tbl10_G100*2)
00047d e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00047e 83ee      	STD  Y+6,R30
00047f 83ff      	STD  Y+6+1,R31
000480 e015      	LDI  R17,LOW(5)
000481 c00d      	RJMP _0x200003D
                 _0x200003C:
000482 35e8      	CPI  R30,LOW(0x58)
000483 f411      	BRNE _0x200003F
000484 6008      	ORI  R16,LOW(8)
000485 c004      	RJMP _0x2000040
                 _0x200003F:
000486 37e8      	CPI  R30,LOW(0x78)
000487 f011      	BREQ PC+3
000488 940c 052b 	JMP _0x2000071
                 _0x2000040:
00048a e9e6      	LDI  R30,LOW(_tbl16_G100*2)
00048b e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00048c 83ee      	STD  Y+6,R30
00048d 83ff      	STD  Y+6+1,R31
00048e e014      	LDI  R17,LOW(4)
                 _0x200003D:
00048f ff02      	SBRS R16,2
000490 c014      	RJMP _0x2000042
000491 940e 0623 	CALL SUBOPT_0xD
000493 940e 063b 	CALL SUBOPT_0x10
000495 85ab      	LDD  R26,Y+11
000496 23aa      	TST  R26
000497 f43a      	BRPL _0x2000043
000498 85ea      	LDD  R30,Y+10
000499 85fb      	LDD  R31,Y+10+1
00049a 940e 07d1 	CALL __ANEGW1
00049c 87ea      	STD  Y+10,R30
00049d 87fb      	STD  Y+10+1,R31
00049e e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00049f 3040      	CPI  R20,0
0004a0 f011      	BREQ _0x2000044
0004a1 5f1f      	SUBI R17,-LOW(1)
0004a2 c001      	RJMP _0x2000045
                 _0x2000044:
0004a3 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0004a4 c004      	RJMP _0x2000046
                 _0x2000042:
0004a5 940e 0623 	CALL SUBOPT_0xD
0004a7 940e 063b 	CALL SUBOPT_0x10
                 _0x2000046:
                 _0x2000036:
0004a9 fd00      	SBRC R16,0
0004aa c011      	RJMP _0x2000047
                 _0x2000048:
0004ab 1715      	CP   R17,R21
0004ac f478      	BRSH _0x200004A
0004ad ff07      	SBRS R16,7
0004ae c008      	RJMP _0x200004B
0004af ff02      	SBRS R16,2
0004b0 c004      	RJMP _0x200004C
0004b1 7f0b      	ANDI R16,LOW(251)
0004b2 2f24      	MOV  R18,R20
0004b3 5011      	SUBI R17,LOW(1)
0004b4 c001      	RJMP _0x200004D
                 _0x200004C:
0004b5 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0004b6 c001      	RJMP _0x200004E
                 _0x200004B:
0004b7 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0004b8 940e 061a 	CALL SUBOPT_0xC
0004ba 5051      	SUBI R21,LOW(1)
0004bb cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0004bc 2f31      	MOV  R19,R17
0004bd ff01      	SBRS R16,1
0004be c017      	RJMP _0x200004F
                 _0x2000050:
0004bf 3030      	CPI  R19,0
0004c0 f0a1      	BREQ _0x2000052
0004c1 ff03      	SBRS R16,3
0004c2 c006      	RJMP _0x2000053
0004c3 81ee      	LDD  R30,Y+6
0004c4 81ff      	LDD  R31,Y+6+1
0004c5 9125      	LPM  R18,Z+
0004c6 83ee      	STD  Y+6,R30
0004c7 83ff      	STD  Y+6+1,R31
0004c8 c005      	RJMP _0x2000054
                 _0x2000053:
0004c9 81ae      	LDD  R26,Y+6
0004ca 81bf      	LDD  R27,Y+6+1
0004cb 912d      	LD   R18,X+
0004cc 83ae      	STD  Y+6,R26
0004cd 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0004ce 940e 061a 	CALL SUBOPT_0xC
0004d0 3050      	CPI  R21,0
0004d1 f009      	BREQ _0x2000055
0004d2 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0004d3 5031      	SUBI R19,LOW(1)
0004d4 cfea      	RJMP _0x2000050
                 _0x2000052:
0004d5 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0004d6 e320      	LDI  R18,LOW(48)
0004d7 81ee      	LDD  R30,Y+6
0004d8 81ff      	LDD  R31,Y+6+1
0004d9 940e 0808 	CALL __GETW1PF
0004db 87e8      	STD  Y+8,R30
0004dc 87f9      	STD  Y+8+1,R31
0004dd 81ee      	LDD  R30,Y+6
0004de 81ff      	LDD  R31,Y+6+1
0004df 9632      	ADIW R30,2
0004e0 83ee      	STD  Y+6,R30
0004e1 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0004e2 85e8      	LDD  R30,Y+8
0004e3 85f9      	LDD  R31,Y+8+1
0004e4 85aa      	LDD  R26,Y+10
0004e5 85bb      	LDD  R27,Y+10+1
0004e6 17ae      	CP   R26,R30
0004e7 07bf      	CPC  R27,R31
0004e8 f050      	BRLO _0x200005C
0004e9 5f2f      	SUBI R18,-LOW(1)
0004ea 85a8      	LDD  R26,Y+8
0004eb 85b9      	LDD  R27,Y+8+1
0004ec 85ea      	LDD  R30,Y+10
0004ed 85fb      	LDD  R31,Y+10+1
0004ee 1bea      	SUB  R30,R26
0004ef 0bfb      	SBC  R31,R27
0004f0 87ea      	STD  Y+10,R30
0004f1 87fb      	STD  Y+10+1,R31
0004f2 cfef      	RJMP _0x200005A
                 _0x200005C:
0004f3 332a      	CPI  R18,58
0004f4 f028      	BRLO _0x200005D
0004f5 ff03      	SBRS R16,3
0004f6 c002      	RJMP _0x200005E
0004f7 5f29      	SUBI R18,-LOW(7)
0004f8 c001      	RJMP _0x200005F
                 _0x200005E:
0004f9 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0004fa fd04      	SBRC R16,4
0004fb c01a      	RJMP _0x2000061
0004fc 3321      	CPI  R18,49
0004fd f420      	BRSH _0x2000063
0004fe 85a8      	LDD  R26,Y+8
0004ff 85b9      	LDD  R27,Y+8+1
000500 9711      	SBIW R26,1
000501 f409      	BRNE _0x2000062
                 _0x2000063:
000502 c009      	RJMP _0x20000CA
                 _0x2000062:
000503 1753      	CP   R21,R19
000504 f010      	BRLO _0x2000067
000505 ff00      	SBRS R16,0
000506 c001      	RJMP _0x2000068
                 _0x2000067:
000507 c013      	RJMP _0x2000066
                 _0x2000068:
000508 e220      	LDI  R18,LOW(32)
000509 ff07      	SBRS R16,7
00050a c00b      	RJMP _0x2000069
00050b e320      	LDI  R18,LOW(48)
                 _0x20000CA:
00050c 6100      	ORI  R16,LOW(16)
00050d ff02      	SBRS R16,2
00050e c007      	RJMP _0x200006A
00050f 7f0b      	ANDI R16,LOW(251)
000510 934a      	ST   -Y,R20
000511 940e 0629 	CALL SUBOPT_0xE
000513 3050      	CPI  R21,0
000514 f009      	BREQ _0x200006B
000515 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000516 940e 061a 	CALL SUBOPT_0xC
000518 3050      	CPI  R21,0
000519 f009      	BREQ _0x200006C
00051a 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00051b 5031      	SUBI R19,LOW(1)
00051c 85a8      	LDD  R26,Y+8
00051d 85b9      	LDD  R27,Y+8+1
00051e 9712      	SBIW R26,2
00051f f008      	BRLO _0x2000059
000520 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000521 ff00      	SBRS R16,0
000522 c008      	RJMP _0x200006D
                 _0x200006E:
000523 3050      	CPI  R21,0
000524 f031      	BREQ _0x2000070
000525 5051      	SUBI R21,LOW(1)
000526 e2e0      	LDI  R30,LOW(32)
000527 93ea      	ST   -Y,R30
000528 940e 0629 	CALL SUBOPT_0xE
00052a cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
00052b e010      	LDI  R17,LOW(0)
                 _0x200001B:
00052c cedd      	RJMP _0x2000016
                 _0x2000018:
00052d 85ac      	LDD  R26,Y+12
00052e 85bd      	LDD  R27,Y+12+1
00052f 940e 07ef 	CALL __GETW1P
000531 940e 083a 	CALL __LOADLOCR6
000533 9664      	ADIW R28,20
000534 9508      	RET
                 _sprintf:
000535 92ff      	PUSH R15
000536 2ef8      	MOV  R15,R24
000537 9726      	SBIW R28,6
000538 940e 0835 	CALL __SAVELOCR4
00053a 940e 0643 	CALL SUBOPT_0x11
00053c 9730      	SBIW R30,0
00053d f419      	BRNE _0x2000072
00053e efef      	LDI  R30,LOW(65535)
00053f efff      	LDI  R31,HIGH(65535)
000540 c025      	RJMP _0x20A0001
                 _0x2000072:
000541 01de      	MOVW R26,R28
000542 9616      	ADIW R26,6
000543 940e 07cd 	CALL __ADDW2R15
000545 018d      	MOVW R16,R26
000546 940e 0643 	CALL SUBOPT_0x11
000548 83ee      	STD  Y+6,R30
000549 83ff      	STD  Y+6+1,R31
00054a e0e0      	LDI  R30,LOW(0)
00054b 87e8      	STD  Y+8,R30
00054c 87e9      	STD  Y+8+1,R30
00054d 01de      	MOVW R26,R28
00054e 961a      	ADIW R26,10
00054f 940e 07cd 	CALL __ADDW2R15
000551 940e 07ef 	CALL __GETW1P
000553 93fa      	ST   -Y,R31
000554 93ea      	ST   -Y,R30
000555 931a      	ST   -Y,R17
000556 930a      	ST   -Y,R16
000557 ece2      	LDI  R30,LOW(_put_buff_G100)
000558 e0f3      	LDI  R31,HIGH(_put_buff_G100)
000559 93fa      	ST   -Y,R31
00055a 93ea      	ST   -Y,R30
00055b 01fe      	MOVW R30,R28
00055c 963a      	ADIW R30,10
00055d 93fa      	ST   -Y,R31
00055e 93ea      	ST   -Y,R30
00055f dea0      	RCALL __print_G100
000560 019f      	MOVW R18,R30
000561 81ae      	LDD  R26,Y+6
000562 81bf      	LDD  R27,Y+6+1
000563 e0e0      	LDI  R30,LOW(0)
000564 93ec      	ST   X,R30
000565 01f9      	MOVW R30,R18
                 _0x20A0001:
000566 940e 083c 	CALL __LOADLOCR4
000568 962a      	ADIW R28,10
000569 90ff      	POP  R15
00056a 9508      	RET
                 
                 	.CSEG
                 _atoi:
00056b 81b9         	ldd  r27,y+1
00056c 81a8         	ld   r26,y
                 __atoi0:
00056d 91ec         	ld   r30,x
00056e 93ea      	ST   -Y,R30
00056f 940e 05a4 	CALL _isspace
000571 23ee         	tst  r30
000572 f011         	breq __atoi1
000573 9611         	adiw r26,1
000574 cff8         	rjmp __atoi0
                 __atoi1:
000575 94e8         	clt
000576 91ec         	ld   r30,x
000577 32ed         	cpi  r30,'-'
000578 f411         	brne __atoi2
000579 9468         	set
00057a c002         	rjmp __atoi3
                 __atoi2:
00057b 32eb         	cpi  r30,'+'
00057c f409         	brne __atoi4
                 __atoi3:
00057d 9611         	adiw r26,1
                 __atoi4:
00057e 2766         	clr  r22
00057f 2777         	clr  r23
                 __atoi5:
000580 91ec         	ld   r30,x
000581 93ea      	ST   -Y,R30
000582 940e 059c 	CALL _isdigit
000584 23ee         	tst  r30
000585 f079         	breq __atoi6
000586 01fb         	movw r30,r22
000587 0f66         	lsl  r22
000588 1f77         	rol  r23
000589 0f66         	lsl  r22
00058a 1f77         	rol  r23
00058b 0f6e         	add  r22,r30
00058c 1f7f         	adc  r23,r31
00058d 0f66         	lsl  r22
00058e 1f77         	rol  r23
00058f 91ed         	ld   r30,x+
000590 27ff         	clr  r31
000591 53e0         	subi r30,'0'
000592 0f6e         	add  r22,r30
000593 1f7f         	adc  r23,r31
000594 cfeb         	rjmp __atoi5
                 __atoi6:
000595 01fb         	movw r30,r22
000596 f41e         	brtc __atoi7
000597 95e0         	com  r30
000598 95f0         	com  r31
000599 9631         	adiw r30,1
                 __atoi7:
00059a 9622         	adiw r28,2
00059b 9508         	ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _isdigit:
00059c e0e1          ldi  r30,1
00059d 91f9          ld   r31,y+
00059e 33f0          cpi  r31,'0'
00059f f010          brlo isdigit0
0005a0 33fa          cpi  r31,'9'+1
0005a1 f008          brlo isdigit1
                 isdigit0:
0005a2 27ee          clr  r30
                 isdigit1:
0005a3 9508          ret
                 _isspace:
0005a4 e0e1          ldi  r30,1
0005a5 91f9          ld   r31,y+
0005a6 32f0          cpi  r31,' '
0005a7 f029          breq isspace1
0005a8 30f9          cpi  r31,9
0005a9 f010          brlo isspace0
0005aa 30fe          cpi  r31,13+1
0005ab f008          brlo isspace1
                 isspace0:
0005ac 27ee          clr  r30
                 isspace1:
0005ad 9508          ret
                 
                 	.CSEG
                 _strlen:
0005ae 91a9          ld   r26,y+
0005af 91b9          ld   r27,y+
0005b0 27ee          clr  r30
0005b1 27ff          clr  r31
                 strlen0:
0005b2 916d          ld   r22,x+
0005b3 2366          tst  r22
0005b4 f011          breq strlen1
0005b5 9631          adiw r30,1
0005b6 cffb          rjmp strlen0
                 strlen1:
0005b7 9508          ret
                 _strlenf:
0005b8 27aa          clr  r26
0005b9 27bb          clr  r27
0005ba 91e9          ld   r30,y+
0005bb 91f9          ld   r31,y+
                 strlenf0:
0005bc 9005      	lpm  r0,z+
0005bd 2000          tst  r0
0005be f011          breq strlenf1
0005bf 9611          adiw r26,1
0005c0 cffb          rjmp strlenf0
                 strlenf1:
0005c1 01fd          movw r30,r26
0005c2 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _hall_sensor_value:
000500           	.BYTE 0x4
                 _RXC_BUFF:
000504           	.BYTE 0x14
                 _Time:
000518           	.BYTE 0x4
                 __seed_G101:
00051c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
                +
0005c3 81aa     +LDD R26 , Y + 2
0005c4 81bb     +LDD R27 , Y + 2 + 1
0005c5 818c     +LDD R24 , Y + 2 + 2
0005c6 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0005c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
                +
0005c8 81ea     +LDD R30 , Y + 2
0005c9 81fb     +LDD R31 , Y + 2 + 1
0005ca 816c     +LDD R22 , Y + 2 + 2
0005cb 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0005cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0005cd 85e8      	LDD  R30,Y+8
0005ce 85f9      	LDD  R31,Y+8+1
0005cf dff3      	RCALL SUBOPT_0x0
0005d0 940e 07dd 	CALL __CWD1
0005d2 940e 082e 	CALL __CPD21
0005d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
                +
0005d5 01fe     +MOVW R30 , R28
0005d6 58e0     +SUBI R30 , LOW ( - 128 )
0005d7 4fff     +SBCI R31 , HIGH ( - 128 )
0005d8 9001     +LD R0 , Z +
0005d9 9011     +LD R1 , Z +
0005da 9161     +LD R22 , Z +
0005db 8170     +LD R23 , Z
0005dc 01f0     +MOVW R30 , R0
                 	__GETD1SX 128
0005dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
                +
0005de 01de     +MOVW R26 , R28
0005df 56ae     +SUBI R26 , LOW ( - 146 )
0005e0 4fbf     +SBCI R27 , HIGH ( - 146 )
0005e1 900d     +LD R0 , X +
0005e2 91bc     +LD R27 , X
0005e3 2da0     +MOV R26 , R0
                 	__GETW2SX 146
0005e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0005e5 936a      	ST   -Y,R22
0005e6 937a      	ST   -Y,R23
0005e7 93aa      	ST   -Y,R26
0005e8 93ba      	ST   -Y,R27
0005e9 93ea      	ST   -Y,R30
0005ea 93fa      	ST   -Y,R31
0005eb b7ef      	IN   R30,SREG
0005ec 93ea      	ST   -Y,R30
0005ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0005ee e0a0      	LDI  R26,LOW(_hall_sensor_value)
0005ef e0b5      	LDI  R27,HIGH(_hall_sensor_value)
0005f0 940e 07f9 	CALL __GETD1P_INC
0005f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x7:
0005f3 9731      	SBIW R30,1
0005f4 4060      	SBCI R22,0
0005f5 4070      	SBCI R23,0
0005f6 940e 0803 	CALL __PUTDP1_DEC
                +
0005f8 5fef     +SUBI R30 , LOW ( - 1 )
0005f9 4fff     +SBCI R31 , HIGH ( - 1 )
0005fa 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0005fb 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0005fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8:
                +
0005fd 5fef     +SUBI R30 , LOW ( - 1 )
0005fe 4fff     +SBCI R31 , HIGH ( - 1 )
0005ff 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000600 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
000601 940e 0803 	CALL __PUTDP1_DEC
000603 9731      	SBIW R30,1
000604 4060      	SBCI R22,0
000605 4070      	SBCI R23,0
000606 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000607 b5e6      	IN   R30,0x26
000608 b5f7      	IN   R31,0x26+1
000609 2766      	CLR  R22
00060a 2777      	CLR  R23
00060b 940e 06b0 	CALL __CDF1
00060d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00060e 940e 073a 	CALL __MULF12
000610 940e 0679 	CALL __CFD1
000612 93fa      	ST   -Y,R31
000613 93ea      	ST   -Y,R30
000614 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000615 940e 07dd 	CALL __CWD1
000617 940e 080c 	CALL __PUTPARD1
000619 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xC:
00061a 932a      	ST   -Y,R18
00061b 85ed      	LDD  R30,Y+13
00061c 85fe      	LDD  R31,Y+13+1
00061d 93fa      	ST   -Y,R31
00061e 93ea      	ST   -Y,R30
00061f 89e9      	LDD  R30,Y+17
000620 89fa      	LDD  R31,Y+17+1
000621 9509      	ICALL
000622 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xD:
000623 89e8      	LDD  R30,Y+16
000624 89f9      	LDD  R31,Y+16+1
000625 9734      	SBIW R30,4
000626 8be8      	STD  Y+16,R30
000627 8bf9      	STD  Y+16+1,R31
000628 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xE:
000629 85ed      	LDD  R30,Y+13
00062a 85fe      	LDD  R31,Y+13+1
00062b 93fa      	ST   -Y,R31
00062c 93ea      	ST   -Y,R30
00062d 89e9      	LDD  R30,Y+17
00062e 89fa      	LDD  R31,Y+17+1
00062f 9509      	ICALL
000630 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xF:
000631 89a8      	LDD  R26,Y+16
000632 89b9      	LDD  R27,Y+16+1
000633 9614      	ADIW R26,4
000634 940e 07ef 	CALL __GETW1P
000636 83ee      	STD  Y+6,R30
000637 83ff      	STD  Y+6+1,R31
000638 93fa      	ST   -Y,R31
000639 93ea      	ST   -Y,R30
00063a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
00063b 89a8      	LDD  R26,Y+16
00063c 89b9      	LDD  R27,Y+16+1
00063d 9614      	ADIW R26,4
00063e 940e 07ef 	CALL __GETW1P
000640 87ea      	STD  Y+10,R30
000641 87fb      	STD  Y+10+1,R31
000642 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000643 01de      	MOVW R26,R28
000644 961c      	ADIW R26,12
000645 940e 07cd 	CALL __ADDW2R15
000647 940e 07ef 	CALL __GETW1P
000649 9508      	RET
                 
                 
                 	.CSEG
                 __ROUND_REPACK:
00064a 2355      	TST  R21
00064b f442      	BRPL __REPACK
00064c 3850      	CPI  R21,0x80
00064d f411      	BRNE __ROUND_REPACK0
00064e ffe0      	SBRS R30,0
00064f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000650 9631      	ADIW R30,1
000651 1f69      	ADC  R22,R25
000652 1f79      	ADC  R23,R25
000653 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000654 e850      	LDI  R21,0x80
000655 2757      	EOR  R21,R23
000656 f411      	BRNE __REPACK0
000657 935f      	PUSH R21
000658 c0cf      	RJMP __ZERORES
                 __REPACK0:
000659 3f5f      	CPI  R21,0xFF
00065a f031      	BREQ __REPACK1
00065b 0f66      	LSL  R22
00065c 0c00      	LSL  R0
00065d 9557      	ROR  R21
00065e 9567      	ROR  R22
00065f 2f75      	MOV  R23,R21
000660 9508      	RET
                 __REPACK1:
000661 935f      	PUSH R21
000662 2000      	TST  R0
000663 f00a      	BRMI __REPACK2
000664 c0cf      	RJMP __MAXRES
                 __REPACK2:
000665 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000666 e850      	LDI  R21,0x80
000667 2e19      	MOV  R1,R25
000668 2215      	AND  R1,R21
000669 0f88      	LSL  R24
00066a 1f99      	ROL  R25
00066b 2795      	EOR  R25,R21
00066c 0f55      	LSL  R21
00066d 9587      	ROR  R24
                 
                 __UNPACK1:
00066e e850      	LDI  R21,0x80
00066f 2e07      	MOV  R0,R23
000670 2205      	AND  R0,R21
000671 0f66      	LSL  R22
000672 1f77      	ROL  R23
000673 2775      	EOR  R23,R21
000674 0f55      	LSL  R21
000675 9567      	ROR  R22
000676 9508      	RET
                 
                 __CFD1U:
000677 9468      	SET
000678 c001      	RJMP __CFD1U0
                 __CFD1:
000679 94e8      	CLT
                 __CFD1U0:
00067a 935f      	PUSH R21
00067b dff2      	RCALL __UNPACK1
00067c 3870      	CPI  R23,0x80
00067d f018      	BRLO __CFD10
00067e 3f7f      	CPI  R23,0xFF
00067f f408      	BRCC __CFD10
000680 c0a7      	RJMP __ZERORES
                 __CFD10:
000681 e156      	LDI  R21,22
000682 1b57      	SUB  R21,R23
000683 f4aa      	BRPL __CFD11
000684 9551      	NEG  R21
000685 3058      	CPI  R21,8
000686 f40e      	BRTC __CFD19
000687 3059      	CPI  R21,9
                 __CFD19:
000688 f030      	BRLO __CFD17
000689 efef      	SER  R30
00068a efff      	SER  R31
00068b ef6f      	SER  R22
00068c e77f      	LDI  R23,0x7F
00068d f977      	BLD  R23,7
00068e c01a      	RJMP __CFD15
                 __CFD17:
00068f 2777      	CLR  R23
000690 2355      	TST  R21
000691 f0b9      	BREQ __CFD15
                 __CFD18:
000692 0fee      	LSL  R30
000693 1fff      	ROL  R31
000694 1f66      	ROL  R22
000695 1f77      	ROL  R23
000696 955a      	DEC  R21
000697 f7d1      	BRNE __CFD18
000698 c010      	RJMP __CFD15
                 __CFD11:
000699 2777      	CLR  R23
                 __CFD12:
00069a 3058      	CPI  R21,8
00069b f028      	BRLO __CFD13
00069c 2fef      	MOV  R30,R31
00069d 2ff6      	MOV  R31,R22
00069e 2f67      	MOV  R22,R23
00069f 5058      	SUBI R21,8
0006a0 cff9      	RJMP __CFD12
                 __CFD13:
0006a1 2355      	TST  R21
0006a2 f031      	BREQ __CFD15
                 __CFD14:
0006a3 9576      	LSR  R23
0006a4 9567      	ROR  R22
0006a5 95f7      	ROR  R31
0006a6 95e7      	ROR  R30
0006a7 955a      	DEC  R21
0006a8 f7d1      	BRNE __CFD14
                 __CFD15:
0006a9 2000      	TST  R0
0006aa f40a      	BRPL __CFD16
0006ab d129      	RCALL __ANEGD1
                 __CFD16:
0006ac 915f      	POP  R21
0006ad 9508      	RET
                 
                 __CDF1U:
0006ae 9468      	SET
0006af c001      	RJMP __CDF1U0
                 __CDF1:
0006b0 94e8      	CLT
                 __CDF1U0:
0006b1 9730      	SBIW R30,0
0006b2 4060      	SBCI R22,0
0006b3 4070      	SBCI R23,0
0006b4 f0b1      	BREQ __CDF10
0006b5 2400      	CLR  R0
0006b6 f026      	BRTS __CDF11
0006b7 2377      	TST  R23
0006b8 f412      	BRPL __CDF11
0006b9 9400      	COM  R0
0006ba d11a      	RCALL __ANEGD1
                 __CDF11:
0006bb 2e17      	MOV  R1,R23
0006bc e17e      	LDI  R23,30
0006bd 2011      	TST  R1
                 __CDF12:
0006be f032      	BRMI __CDF13
0006bf 957a      	DEC  R23
0006c0 0fee      	LSL  R30
0006c1 1fff      	ROL  R31
0006c2 1f66      	ROL  R22
0006c3 1c11      	ROL  R1
0006c4 cff9      	RJMP __CDF12
                 __CDF13:
0006c5 2fef      	MOV  R30,R31
0006c6 2ff6      	MOV  R31,R22
0006c7 2d61      	MOV  R22,R1
0006c8 935f      	PUSH R21
0006c9 df8a      	RCALL __REPACK
0006ca 915f      	POP  R21
                 __CDF10:
0006cb 9508      	RET
                 
                 __SWAPACC:
0006cc 934f      	PUSH R20
0006cd 01af      	MOVW R20,R30
0006ce 01fd      	MOVW R30,R26
0006cf 01da      	MOVW R26,R20
0006d0 01ab      	MOVW R20,R22
0006d1 01bc      	MOVW R22,R24
0006d2 01ca      	MOVW R24,R20
0006d3 2d40      	MOV  R20,R0
0006d4 2c01      	MOV  R0,R1
0006d5 2e14      	MOV  R1,R20
0006d6 914f      	POP  R20
0006d7 9508      	RET
                 
                 __UADD12:
0006d8 0fea      	ADD  R30,R26
0006d9 1ffb      	ADC  R31,R27
0006da 1f68      	ADC  R22,R24
0006db 9508      	RET
                 
                 __NEGMAN1:
0006dc 95e0      	COM  R30
0006dd 95f0      	COM  R31
0006de 9560      	COM  R22
0006df 5fef      	SUBI R30,-1
0006e0 4fff      	SBCI R31,-1
0006e1 4f6f      	SBCI R22,-1
0006e2 9508      	RET
                 
                 __SUBF12:
0006e3 935f      	PUSH R21
0006e4 df81      	RCALL __UNPACK
0006e5 3890      	CPI  R25,0x80
0006e6 f171      	BREQ __ADDF129
0006e7 e850      	LDI  R21,0x80
0006e8 2615      	EOR  R1,R21
                 
0006e9 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0006ea 935f      	PUSH R21
0006eb df7a      	RCALL __UNPACK
0006ec 3890      	CPI  R25,0x80
0006ed f139      	BREQ __ADDF129
                 
                 __ADDF120:
0006ee 3870      	CPI  R23,0x80
0006ef f121      	BREQ __ADDF128
                 __ADDF121:
0006f0 2f57      	MOV  R21,R23
0006f1 1b59      	SUB  R21,R25
0006f2 f12b      	BRVS __ADDF1211
0006f3 f412      	BRPL __ADDF122
0006f4 dfd7      	RCALL __SWAPACC
0006f5 cffa      	RJMP __ADDF121
                 __ADDF122:
0006f6 3158      	CPI  R21,24
0006f7 f018      	BRLO __ADDF123
0006f8 27aa      	CLR  R26
0006f9 27bb      	CLR  R27
0006fa 2788      	CLR  R24
                 __ADDF123:
0006fb 3058      	CPI  R21,8
0006fc f028      	BRLO __ADDF124
0006fd 2fab      	MOV  R26,R27
0006fe 2fb8      	MOV  R27,R24
0006ff 2788      	CLR  R24
000700 5058      	SUBI R21,8
000701 cff9      	RJMP __ADDF123
                 __ADDF124:
000702 2355      	TST  R21
000703 f029      	BREQ __ADDF126
                 __ADDF125:
000704 9586      	LSR  R24
000705 95b7      	ROR  R27
000706 95a7      	ROR  R26
000707 955a      	DEC  R21
000708 f7d9      	BRNE __ADDF125
                 __ADDF126:
000709 2d50      	MOV  R21,R0
00070a 2551      	EOR  R21,R1
00070b f072      	BRMI __ADDF127
00070c dfcb      	RCALL __UADD12
00070d f438      	BRCC __ADDF129
00070e 9567      	ROR  R22
00070f 95f7      	ROR  R31
000710 95e7      	ROR  R30
000711 9573      	INC  R23
000712 f413      	BRVC __ADDF129
000713 c020      	RJMP __MAXRES
                 __ADDF128:
000714 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000715 df3e      	RCALL __REPACK
000716 915f      	POP  R21
000717 9508      	RET
                 __ADDF1211:
000718 f7d8      	BRCC __ADDF128
000719 cffb      	RJMP __ADDF129
                 __ADDF127:
00071a 1bea      	SUB  R30,R26
00071b 0bfb      	SBC  R31,R27
00071c 0b68      	SBC  R22,R24
00071d f051      	BREQ __ZERORES
00071e f410      	BRCC __ADDF1210
00071f 9400      	COM  R0
000720 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000721 2366      	TST  R22
000722 f392      	BRMI __ADDF129
000723 0fee      	LSL  R30
000724 1fff      	ROL  R31
000725 1f66      	ROL  R22
000726 957a      	DEC  R23
000727 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000728 27ee      	CLR  R30
000729 27ff      	CLR  R31
00072a 2766      	CLR  R22
00072b 2777      	CLR  R23
00072c 915f      	POP  R21
00072d 9508      	RET
                 
                 __MINRES:
00072e efef      	SER  R30
00072f efff      	SER  R31
000730 e76f      	LDI  R22,0x7F
000731 ef7f      	SER  R23
000732 915f      	POP  R21
000733 9508      	RET
                 
                 __MAXRES:
000734 efef      	SER  R30
000735 efff      	SER  R31
000736 e76f      	LDI  R22,0x7F
000737 e77f      	LDI  R23,0x7F
000738 915f      	POP  R21
000739 9508      	RET
                 
                 __MULF12:
00073a 935f      	PUSH R21
00073b df2a      	RCALL __UNPACK
00073c 3870      	CPI  R23,0x80
00073d f351      	BREQ __ZERORES
00073e 3890      	CPI  R25,0x80
00073f f341      	BREQ __ZERORES
000740 2401      	EOR  R0,R1
000741 9408      	SEC
000742 1f79      	ADC  R23,R25
000743 f423      	BRVC __MULF124
000744 f31c      	BRLT __ZERORES
                 __MULF125:
000745 2000      	TST  R0
000746 f33a      	BRMI __MINRES
000747 cfec      	RJMP __MAXRES
                 __MULF124:
000748 920f      	PUSH R0
000749 931f      	PUSH R17
00074a 932f      	PUSH R18
00074b 933f      	PUSH R19
00074c 934f      	PUSH R20
00074d 2711      	CLR  R17
00074e 2722      	CLR  R18
00074f 2799      	CLR  R25
000750 9f68      	MUL  R22,R24
000751 01a0      	MOVW R20,R0
000752 9f8f      	MUL  R24,R31
000753 2d30      	MOV  R19,R0
000754 0d41      	ADD  R20,R1
000755 1f59      	ADC  R21,R25
000756 9f6b      	MUL  R22,R27
000757 0d30      	ADD  R19,R0
000758 1d41      	ADC  R20,R1
000759 1f59      	ADC  R21,R25
00075a 9f8e      	MUL  R24,R30
00075b d027      	RCALL __MULF126
00075c 9fbf      	MUL  R27,R31
00075d d025      	RCALL __MULF126
00075e 9f6a      	MUL  R22,R26
00075f d023      	RCALL __MULF126
000760 9fbe      	MUL  R27,R30
000761 d01d      	RCALL __MULF127
000762 9faf      	MUL  R26,R31
000763 d01b      	RCALL __MULF127
000764 9fae      	MUL  R26,R30
000765 0d11      	ADD  R17,R1
000766 1f29      	ADC  R18,R25
000767 1f39      	ADC  R19,R25
000768 1f49      	ADC  R20,R25
000769 1f59      	ADC  R21,R25
00076a 2fe3      	MOV  R30,R19
00076b 2ff4      	MOV  R31,R20
00076c 2f65      	MOV  R22,R21
00076d 2f52      	MOV  R21,R18
00076e 914f      	POP  R20
00076f 913f      	POP  R19
000770 912f      	POP  R18
000771 911f      	POP  R17
000772 900f      	POP  R0
000773 2366      	TST  R22
000774 f02a      	BRMI __MULF122
000775 0f55      	LSL  R21
000776 1fee      	ROL  R30
000777 1fff      	ROL  R31
000778 1f66      	ROL  R22
000779 c002      	RJMP __MULF123
                 __MULF122:
00077a 9573      	INC  R23
00077b f24b      	BRVS __MULF125
                 __MULF123:
00077c decd      	RCALL __ROUND_REPACK
00077d 915f      	POP  R21
00077e 9508      	RET
                 
                 __MULF127:
00077f 0d10      	ADD  R17,R0
000780 1d21      	ADC  R18,R1
000781 1f39      	ADC  R19,R25
000782 c002      	RJMP __MULF128
                 __MULF126:
000783 0d20      	ADD  R18,R0
000784 1d31      	ADC  R19,R1
                 __MULF128:
000785 1f49      	ADC  R20,R25
000786 1f59      	ADC  R21,R25
000787 9508      	RET
                 
                 __DIVF21:
000788 935f      	PUSH R21
000789 dedc      	RCALL __UNPACK
00078a 3870      	CPI  R23,0x80
00078b f421      	BRNE __DIVF210
00078c 2011      	TST  R1
                 __DIVF211:
00078d f40a      	BRPL __DIVF219
00078e cf9f      	RJMP __MINRES
                 __DIVF219:
00078f cfa4      	RJMP __MAXRES
                 __DIVF210:
000790 3890      	CPI  R25,0x80
000791 f409      	BRNE __DIVF218
                 __DIVF217:
000792 cf95      	RJMP __ZERORES
                 __DIVF218:
000793 2401      	EOR  R0,R1
000794 9408      	SEC
000795 0b97      	SBC  R25,R23
000796 f41b      	BRVC __DIVF216
000797 f3d4      	BRLT __DIVF217
000798 2000      	TST  R0
000799 cff3      	RJMP __DIVF211
                 __DIVF216:
00079a 2f79      	MOV  R23,R25
00079b 931f      	PUSH R17
00079c 932f      	PUSH R18
00079d 933f      	PUSH R19
00079e 934f      	PUSH R20
00079f 2411      	CLR  R1
0007a0 2711      	CLR  R17
0007a1 2722      	CLR  R18
0007a2 2733      	CLR  R19
0007a3 2744      	CLR  R20
0007a4 2755      	CLR  R21
0007a5 e290      	LDI  R25,32
                 __DIVF212:
0007a6 17ae      	CP   R26,R30
0007a7 07bf      	CPC  R27,R31
0007a8 0786      	CPC  R24,R22
0007a9 0741      	CPC  R20,R17
0007aa f030      	BRLO __DIVF213
0007ab 1bae      	SUB  R26,R30
0007ac 0bbf      	SBC  R27,R31
0007ad 0b86      	SBC  R24,R22
0007ae 0b41      	SBC  R20,R17
0007af 9408      	SEC
0007b0 c001      	RJMP __DIVF214
                 __DIVF213:
0007b1 9488      	CLC
                 __DIVF214:
0007b2 1f55      	ROL  R21
0007b3 1f22      	ROL  R18
0007b4 1f33      	ROL  R19
0007b5 1c11      	ROL  R1
0007b6 1faa      	ROL  R26
0007b7 1fbb      	ROL  R27
0007b8 1f88      	ROL  R24
0007b9 1f44      	ROL  R20
0007ba 959a      	DEC  R25
0007bb f751      	BRNE __DIVF212
0007bc 01f9      	MOVW R30,R18
0007bd 2d61      	MOV  R22,R1
0007be 914f      	POP  R20
0007bf 913f      	POP  R19
0007c0 912f      	POP  R18
0007c1 911f      	POP  R17
0007c2 2366      	TST  R22
0007c3 f032      	BRMI __DIVF215
0007c4 0f55      	LSL  R21
0007c5 1fee      	ROL  R30
0007c6 1fff      	ROL  R31
0007c7 1f66      	ROL  R22
0007c8 957a      	DEC  R23
0007c9 f243      	BRVS __DIVF217
                 __DIVF215:
0007ca de7f      	RCALL __ROUND_REPACK
0007cb 915f      	POP  R21
0007cc 9508      	RET
                 
                 __ADDW2R15:
0007cd 2400      	CLR  R0
0007ce 0daf      	ADD  R26,R15
0007cf 1db0      	ADC  R27,R0
0007d0 9508      	RET
                 
                 __ANEGW1:
0007d1 95f1      	NEG  R31
0007d2 95e1      	NEG  R30
0007d3 40f0      	SBCI R31,0
0007d4 9508      	RET
                 
                 __ANEGD1:
0007d5 95f0      	COM  R31
0007d6 9560      	COM  R22
0007d7 9570      	COM  R23
0007d8 95e1      	NEG  R30
0007d9 4fff      	SBCI R31,-1
0007da 4f6f      	SBCI R22,-1
0007db 4f7f      	SBCI R23,-1
0007dc 9508      	RET
                 
                 __CWD1:
0007dd 2f6f      	MOV  R22,R31
0007de 0f66      	ADD  R22,R22
0007df 0b66      	SBC  R22,R22
0007e0 2f76      	MOV  R23,R22
0007e1 9508      	RET
                 
                 __CWD2:
0007e2 2f8b      	MOV  R24,R27
0007e3 0f88      	ADD  R24,R24
0007e4 0b88      	SBC  R24,R24
0007e5 2f98      	MOV  R25,R24
0007e6 9508      	RET
                 
                 __MULW12U:
0007e7 9ffa      	MUL  R31,R26
0007e8 2df0      	MOV  R31,R0
0007e9 9feb      	MUL  R30,R27
0007ea 0df0      	ADD  R31,R0
0007eb 9fea      	MUL  R30,R26
0007ec 2de0      	MOV  R30,R0
0007ed 0df1      	ADD  R31,R1
0007ee 9508      	RET
                 
                 __GETW1P:
0007ef 91ed      	LD   R30,X+
0007f0 91fc      	LD   R31,X
0007f1 9711      	SBIW R26,1
0007f2 9508      	RET
                 
                 __GETD1P:
0007f3 91ed      	LD   R30,X+
0007f4 91fd      	LD   R31,X+
0007f5 916d      	LD   R22,X+
0007f6 917c      	LD   R23,X
0007f7 9713      	SBIW R26,3
0007f8 9508      	RET
                 
                 __GETD1P_INC:
0007f9 91ed      	LD   R30,X+
0007fa 91fd      	LD   R31,X+
0007fb 916d      	LD   R22,X+
0007fc 917d      	LD   R23,X+
0007fd 9508      	RET
                 
                 __PUTDP1:
0007fe 93ed      	ST   X+,R30
0007ff 93fd      	ST   X+,R31
000800 936d      	ST   X+,R22
000801 937c      	ST   X,R23
000802 9508      	RET
                 
                 __PUTDP1_DEC:
000803 937e      	ST   -X,R23
000804 936e      	ST   -X,R22
000805 93fe      	ST   -X,R31
000806 93ee      	ST   -X,R30
000807 9508      	RET
                 
                 __GETW1PF:
000808 9005      	LPM  R0,Z+
000809 91f4      	LPM  R31,Z
00080a 2de0      	MOV  R30,R0
00080b 9508      	RET
                 
                 __PUTPARD1:
00080c 937a      	ST   -Y,R23
00080d 936a      	ST   -Y,R22
00080e 93fa      	ST   -Y,R31
00080f 93ea      	ST   -Y,R30
000810 9508      	RET
                 
                 __CDF2U:
000811 9468      	SET
000812 c001      	RJMP __CDF2U0
                 __CDF2:
000813 94e8      	CLT
                 __CDF2U0:
000814 d001      	RCALL __SWAPD12
000815 de9b      	RCALL __CDF1U0
                 
                 __SWAPD12:
000816 2e18      	MOV  R1,R24
000817 2f86      	MOV  R24,R22
000818 2d61      	MOV  R22,R1
000819 2e19      	MOV  R1,R25
00081a 2f97      	MOV  R25,R23
00081b 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00081c 2e1b      	MOV  R1,R27
00081d 2fbf      	MOV  R27,R31
00081e 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00081f 2e1a      	MOV  R1,R26
000820 2fae      	MOV  R26,R30
000821 2de1      	MOV  R30,R1
000822 9508      	RET
                 
                 __CPD02:
000823 2400      	CLR  R0
000824 160a      	CP   R0,R26
000825 060b      	CPC  R0,R27
000826 0608      	CPC  R0,R24
000827 0609      	CPC  R0,R25
000828 9508      	RET
                 
                 __CPD12:
000829 17ea      	CP   R30,R26
00082a 07fb      	CPC  R31,R27
00082b 0768      	CPC  R22,R24
00082c 0779      	CPC  R23,R25
00082d 9508      	RET
                 
                 __CPD21:
00082e 17ae      	CP   R26,R30
00082f 07bf      	CPC  R27,R31
000830 0786      	CPC  R24,R22
000831 0797      	CPC  R25,R23
000832 9508      	RET
                 
                 __SAVELOCR6:
000833 935a      	ST   -Y,R21
                 __SAVELOCR5:
000834 934a      	ST   -Y,R20
                 __SAVELOCR4:
000835 933a      	ST   -Y,R19
                 __SAVELOCR3:
000836 932a      	ST   -Y,R18
                 __SAVELOCR2:
000837 931a      	ST   -Y,R17
000838 930a      	ST   -Y,R16
000839 9508      	RET
                 
                 __LOADLOCR6:
00083a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00083b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00083c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00083d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00083e 8119      	LDD  R17,Y+1
00083f 8108      	LD   R16,Y
000840 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000841 0fac      	ADD  R26,R28
000842 1fbd      	ADC  R27,R29
                 __INITLOC0:
000843 9005      	LPM  R0,Z+
000844 920d      	ST   X+,R0
000845 958a      	DEC  R24
000846 f7e1      	BRNE __INITLOC0
000847 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  65 r1 :  39 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   4 r7 :   3 
r8 :   3 r9 :   0 r10:   0 r11:   3 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  46 r17:  40 r18:  45 r19:  22 r20:  31 r21:  84 r22:  90 r23:  76 
r24:  48 r25:  40 r26: 139 r27:  81 r28:  46 r29:   2 r30: 347 r31: 170 
x  :  78 y  : 242 z  :  40 
Registers used: 26 out of 35 (74.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  16 
adiw  :  34 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  36 
brge  :   6 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  18 
brlt  :   3 brmi  :   9 brne  :  33 brpl  :   9 brsh  :   4 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   1 bst   :   0 call  : 122 
cbi   :   9 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  41 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  10 
cp    :  14 cpc   :  18 cpi   :  56 cpse  :   0 dec   :   9 des   :   0 
elpm  :   0 eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   5 inc   :   3 jmp   :  41 ld    :  84 ldd   : 120 
ldi   : 155 lds   :   6 lpm   :  15 lsl   :  14 lsr   :   2 mov   :  60 
movw  :  58 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   0 ori   :   7 out   :  24 pop   :  19 push  :  19 rcall :  33 
ret   :  69 reti  :   3 rjmp  :  98 rol   :  27 ror   :  12 sbc   :   9 
sbci  :  38 sbi   :   8 sbic  :   6 sbis  :   1 sbiw  :  25 sbr   :   0 
sbrc  :   3 sbrs  :  11 sec   :   3 seh   :   0 sei   :   0 sen   :   0 
ser   :   9 ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 108 std   :  35 sts   :  15 sub   :   5 subi  :  40 
swap  :   0 tst   :  25 wdr   :   0 
Instructions used: 74 out of 117 (63.2%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001090   3854    386   4240  131072   3.2%
[.dseg] 0x000100 0x000520      0     32     32    4351   0.7%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 9 warnings
