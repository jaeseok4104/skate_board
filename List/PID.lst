
AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\PID\List\PID.asm Tue Dec 24 11:53:17 2019

C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1061): warning: Register r5 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1062): warning: Register r4 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1063): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1064): warning: Register r6 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1065): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _RXC_index=R5
                 	.DEF _SET_RXC1=R4
                 	.DEF _recByte=R7
                 	.DEF _BUFF=R6
                 	.DEF _tick=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0106 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0288 	JMP  _hall_sensor_detection1
00000e 940c 029c 	JMP  _hall_sensor_detection2
000010 940c 02b0 	JMP  _hall_sensor_detection3
000012 940c 0000 	JMP  0x00
000014 940c 0266 	JMP  _timer2_overflow
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 026f 	JMP  _int_USART1
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1117): warning: .cseg .db misalignment - padding zero byte
00004f 000a      	.DB  0xA
                 _0x4:
000050 aa47
000051 3b6f      	.DB  0x47,0xAA,0x6F,0x3B
                 _0x30:
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000056 0000
000057 0000
000058 0000
000059 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005a 0000
00005b 0000
00005c 0000
00005d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005e 0000
00005f 0000
000060 0000
000061 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000062 0000
000063 0000
000064 0000
000065 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000066 0000
000067 0000
000068 0000
000069 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006a 0000
00006b 0000
00006c 0000
00006d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006e 0000
00006f 0000
000070 0000
000071 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000072 0000
000073 0000
000074 0000
000075 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000076 0000
000077 0000
000078 0000
000079 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007a 0000
00007b 0000
00007c 0000
00007d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007e 0000
00007f 0000
000080 0000
000081 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000082 0000
000083 0000
000084 0000
000085 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000086 0000
000087 0000
000088 0000
000089 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008a 0000
00008b 0000
00008c 0000
00008d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008e 0000
00008f 0000
000090 0000
000091 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000092 0000
000093 0000
000094 0000
000095 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000096 0000
000097 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x44:
000098 0000
000099 0000
00009a 0000
00009b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00009c 0000
00009d 0000
00009e 0000
00009f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a0 0000
0000a1 0000
0000a2 0000
0000a3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a4 0000
0000a5 0000
0000a6 0000
0000a7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a8 0000
0000a9 0000
0000aa 0000
0000ab 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ac 0000
0000ad 0000
0000ae 0000
0000af 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b0 0000
0000b1 0000
0000b2 0000
0000b3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b4 0000
0000b5 0000
0000b6 0000
0000b7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b8 0000
0000b9 0000
0000ba 0000
0000bb 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000bc 0000
0000bd 0000
0000be 0000
0000bf 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000c0 0000
0000c1 0000
0000c2 0000
0000c3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000c4 0000
0000c5 0000
0000c6 0000
0000c7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000c8 0000
0000c9 0000
0000ca 0000
0000cb 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000cc 0000
0000cd 0000
0000ce 0000
0000cf 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000d0 0000
0000d1 0000
0000d2 0000
0000d3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000d4 0000
0000d5 0000
0000d6 0000
0000d7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000d8 0000
0000d9 0000
0000da 0000
0000db 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000dc 0000
0000dd 0000
0000de 0000
0000df 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x4F:
0000e0 0000
0000e1 0000
0000e2 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
0000e3 6f47
0000e4 6c61
0000e5 253d
0000e6 2c64      	.DB  0x47,0x6F,0x61,0x6C,0x3D,0x25,0x64,0x2C
0000e7 6320
0000e8 7275
0000e9 6572
0000ea 746e      	.DB  0x20,0x63,0x75,0x72,0x72,0x65,0x6E,0x74
0000eb 253d
0000ec 2c64
0000ed 4520
0000ee 7272      	.DB  0x3D,0x25,0x64,0x2C,0x20,0x45,0x72,0x72
0000ef 253d
0000f0 2064
0000f1 0a0d
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1164): warning: .cseg .db misalignment - padding zero byte
0000f2 0000      	.DB  0x3D,0x25,0x64,0x20,0xD,0xA,0x0
                 _0x2020060:
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1166): warning: .cseg .db misalignment - padding zero byte
0000f3 0001      	.DB  0x1
                 _0x2020000:
0000f4 4e2d
0000f5 4e41
0000f6 4900
0000f7 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1169): warning: .cseg .db misalignment - padding zero byte
0000f8 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
0000f9 0001      	.DW  0x01
0000fa 0504      	.DW  _RXC_BUFF
0000fb 009e      	.DW  _0x3*2
                 
0000fc 0004      	.DW  0x04
0000fd 0518      	.DW  _Time
0000fe 00a0      	.DW  _0x4*2
                 
0000ff 0006      	.DW  0x06
000100 0004      	.DW  0x04
000101 01c0      	.DW  _0x4F*2
                 
000102 0001      	.DW  0x01
000103 051c      	.DW  __seed_G101
000104 01e6      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000105 0000      	.DW  0
                 
                 __RESET:
000106 94f8      	CLI
000107 27ee      	CLR  R30
000108 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000109 e0f1      	LDI  R31,1
00010a bff5      	OUT  MCUCR,R31
00010b bfe5      	OUT  MCUCR,R30
00010c 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00010e e1f8      	LDI  R31,0x18
00010f bdf1      	OUT  WDTCR,R31
000110 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000111 e08d      	LDI  R24,(14-2)+1
000112 e0a2      	LDI  R26,2
000113 27bb      	CLR  R27
                 __CLEAR_REG:
000114 93ed      	ST   X+,R30
000115 958a      	DEC  R24
000116 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000117 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000118 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000119 e0a0      	LDI  R26,LOW(__SRAM_START)
00011a e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00011b 93ed      	ST   X+,R30
00011c 9701      	SBIW R24,1
00011d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00011e efe2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00011f e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000120 9185      	LPM  R24,Z+
000121 9195      	LPM  R25,Z+
000122 9700      	SBIW R24,0
000123 f061      	BREQ __GLOBAL_INI_END
000124 91a5      	LPM  R26,Z+
000125 91b5      	LPM  R27,Z+
000126 9005      	LPM  R0,Z+
000127 9015      	LPM  R1,Z+
000128 01bf      	MOVW R22,R30
000129 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00012a 9005      	LPM  R0,Z+
00012b 920d      	ST   X+,R0
00012c 9701      	SBIW R24,1
00012d f7e1      	BRNE __GLOBAL_INI_LOOP
00012e 01fb      	MOVW R30,R22
00012f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000130 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000131 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000132 bfed      	OUT  SPL,R30
000133 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000134 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000135 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000136 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000137 940c 02cc 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;
                 ;#define MOTOR2_DIRECTION PORTB.3
                 ;#define MOTOR1_DIRECTION PORTB.4
                 ;#define HALLA PINE.5
                 ;#define HALLB PINE.6
                 ;#define HALLC PINE.7
                 ;#define Kp 5
                 ;#define Ki 0.2
                 ;#define Kd 0
                 ;
                 ;//ENCODER
                 ;long int hall_sensor_value = 0;
                 ;
                 ;//USART
                 ;unsigned char RXC_BUFF[20] = {0x0a,};
                 
                 	.DSEG
                 ;unsigned char RXC_index = 0;
                 ;unsigned char SET_RXC1 = 0;
                 ;unsigned char recByte = 0;
                 ;unsigned char BUFF = 0;
                 ;
                 ;//PID
                 ;char tick = 0;
                 ;float Time = 0.003657;
                 ;
                 ;void GPIO_SETUP(void)
                 ; 0000 001E {
                 
                 	.CSEG
                 _GPIO_SETUP:
                 ; 0000 001F     //PWM
                 ; 0000 0020     DDRB.6 = 1;
000139 9abe      	SBI  0x17,6
                 ; 0000 0021     DDRB.7 = 1;
00013a 9abf      	SBI  0x17,7
                 ; 0000 0022 
                 ; 0000 0023     //motor direction
                 ; 0000 0024     DDRB.4 = 1;
00013b 9abc      	SBI  0x17,4
                 ; 0000 0025     DDRB.3 = 1;
00013c 9abb      	SBI  0x17,3
                 ; 0000 0026 
                 ; 0000 0027     PORTB.4 = 0;
00013d 98c4      	CBI  0x18,4
                 ; 0000 0028     PORTB.3 = 0;
00013e 98c3      	CBI  0x18,3
                 ; 0000 0029 
                 ; 0000 002A     //nBrake;
                 ; 0000 002B     DDRB.2 = 1;
00013f 9aba      	SBI  0x17,2
                 ; 0000 002C     DDRB.5 = 1;
000140 9abd      	SBI  0x17,5
                 ; 0000 002D 
                 ; 0000 002E     PORTB.2 = 0;
000141 98c2      	CBI  0x18,2
                 ; 0000 002F     PORTB.5 = 0;
000142 98c5      	CBI  0x18,5
                 ; 0000 0030 }
000143 9508      	RET
                 ;
                 ;void USART1_init(void)
                 ; 0000 0033 {
                 _USART1_init:
                 ; 0000 0034     UCSR1A = 0x00;
000144 e0e0      	LDI  R30,LOW(0)
000145 93e0 009b 	STS  155,R30
                 ; 0000 0035     UCSR1B = (1<<TXEN1)|(1<<RXEN0)|(1<<RXCIE0);
000147 e9e8      	LDI  R30,LOW(152)
000148 93e0 009a 	STS  154,R30
                 ; 0000 0036     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
00014a e0e6      	LDI  R30,LOW(6)
00014b 93e0 009d 	STS  157,R30
                 ; 0000 0037     UCSR1C &= ~(0<<UMSEL1);
00014d e9ad      	LDI  R26,LOW(157)
00014e e0b0      	LDI  R27,HIGH(157)
00014f 91ec      	LD   R30,X
000150 93ec      	ST   X,R30
                 ; 0000 0038 
                 ; 0000 0039     UBRR1H = 0;
000151 e0e0      	LDI  R30,LOW(0)
000152 93e0 0098 	STS  152,R30
                 ; 0000 003A     UBRR1L = 7;
000154 e0e7      	LDI  R30,LOW(7)
000155 93e0 0099 	STS  153,R30
                 ; 0000 003B }
000157 9508      	RET
                 ;
                 ;void Data_Tx1(unsigned char bData)
                 ; 0000 003E {
                 _Data_Tx1:
                 ; 0000 003F     while(!(UCSR1A & (1<<UDRE1))); //wait until data can be loaded.
                 ;	bData -> Y+0
                 _0x19:
000158 91e0 009b 	LDS  R30,155
00015a 72e0      	ANDI R30,LOW(0x20)
00015b f3e1      	BREQ _0x19
                 ; 0000 0040     UDR1 = bData; //data load to TxD buffer
00015c 81e8      	LD   R30,Y
00015d 93e0 009c 	STS  156,R30
                 ; 0000 0041 }
00015f 9621      	ADIW R28,1
000160 9508      	RET
                 ;
                 ;unsigned char Data_Rx1(void)
                 ; 0000 0044 {
                 ; 0000 0045     while(!(UCSR1A & (1<<RXC1))); // RXC0 flag is USART Receive Complete
                 ; 0000 0046     return UDR1;
                 ; 0000 0047 }
                 ;
                 ;//sprintf printing function
                 ;void string_tx1(unsigned char *str)
                 ; 0000 004B {
                 _string_tx1:
                 ; 0000 004C     while (*str)
                 ;	*str -> Y+0
                 _0x1F:
000161 81a8      	LD   R26,Y
000162 81b9      	LDD  R27,Y+1
000163 91ec      	LD   R30,X
000164 30e0      	CPI  R30,0
000165 f031      	BREQ _0x21
                 ; 0000 004D     {
                 ; 0000 004E         Data_Tx1(*str++);
000166 91ed      	LD   R30,X+
000167 83a8      	ST   Y,R26
000168 83b9      	STD  Y+1,R27
000169 93ea      	ST   -Y,R30
00016a dfed      	RCALL _Data_Tx1
                 ; 0000 004F     }
00016b cff5      	RJMP _0x1F
                 _0x21:
                 ; 0000 0050 }
00016c 9622      	ADIW R28,2
00016d 9508      	RET
                 ;
                 ;void EXT_INT_init(void)
                 ; 0000 0053 {
                 _EXT_INT_init:
                 ; 0000 0054     EICRB = (1<<ISC50)|(1<<ISC60)|(1<<ISC70);
00016e e5e4      	LDI  R30,LOW(84)
00016f bfea      	OUT  0x3A,R30
                 ; 0000 0055     EIMSK = (1<<INT5)|(1<<INT6)|(1<<INT7);
000170 eee0      	LDI  R30,LOW(224)
000171 bfe9      	OUT  0x39,R30
                 ; 0000 0056 
                 ; 0000 0057     DDRE.5 = 0;
000172 9815      	CBI  0x2,5
                 ; 0000 0058     DDRE.6 = 0;
000173 9816      	CBI  0x2,6
                 ; 0000 0059     DDRE.7 = 0;
000174 9817      	CBI  0x2,7
                 ; 0000 005A }
000175 9508      	RET
                 ;
                 ;void TIMER_init(void)
                 ; 0000 005D {
                 _TIMER_init:
                 ; 0000 005E     //TIMER2
                 ; 0000 005F     TCCR2 = (1<<CS22)|(1<<CS20);// 일반모드, 1024분주;
000176 e0e5      	LDI  R30,LOW(5)
000177 bde5      	OUT  0x25,R30
                 ; 0000 0060 
                 ; 0000 0061     TCCR1A = (1<<WGM11)|(1<<COM1C1)|(1<<COM1B1);    TCCR1B = (1<<WGM13)|(1<<WGM12); // WGM bit setting
000178 e2ea      	LDI  R30,LOW(42)
000179 bdef      	OUT  0x2F,R30
00017a e1e8      	LDI  R30,LOW(24)
00017b bdee      	OUT  0x2E,R30
                 ; 0000 0062     TCCR1B |= (1<<CS10); // Clock source choie
00017c b5ee      	IN   R30,0x2E
00017d 60e1      	ORI  R30,1
00017e bdee      	OUT  0x2E,R30
                 ; 0000 0063 
                 ; 0000 0064     OCR1B = 0x00;
00017f e0e0      	LDI  R30,LOW(0)
000180 e0f0      	LDI  R31,HIGH(0)
000181 bdf9      	OUT  0x28+1,R31
000182 bde8      	OUT  0x28,R30
                 ; 0000 0065     OCR1CH = 0x00;
000183 93e0 0079 	STS  121,R30
                 ; 0000 0066     OCR1CL = 0x00;
000185 93e0 0078 	STS  120,R30
                 ; 0000 0067     ICR1 = 1200; //664
000187 ebe0      	LDI  R30,LOW(1200)
000188 e0f4      	LDI  R31,HIGH(1200)
000189 bdf7      	OUT  0x26+1,R31
00018a bde6      	OUT  0x26,R30
                 ; 0000 0068 
                 ; 0000 0069     TIMSK = (1<<TOIE2);
00018b e4e0      	LDI  R30,LOW(64)
00018c bfe7      	OUT  0x37,R30
                 ; 0000 006A }
00018d 9508      	RET
                 ;
                 ;unsigned int MV_Rebuilding(int first, int last, int MV)
                 ; 0000 006D {
                 _MV_Rebuilding:
                 ; 0000 006E     unsigned int reMV;
                 ; 0000 006F 
                 ; 0000 0070     if(MV >= last) reMV = (unsigned int)last;
00018e 931a      	ST   -Y,R17
00018f 930a      	ST   -Y,R16
                 ;	first -> Y+6
                 ;	last -> Y+4
                 ;	MV -> Y+2
                 ;	reMV -> R16,R17
000190 81ec      	LDD  R30,Y+4
000191 81fd      	LDD  R31,Y+4+1
000192 81aa      	LDD  R26,Y+2
000193 81bb      	LDD  R27,Y+2+1
000194 17ae      	CP   R26,R30
000195 07bf      	CPC  R27,R31
000196 f01c      	BRLT _0x28
                +
000197 810c     +LDD R16 , Y + 4
000198 811d     +LDD R17 , Y + 4 + 1
                 	__GETWRS 16,17,4
                 ; 0000 0071     else if(MV <= first) reMV = (unsigned int)((-1)*first);
000199 c01c      	RJMP _0x29
                 _0x28:
00019a 940e 0588 	CALL SUBOPT_0x0
00019c f044      	BRLT _0x2A
00019d 81ee      	LDD  R30,Y+6
00019e 81ff      	LDD  R31,Y+6+1
00019f efaf      	LDI  R26,LOW(65535)
0001a0 efbf      	LDI  R27,HIGH(65535)
0001a1 940e 0759 	CALL __MULW12
0001a3 018f      	MOVW R16,R30
                 ; 0000 0072 
                 ; 0000 0073     else if(MV> first && MV < 0) reMV = (unsigned int)((-1)*MV);
0001a4 c011      	RJMP _0x2B
                 _0x2A:
0001a5 940e 0588 	CALL SUBOPT_0x0
0001a7 f41c      	BRGE _0x2D
0001a8 81ab      	LDD  R26,Y+3
0001a9 23aa      	TST  R26
0001aa f00a      	BRMI _0x2E
                 _0x2D:
0001ab c008      	RJMP _0x2C
                 _0x2E:
0001ac 81ea      	LDD  R30,Y+2
0001ad 81fb      	LDD  R31,Y+2+1
0001ae efaf      	LDI  R26,LOW(65535)
0001af efbf      	LDI  R27,HIGH(65535)
0001b0 940e 0759 	CALL __MULW12
0001b2 018f      	MOVW R16,R30
                 ; 0000 0074     else reMV = MV;
0001b3 c002      	RJMP _0x2F
                 _0x2C:
                +
0001b4 810a     +LDD R16 , Y + 2
0001b5 811b     +LDD R17 , Y + 2 + 1
                 	__GETWRS 16,17,2
                 ; 0000 0075 
                 ; 0000 0076     return reMV;
                 _0x2F:
                 _0x2B:
                 _0x29:
0001b6 01f8      	MOVW R30,R16
0001b7 8119      	LDD  R17,Y+1
0001b8 8108      	LDD  R16,Y+0
0001b9 9628      	ADIW R28,8
0001ba 9508      	RET
                 ; 0000 0077 }
                 ;
                 ;
                 ;int PID_Controller(int Goal, float now, float* integral, float* Err_previous)
                 ; 0000 007B {
                 _PID_Controller:
                 ; 0000 007C     float pErr = 0;
                 ; 0000 007D     float dErr = 0;
                 ; 0000 007E     int MV = 0;
                 ; 0000 007F     float Err = 0;
                 ; 0000 0080     unsigned char BUFF[128]={0,};
                 ; 0000 0081 
                 ; 0000 0082     Err = Goal - now; //ERROR
0001bb 97ef      	SBIW R28,63
0001bc 97ef      	SBIW R28,63
0001bd 972e      	SBIW R28,14
0001be e88c      	LDI  R24,140
0001bf e0a0      	LDI  R26,LOW(0)
0001c0 e0b0      	LDI  R27,HIGH(0)
0001c1 eae4      	LDI  R30,LOW(_0x30*2)
0001c2 e0f0      	LDI  R31,HIGH(_0x30*2)
0001c3 940e 07ae 	CALL __INITLOCB
0001c5 931a      	ST   -Y,R17
0001c6 930a      	ST   -Y,R16
                 ;	Goal -> Y+150
                 ;	now -> Y+146
                 ;	*integral -> Y+144
                 ;	*Err_previous -> Y+142
                 ;	pErr -> Y+138
                 ;	dErr -> Y+134
                 ;	MV -> R16,R17
                 ;	Err -> Y+130
                 ;	BUFF -> Y+2
                +
0001c7 e000     +LDI R16 , LOW ( 0 )
0001c8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001c9 01fe     +MOVW R30 , R28
0001ca 56ee     +SUBI R30 , LOW ( - 146 )
0001cb 4fff     +SBCI R31 , HIGH ( - 146 )
0001cc 9001     +LD R0 , Z +
0001cd 9011     +LD R1 , Z +
0001ce 9161     +LD R22 , Z +
0001cf 8170     +LD R23 , Z
0001d0 01f0     +MOVW R30 , R0
                 	__GETD1SX 146
                +
0001d1 01de     +MOVW R26 , R28
0001d2 56aa     +SUBI R26 , LOW ( - 150 )
0001d3 4fbf     +SBCI R27 , HIGH ( - 150 )
0001d4 900d     +LD R0 , X +
0001d5 91bc     +LD R27 , X
0001d6 2da0     +MOV R26 , R0
                 	__GETW2SX 150
0001d7 940e 074c 	CALL __CWD2
0001d9 940e 0790 	CALL __CDF2
0001db 940e 0793 	CALL __SWAPD12
0001dd 940e 0692 	CALL __SUBF12
                +
0001df 01de     +MOVW R26 , R28
0001e0 57ae     +SUBI R26 , LOW ( - 130 )
0001e1 4fbf     +SBCI R27 , HIGH ( - 130 )
0001e2 93ed     +ST X + , R30
0001e3 93fd     +ST X + , R31
0001e4 936d     +ST X + , R22
0001e5 937c     +ST X , R23
                 	__PUTD1SX 130
                 ; 0000 0083 
                 ; 0000 0084     pErr = (Kp*Err); // P
0001e6 940e 058f 	CALL SUBOPT_0x1
                +
0001e8 e0a0     +LDI R26 , LOW ( 0x40A00000 )
0001e9 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
0001ea ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
0001eb e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
0001ec 940e 06e9 	CALL __MULF12
                +
0001ee 01de     +MOVW R26 , R28
0001ef 57a6     +SUBI R26 , LOW ( - 138 )
0001f0 4fbf     +SBCI R27 , HIGH ( - 138 )
0001f1 93ed     +ST X + , R30
0001f2 93fd     +ST X + , R31
0001f3 936d     +ST X + , R22
0001f4 937c     +ST X , R23
                 	__PUTD1SX 138
                 ; 0000 0085     *integral = *integral +(Ki * Err * Time); // I
0001f5 940e 0598 	CALL SUBOPT_0x2
0001f7 940e 0770 	CALL __GETD1P
0001f9 937f      	PUSH R23
0001fa 936f      	PUSH R22
0001fb 93ff      	PUSH R31
0001fc 93ef      	PUSH R30
0001fd 940e 058f 	CALL SUBOPT_0x1
                +
0001ff ecad     +LDI R26 , LOW ( 0x3E4CCCCD )
000200 ecbc     +LDI R27 , HIGH ( 0x3E4CCCCD )
000201 e48c     +LDI R24 , BYTE3 ( 0x3E4CCCCD )
000202 e39e     +LDI R25 , BYTE4 ( 0x3E4CCCCD )
                 	__GETD2N 0x3E4CCCCD
000203 940e 06e9 	CALL __MULF12
000205 91a0 0518 	LDS  R26,_Time
000207 91b0 0519 	LDS  R27,_Time+1
000209 9180 051a 	LDS  R24,_Time+2
00020b 9190 051b 	LDS  R25,_Time+3
00020d 940e 06e9 	CALL __MULF12
00020f 91af      	POP  R26
000210 91bf      	POP  R27
000211 918f      	POP  R24
000212 919f      	POP  R25
000213 940e 0699 	CALL __ADDF12
000215 940e 0598 	CALL SUBOPT_0x2
000217 940e 077b 	CALL __PUTDP1
                 ; 0000 0086     dErr = (Kd * (Err - *Err_previous)) / Time; // D
000219 e0e0      	LDI  R30,LOW(0)
                +
00021a 01de     +MOVW R26 , R28
00021b 57aa     +SUBI R26 , LOW ( - 134 )
00021c 4fbf     +SBCI R27 , HIGH ( - 134 )
00021d 93ed     +ST X + , R30
00021e 93ed     +ST X + , R30
00021f 93ed     +ST X + , R30
000220 93ec     +ST X , R30
                 	__CLRD1SX 134
                 ; 0000 0087     MV = (int)(pErr+ *integral + dErr);// PID Control Volume
000221 940e 0598 	CALL SUBOPT_0x2
000223 940e 0770 	CALL __GETD1P
                +
000225 01de     +MOVW R26 , R28
000226 57a6     +SUBI R26 , LOW ( - 138 )
000227 4fbf     +SBCI R27 , HIGH ( - 138 )
000228 900d     +LD R0 , X +
000229 901d     +LD R1 , X +
00022a 918d     +LD R24 , X +
00022b 919c     +LD R25 , X
00022c 01d0     +MOVW R26 , R0
                 	__GETD2SX 138
00022d 940e 0699 	CALL __ADDF12
                +
00022f 01de     +MOVW R26 , R28
000230 57aa     +SUBI R26 , LOW ( - 134 )
000231 4fbf     +SBCI R27 , HIGH ( - 134 )
000232 900d     +LD R0 , X +
000233 901d     +LD R1 , X +
000234 918d     +LD R24 , X +
000235 919c     +LD R25 , X
000236 01d0     +MOVW R26 , R0
                 	__GETD2SX 134
000237 940e 0699 	CALL __ADDF12
000239 940e 0628 	CALL __CFD1
00023b 018f      	MOVW R16,R30
                 ; 0000 0088 
                 ; 0000 0089     //sprintf(BUFF, "pErr=%d, integral=%d, dErr=%d, MV=%d  Err=%d\r\n", (int)pErr, *integral, dErr, MV, (int)Err);
                 ; 0000 008A     //string_tx1(BUFF);
                 ; 0000 008B 
                 ; 0000 008C     *Err_previous = Err;
00023c 940e 058f 	CALL SUBOPT_0x1
                +
00023e 01de     +MOVW R26 , R28
00023f 57a2     +SUBI R26 , LOW ( - 142 )
000240 4fbf     +SBCI R27 , HIGH ( - 142 )
000241 900d     +LD R0 , X +
000242 91bc     +LD R27 , X
000243 2da0     +MOV R26 , R0
                 	__GETW2SX 142
000244 940e 077b 	CALL __PUTDP1
                 ; 0000 008D 
                 ; 0000 008E     return MV;
000246 01f8      	MOVW R30,R16
000247 8119      	LDD  R17,Y+1
000248 8108      	LDD  R16,Y+0
000249 96ef      	ADIW R28,63
00024a 96ef      	ADIW R28,63
00024b 966a      	ADIW R28,26
00024c 9508      	RET
                 ; 0000 008F }
                 ;
                 ;void producePWM(int OCR_val, unsigned int OCR_SET)
                 ; 0000 0092 {
                 _producePWM:
                 ; 0000 0093     if(OCR_val < 0)
                 ;	OCR_val -> Y+2
                 ;	OCR_SET -> Y+0
00024d 81ab      	LDD  R26,Y+3
00024e 23aa      	TST  R26
00024f f41a      	BRPL _0x31
                 ; 0000 0094     {
                 ; 0000 0095         MOTOR1_DIRECTION = 1;
000250 9ac4      	SBI  0x18,4
                 ; 0000 0096         MOTOR2_DIRECTION = 1;
000251 9ac3      	SBI  0x18,3
                 ; 0000 0097 
                 ; 0000 0098         OCR1B = OCR_SET;
000252 c005      	RJMP _0x4D
                 ; 0000 0099         OCR1CH = (OCR_SET & 0xFF00) >> 8;
                 ; 0000 009A         OCR1CL = 0x00FF & (OCR_SET);
                 ; 0000 009B     }
                 ; 0000 009C     else if(OCR_val >= 0)
                 _0x31:
000253 81ab      	LDD  R26,Y+3
000254 23aa      	TST  R26
000255 f072      	BRMI _0x37
                 ; 0000 009D     {
                 ; 0000 009E         MOTOR1_DIRECTION = 0;
000256 98c4      	CBI  0x18,4
                 ; 0000 009F         MOTOR2_DIRECTION = 0;
000257 98c3      	CBI  0x18,3
                 ; 0000 00A0 
                 ; 0000 00A1         OCR1B = OCR_SET;
                 _0x4D:
000258 81e8      	LD   R30,Y
000259 81f9      	LDD  R31,Y+1
00025a bdf9      	OUT  0x28+1,R31
00025b bde8      	OUT  0x28,R30
                 ; 0000 00A2         OCR1CH = (OCR_SET & 0xFF00) >> 8;
00025c 70e0      	ANDI R30,LOW(0xFF00)
00025d 2fef      	MOV  R30,R31
00025e e0f0      	LDI  R31,0
00025f 93e0 0079 	STS  121,R30
                 ; 0000 00A3         OCR1CL = 0x00FF & (OCR_SET);
000261 81e8      	LD   R30,Y
000262 93e0 0078 	STS  120,R30
                 ; 0000 00A4     }
                 ; 0000 00A5 }
                 _0x37:
000264 9624      	ADIW R28,4
000265 9508      	RET
                 ;
                 ;interrupt [TIM2_OVF] void timer2_overflow(void)
                 ; 0000 00A8 {
                 _timer2_overflow:
000266 93ea      	ST   -Y,R30
000267 b7ef      	IN   R30,SREG
000268 93ea      	ST   -Y,R30
                 ; 0000 00A9     tick += 255;
000269 efef      	LDI  R30,LOW(255)
00026a 0e9e      	ADD  R9,R30
                 ; 0000 00AA }
00026b 91e9      	LD   R30,Y+
00026c bfef      	OUT  SREG,R30
00026d 91e9      	LD   R30,Y+
00026e 9518      	RETI
                 ;
                 ;interrupt [USART1_RXC]void int_USART1(void)
                 ; 0000 00AD {
                 _int_USART1:
00026f 93ea      	ST   -Y,R30
000270 93fa      	ST   -Y,R31
000271 b7ef      	IN   R30,SREG
000272 93ea      	ST   -Y,R30
                 ; 0000 00AE     BUFF = UDR1;
000273 9060 009c 	LDS  R6,156
                 ; 0000 00AF 
                 ; 0000 00B0     if(BUFF != 0x0a)
000275 e0ea      	LDI  R30,LOW(10)
000276 15e6      	CP   R30,R6
000277 f041      	BREQ _0x3C
                 ; 0000 00B1     {
                 ; 0000 00B2         SET_RXC1 = 0;
000278 2444      	CLR  R4
                 ; 0000 00B3         RXC_BUFF[RXC_index] = BUFF;
000279 2de5      	MOV  R30,R5
00027a e0f0      	LDI  R31,0
00027b 5fec      	SUBI R30,LOW(-_RXC_BUFF)
00027c 4ffa      	SBCI R31,HIGH(-_RXC_BUFF)
00027d 8260      	ST   Z,R6
                 ; 0000 00B4         RXC_index++;
00027e 9453      	INC  R5
                 ; 0000 00B5     }
                 ; 0000 00B6     else
00027f c003      	RJMP _0x3D
                 _0x3C:
                 ; 0000 00B7     {
                 ; 0000 00B8         RXC_index = 0;
000280 2455      	CLR  R5
                 ; 0000 00B9         SET_RXC1 = 1;
000281 e0e1      	LDI  R30,LOW(1)
000282 2e4e      	MOV  R4,R30
                 ; 0000 00BA     }
                 _0x3D:
                 ; 0000 00BB }
000283 91e9      	LD   R30,Y+
000284 bfef      	OUT  SREG,R30
000285 91f9      	LD   R31,Y+
000286 91e9      	LD   R30,Y+
000287 9518      	RETI
                 ;
                 ;interrupt [EXT_INT5] void hall_sensor_detection1(void)
                 ; 0000 00BE {
                 _hall_sensor_detection1:
000288 940e 059f 	CALL SUBOPT_0x3
                 ; 0000 00BF     if(HALLA != HALLB) hall_sensor_value--;
00028a e0a0      	LDI  R26,0
00028b 990d      	SBIC 0x1,5
00028c e0a1      	LDI  R26,1
00028d e0e0      	LDI  R30,0
00028e 990e      	SBIC 0x1,6
00028f e0e1      	LDI  R30,1
000290 17ea      	CP   R30,R26
000291 f029      	BREQ _0x3E
000292 940e 05a8 	CALL SUBOPT_0x4
000294 940e 05ad 	CALL SUBOPT_0x5
                 ; 0000 00C0     else hall_sensor_value++;
000296 c004      	RJMP _0x3F
                 _0x3E:
000297 940e 05a8 	CALL SUBOPT_0x4
000299 940e 05b7 	CALL SUBOPT_0x6
                 ; 0000 00C1 }
                 _0x3F:
00029b c027      	RJMP _0x4E
                 ;
                 ;interrupt [EXT_INT6] void hall_sensor_detection2(void)
                 ; 0000 00C4 {
                 _hall_sensor_detection2:
00029c 940e 059f 	CALL SUBOPT_0x3
                 ; 0000 00C5     if(HALLB != HALLC) hall_sensor_value--;
00029e e0a0      	LDI  R26,0
00029f 990e      	SBIC 0x1,6
0002a0 e0a1      	LDI  R26,1
0002a1 e0e0      	LDI  R30,0
0002a2 990f      	SBIC 0x1,7
0002a3 e0e1      	LDI  R30,1
0002a4 17ea      	CP   R30,R26
0002a5 f029      	BREQ _0x40
0002a6 940e 05a8 	CALL SUBOPT_0x4
0002a8 940e 05ad 	CALL SUBOPT_0x5
                 ; 0000 00C6     else hall_sensor_value++;
0002aa c004      	RJMP _0x41
                 _0x40:
0002ab 940e 05a8 	CALL SUBOPT_0x4
0002ad 940e 05b7 	CALL SUBOPT_0x6
                 ; 0000 00C7 }
                 _0x41:
0002af c013      	RJMP _0x4E
                 ;
                 ;interrupt [EXT_INT7] void hall_sensor_detection3(void)
                 ; 0000 00CA {
                 _hall_sensor_detection3:
0002b0 940e 059f 	CALL SUBOPT_0x3
                 ; 0000 00CB     if(HALLC != HALLA) hall_sensor_value--;
0002b2 e0a0      	LDI  R26,0
0002b3 990f      	SBIC 0x1,7
0002b4 e0a1      	LDI  R26,1
0002b5 e0e0      	LDI  R30,0
0002b6 990d      	SBIC 0x1,5
0002b7 e0e1      	LDI  R30,1
0002b8 17ea      	CP   R30,R26
0002b9 f029      	BREQ _0x42
0002ba 940e 05a8 	CALL SUBOPT_0x4
0002bc 940e 05ad 	CALL SUBOPT_0x5
                 ; 0000 00CC     else hall_sensor_value++;
0002be c004      	RJMP _0x43
                 _0x42:
0002bf 940e 05a8 	CALL SUBOPT_0x4
0002c1 940e 05b7 	CALL SUBOPT_0x6
                 ; 0000 00CD }
                 _0x43:
                 _0x4E:
0002c3 91e9      	LD   R30,Y+
0002c4 bfef      	OUT  SREG,R30
0002c5 91f9      	LD   R31,Y+
0002c6 91e9      	LD   R30,Y+
0002c7 91b9      	LD   R27,Y+
0002c8 91a9      	LD   R26,Y+
0002c9 9179      	LD   R23,Y+
0002ca 9169      	LD   R22,Y+
0002cb 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 00D0 {
                 _main:
                 ; 0000 00D1     int i = 0;
                 ; 0000 00D2 
                 ; 0000 00D3     int Goal = 0;
                 ; 0000 00D4     float Err = 0;
                 ; 0000 00D5     float integral = 0;
                 ; 0000 00D6     float now = 0;
                 ; 0000 00D7 
                 ; 0000 00D8     unsigned int current_time = 0;
                 ; 0000 00D9     char BUFF[128]={0,};
                 ; 0000 00DA 
                 ; 0000 00DB     //Controll Volume
                 ; 0000 00DC     int OCR_val = 0;
                 ; 0000 00DD     unsigned int OCR_SET = 0;
                 ; 0000 00DE 
                 ; 0000 00DF     USART1_init();
0002cc 97ef      	SBIW R28,63
0002cd 97ef      	SBIW R28,63
0002ce 9762      	SBIW R28,18
0002cf e980      	LDI  R24,144
0002d0 e0a0      	LDI  R26,LOW(0)
0002d1 e0b0      	LDI  R27,HIGH(0)
0002d2 e3e0      	LDI  R30,LOW(_0x44*2)
0002d3 e0f1      	LDI  R31,HIGH(_0x44*2)
0002d4 940e 07ae 	CALL __INITLOCB
                 ;	i -> R16,R17
                 ;	Goal -> R18,R19
                 ;	Err -> Y+140
                 ;	integral -> Y+136
                 ;	now -> Y+132
                 ;	current_time -> R20,R21
                 ;	BUFF -> Y+4
                 ;	OCR_val -> Y+2
                 ;	OCR_SET -> Y+0
                +
0002d6 e000     +LDI R16 , LOW ( 0 )
0002d7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0002d8 e020     +LDI R18 , LOW ( 0 )
0002d9 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0002da e040     +LDI R20 , LOW ( 0 )
0002db e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0002dc de67      	RCALL _USART1_init
                 ; 0000 00E0     TIMER_init();
0002dd de98      	RCALL _TIMER_init
                 ; 0000 00E1     GPIO_SETUP();
0002de de5a      	RCALL _GPIO_SETUP
                 ; 0000 00E2     EXT_INT_init();
0002df de8e      	RCALL _EXT_INT_init
                 ; 0000 00E3 
                 ; 0000 00E4     SREG |= 0x80;
0002e0 9478      	BSET 7
                 ; 0000 00E5 
                 ; 0000 00E6     while(1)
                 _0x45:
                 ; 0000 00E7     {
                 ; 0000 00E8         if(SET_RXC1)
0002e1 2044      	TST  R4
0002e2 f041      	BREQ _0x48
                 ; 0000 00E9         {
                 ; 0000 00EA             Goal = atoi(RXC_BUFF);
0002e3 e0e4      	LDI  R30,LOW(_RXC_BUFF)
0002e4 e0f5      	LDI  R31,HIGH(_RXC_BUFF)
0002e5 93fa      	ST   -Y,R31
0002e6 93ea      	ST   -Y,R30
0002e7 940e 0530 	CALL _atoi
0002e9 019f      	MOVW R18,R30
                 ; 0000 00EB             SET_RXC1 = 0;
0002ea 2444      	CLR  R4
                 ; 0000 00EC         }
                 ; 0000 00ED         for(i = 0; i<20; i++)
                 _0x48:
                +
0002eb e000     +LDI R16 , LOW ( 0 )
0002ec e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4A:
                +
0002ed 3104     +CPI R16 , LOW ( 20 )
0002ee e0e0     +LDI R30 , HIGH ( 20 )
0002ef 071e     +CPC R17 , R30
                 	__CPWRN 16,17,20
0002f0 f44c      	BRGE _0x4B
                 ; 0000 00EE         {
                 ; 0000 00EF             RXC_BUFF[i] = 0;
0002f1 e0a4      	LDI  R26,LOW(_RXC_BUFF)
0002f2 e0b5      	LDI  R27,HIGH(_RXC_BUFF)
0002f3 0fa0      	ADD  R26,R16
0002f4 1fb1      	ADC  R27,R17
0002f5 e0e0      	LDI  R30,LOW(0)
0002f6 93ec      	ST   X,R30
                 ; 0000 00F0         }
                +
0002f7 5f0f     +SUBI R16 , LOW ( - 1 )
0002f8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002f9 cff3      	RJMP _0x4A
                 _0x4B:
                 ; 0000 00F1 
                 ; 0000 00F2         now = (7.5*hall_sensor_value);
0002fa 91e0 0500 	LDS  R30,_hall_sensor_value
0002fc 91f0 0501 	LDS  R31,_hall_sensor_value+1
0002fe 9160 0502 	LDS  R22,_hall_sensor_value+2
000300 9170 0503 	LDS  R23,_hall_sensor_value+3
000302 940e 065f 	CALL __CDF1
                +
000304 e0a0     +LDI R26 , LOW ( 0x40F00000 )
000305 e0b0     +LDI R27 , HIGH ( 0x40F00000 )
000306 ef80     +LDI R24 , BYTE3 ( 0x40F00000 )
000307 e490     +LDI R25 , BYTE4 ( 0x40F00000 )
                 	__GETD2N 0x40F00000
000308 940e 06e9 	CALL __MULF12
                +
00030a 01de     +MOVW R26 , R28
00030b 57ac     +SUBI R26 , LOW ( - 132 )
00030c 4fbf     +SBCI R27 , HIGH ( - 132 )
00030d 93ed     +ST X + , R30
00030e 93fd     +ST X + , R31
00030f 936d     +ST X + , R22
000310 937c     +ST X , R23
                 	__PUTD1SX 132
                 ; 0000 00F3         OCR_val = PID_Controller(Goal, now, &integral, &Err);
000311 933a      	ST   -Y,R19
000312 932a      	ST   -Y,R18
                +
000313 01fe     +MOVW R30 , R28
000314 57ea     +SUBI R30 , LOW ( - 134 )
000315 4fff     +SBCI R31 , HIGH ( - 134 )
000316 9001     +LD R0 , Z +
000317 9011     +LD R1 , Z +
000318 9161     +LD R22 , Z +
000319 8170     +LD R23 , Z
00031a 01f0     +MOVW R30 , R0
                 	__GETD1SX 134
00031b 940e 0789 	CALL __PUTPARD1
00031d 01fe      	MOVW R30,R28
00031e 57e2      	SUBI R30,LOW(-(142))
00031f 4fff      	SBCI R31,HIGH(-(142))
000320 93fa      	ST   -Y,R31
000321 93ea      	ST   -Y,R30
000322 01fe      	MOVW R30,R28
000323 56ec      	SUBI R30,LOW(-(148))
000324 4fff      	SBCI R31,HIGH(-(148))
000325 93fa      	ST   -Y,R31
000326 93ea      	ST   -Y,R30
000327 de93      	RCALL _PID_Controller
000328 83ea      	STD  Y+2,R30
000329 83fb      	STD  Y+2+1,R31
                 ; 0000 00F4         OCR_SET = MV_Rebuilding(-600, 600, OCR_val);
00032a eae8      	LDI  R30,LOW(64936)
00032b effd      	LDI  R31,HIGH(64936)
00032c 93fa      	ST   -Y,R31
00032d 93ea      	ST   -Y,R30
00032e e5e8      	LDI  R30,LOW(600)
00032f e0f2      	LDI  R31,HIGH(600)
000330 93fa      	ST   -Y,R31
000331 93ea      	ST   -Y,R30
000332 940e 05c1 	CALL SUBOPT_0x7
000334 de59      	RCALL _MV_Rebuilding
000335 83e8      	ST   Y,R30
000336 83f9      	STD  Y+1,R31
                 ; 0000 00F5         producePWM(OCR_val, OCR_SET);
000337 81ea      	LDD  R30,Y+2
000338 81fb      	LDD  R31,Y+2+1
000339 93fa      	ST   -Y,R31
00033a 93ea      	ST   -Y,R30
00033b 81ea      	LDD  R30,Y+2
00033c 81fb      	LDD  R31,Y+2+1
00033d 93fa      	ST   -Y,R31
00033e 93ea      	ST   -Y,R30
00033f df0d      	RCALL _producePWM
                 ; 0000 00F6 
                 ; 0000 00F7 
                 ; 0000 00F8         tick += TCNT2;
000340 b5e4      	IN   R30,0x24
000341 0e9e      	ADD  R9,R30
                 ; 0000 00F9         TCNT2 = 0;
000342 e0e0      	LDI  R30,LOW(0)
000343 bde4      	OUT  0x24,R30
                 ; 0000 00FA         Time = 0.000069*tick;
000344 2de9      	MOV  R30,R9
000345 e0f0      	LDI  R31,0
000346 940e 0747 	CALL __CWD1
000348 940e 065f 	CALL __CDF1
                +
00034a e1a8     +LDI R26 , LOW ( 0x3890B418 )
00034b ebb4     +LDI R27 , HIGH ( 0x3890B418 )
00034c e980     +LDI R24 , BYTE3 ( 0x3890B418 )
00034d e398     +LDI R25 , BYTE4 ( 0x3890B418 )
                 	__GETD2N 0x3890B418
00034e 940e 06e9 	CALL __MULF12
000350 93e0 0518 	STS  _Time,R30
000352 93f0 0519 	STS  _Time+1,R31
000354 9360 051a 	STS  _Time+2,R22
000356 9370 051b 	STS  _Time+3,R23
                 ; 0000 00FB         sprintf(BUFF, "Goal=%d, current=%d, Err=%d \r\n", Goal, (int)now, (int)Err);
000358 01fe      	MOVW R30,R28
000359 9634      	ADIW R30,4
00035a 93fa      	ST   -Y,R31
00035b 93ea      	ST   -Y,R30
                +
00035c ece6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00035d e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00035e 93fa      	ST   -Y,R31
00035f 93ea      	ST   -Y,R30
000360 01f9      	MOVW R30,R18
000361 940e 05c6 	CALL SUBOPT_0x8
                +
000363 01fe     +MOVW R30 , R28
000364 57e4     +SUBI R30 , LOW ( - 140 )
000365 4fff     +SBCI R31 , HIGH ( - 140 )
000366 9001     +LD R0 , Z +
000367 9011     +LD R1 , Z +
000368 9161     +LD R22 , Z +
000369 8170     +LD R23 , Z
00036a 01f0     +MOVW R30 , R0
                 	__GETD1SX 140
00036b 940e 0628 	CALL __CFD1
00036d 940e 05c6 	CALL SUBOPT_0x8
                +
00036f 01fe     +MOVW R30 , R28
000370 56e8     +SUBI R30 , LOW ( - 152 )
000371 4fff     +SBCI R31 , HIGH ( - 152 )
000372 9001     +LD R0 , Z +
000373 9011     +LD R1 , Z +
000374 9161     +LD R22 , Z +
000375 8170     +LD R23 , Z
000376 01f0     +MOVW R30 , R0
                 	__GETD1SX 152
000377 940e 0628 	CALL __CFD1
000379 940e 05c6 	CALL SUBOPT_0x8
00037b e08c      	LDI  R24,12
00037c 940e 04fa 	CALL _sprintf
00037e 9660      	ADIW R28,16
                 ; 0000 00FC         string_tx1(BUFF);
00037f 01fe      	MOVW R30,R28
000380 9634      	ADIW R30,4
000381 93fa      	ST   -Y,R31
000382 93ea      	ST   -Y,R30
000383 dddd      	RCALL _string_tx1
                 ; 0000 00FD 
                 ; 0000 00FE         tick = 0;
000384 2499      	CLR  R9
                 ; 0000 00FF     }
000385 cf5b      	RJMP _0x45
                 ; 0000 0100 }
                 _0x4C:
000386 cfff      	RJMP _0x4C
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
000387 931a      	ST   -Y,R17
000388 930a      	ST   -Y,R16
000389 81aa      	LDD  R26,Y+2
00038a 81bb      	LDD  R27,Y+2+1
00038b 9612      	ADIW R26,2
00038c 940e 076c 	CALL __GETW1P
00038e 9730      	SBIW R30,0
00038f f159      	BREQ _0x2000010
000390 81aa      	LDD  R26,Y+2
000391 81bb      	LDD  R27,Y+2+1
000392 9614      	ADIW R26,4
000393 940e 076c 	CALL __GETW1P
000395 018f      	MOVW R16,R30
000396 9730      	SBIW R30,0
000397 f061      	BREQ _0x2000012
                +
000398 3002     +CPI R16 , LOW ( 2 )
000399 e0e0     +LDI R30 , HIGH ( 2 )
00039a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00039b f0f0      	BRLO _0x2000013
00039c 01f8      	MOVW R30,R16
00039d 9731      	SBIW R30,1
00039e 018f      	MOVW R16,R30
                +
00039f 81aa     +LDD R26 , Y + 2
0003a0 81bb     +LDD R27 , Y + 2 + 1
0003a1 9614     +ADIW R26 , 4
0003a2 93ed     +ST X + , R30
0003a3 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0003a4 81aa      	LDD  R26,Y+2
0003a5 81bb      	LDD  R27,Y+2+1
0003a6 9612      	ADIW R26,2
0003a7 91ed      	LD   R30,X+
0003a8 91fd      	LD   R31,X+
0003a9 9631      	ADIW R30,1
0003aa 93fe      	ST   -X,R31
0003ab 93ee      	ST   -X,R30
0003ac 9731      	SBIW R30,1
0003ad 81ac      	LDD  R26,Y+4
0003ae 83a0      	STD  Z+0,R26
0003af 81aa      	LDD  R26,Y+2
0003b0 81bb      	LDD  R27,Y+2+1
0003b1 940e 076c 	CALL __GETW1P
0003b3 23ff      	TST  R31
0003b4 f02a      	BRMI _0x2000014
0003b5 91ed      	LD   R30,X+
0003b6 91fd      	LD   R31,X+
0003b7 9631      	ADIW R30,1
0003b8 93fe      	ST   -X,R31
0003b9 93ee      	ST   -X,R30
                 _0x2000014:
                 _0x2000013:
0003ba c006      	RJMP _0x2000015
                 _0x2000010:
0003bb 81aa      	LDD  R26,Y+2
0003bc 81bb      	LDD  R27,Y+2+1
0003bd efef      	LDI  R30,LOW(65535)
0003be efff      	LDI  R31,HIGH(65535)
0003bf 93ed      	ST   X+,R30
0003c0 93fc      	ST   X,R31
                 _0x2000015:
0003c1 8119      	LDD  R17,Y+1
0003c2 8108      	LDD  R16,Y+0
0003c3 9625      	ADIW R28,5
0003c4 9508      	RET
                 __print_G100:
0003c5 9726      	SBIW R28,6
0003c6 940e 07a0 	CALL __SAVELOCR6
0003c8 e010      	LDI  R17,0
0003c9 85ac      	LDD  R26,Y+12
0003ca 85bd      	LDD  R27,Y+12+1
0003cb e0e0      	LDI  R30,LOW(0)
0003cc e0f0      	LDI  R31,HIGH(0)
0003cd 93ed      	ST   X+,R30
0003ce 93fc      	ST   X,R31
                 _0x2000016:
0003cf 89ea      	LDD  R30,Y+18
0003d0 89fb      	LDD  R31,Y+18+1
0003d1 9631      	ADIW R30,1
0003d2 8bea      	STD  Y+18,R30
0003d3 8bfb      	STD  Y+18+1,R31
0003d4 9731      	SBIW R30,1
0003d5 91e4      	LPM  R30,Z
0003d6 2f2e      	MOV  R18,R30
0003d7 30e0      	CPI  R30,0
0003d8 f411      	BRNE PC+3
0003d9 940c 04f2 	JMP _0x2000018
0003db 2fe1      	MOV  R30,R17
0003dc 30e0      	CPI  R30,0
0003dd f439      	BRNE _0x200001C
0003de 3225      	CPI  R18,37
0003df f411      	BRNE _0x200001D
0003e0 e011      	LDI  R17,LOW(1)
0003e1 c002      	RJMP _0x200001E
                 _0x200001D:
0003e2 940e 05cb 	CALL SUBOPT_0x9
                 _0x200001E:
0003e4 c10c      	RJMP _0x200001B
                 _0x200001C:
0003e5 30e1      	CPI  R30,LOW(0x1)
0003e6 f4a9      	BRNE _0x200001F
0003e7 3225      	CPI  R18,37
0003e8 f419      	BRNE _0x2000020
0003e9 940e 05cb 	CALL SUBOPT_0x9
0003eb c104      	RJMP _0x20000C9
                 _0x2000020:
0003ec e012      	LDI  R17,LOW(2)
0003ed e040      	LDI  R20,LOW(0)
0003ee e000      	LDI  R16,LOW(0)
0003ef 322d      	CPI  R18,45
0003f0 f411      	BRNE _0x2000021
0003f1 e001      	LDI  R16,LOW(1)
0003f2 c0fe      	RJMP _0x200001B
                 _0x2000021:
0003f3 322b      	CPI  R18,43
0003f4 f411      	BRNE _0x2000022
0003f5 e24b      	LDI  R20,LOW(43)
0003f6 c0fa      	RJMP _0x200001B
                 _0x2000022:
0003f7 3220      	CPI  R18,32
0003f8 f411      	BRNE _0x2000023
0003f9 e240      	LDI  R20,LOW(32)
0003fa c0f6      	RJMP _0x200001B
                 _0x2000023:
0003fb c002      	RJMP _0x2000024
                 _0x200001F:
0003fc 30e2      	CPI  R30,LOW(0x2)
0003fd f439      	BRNE _0x2000025
                 _0x2000024:
0003fe e050      	LDI  R21,LOW(0)
0003ff e013      	LDI  R17,LOW(3)
000400 3320      	CPI  R18,48
000401 f411      	BRNE _0x2000026
000402 6800      	ORI  R16,LOW(128)
000403 c0ed      	RJMP _0x200001B
                 _0x2000026:
000404 c004      	RJMP _0x2000027
                 _0x2000025:
000405 30e3      	CPI  R30,LOW(0x3)
000406 f011      	BREQ PC+3
000407 940c 04f1 	JMP _0x200001B
                 _0x2000027:
000409 3320      	CPI  R18,48
00040a f010      	BRLO _0x200002A
00040b 332a      	CPI  R18,58
00040c f008      	BRLO _0x200002B
                 _0x200002A:
00040d c007      	RJMP _0x2000029
                 _0x200002B:
00040e e0aa      	LDI  R26,LOW(10)
00040f 9f5a      	MUL  R21,R26
000410 2d50      	MOV  R21,R0
000411 2fe2      	MOV  R30,R18
000412 53e0      	SUBI R30,LOW(48)
000413 0f5e      	ADD  R21,R30
000414 c0dc      	RJMP _0x200001B
                 _0x2000029:
000415 2fe2      	MOV  R30,R18
000416 36e3      	CPI  R30,LOW(0x63)
000417 f449      	BRNE _0x200002F
000418 940e 05d4 	CALL SUBOPT_0xA
00041a 89e8      	LDD  R30,Y+16
00041b 89f9      	LDD  R31,Y+16+1
00041c 81a4      	LDD  R26,Z+4
00041d 93aa      	ST   -Y,R26
00041e 940e 05da 	CALL SUBOPT_0xB
000420 c0cf      	RJMP _0x2000030
                 _0x200002F:
000421 37e3      	CPI  R30,LOW(0x73)
000422 f441      	BRNE _0x2000032
000423 940e 05d4 	CALL SUBOPT_0xA
000425 940e 05e2 	CALL SUBOPT_0xC
000427 940e 0573 	CALL _strlen
000429 2f1e      	MOV  R17,R30
00042a c00a      	RJMP _0x2000033
                 _0x2000032:
00042b 37e0      	CPI  R30,LOW(0x70)
00042c f461      	BRNE _0x2000035
00042d 940e 05d4 	CALL SUBOPT_0xA
00042f 940e 05e2 	CALL SUBOPT_0xC
000431 940e 057d 	CALL _strlenf
000433 2f1e      	MOV  R17,R30
000434 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000435 6002      	ORI  R16,LOW(2)
000436 770f      	ANDI R16,LOW(127)
000437 e030      	LDI  R19,LOW(0)
000438 c035      	RJMP _0x2000036
                 _0x2000035:
000439 36e4      	CPI  R30,LOW(0x64)
00043a f011      	BREQ _0x2000039
00043b 36e9      	CPI  R30,LOW(0x69)
00043c f411      	BRNE _0x200003A
                 _0x2000039:
00043d 6004      	ORI  R16,LOW(4)
00043e c002      	RJMP _0x200003B
                 _0x200003A:
00043f 37e5      	CPI  R30,LOW(0x75)
000440 f431      	BRNE _0x200003C
                 _0x200003B:
000441 e8ec      	LDI  R30,LOW(_tbl10_G100*2)
000442 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000443 83ee      	STD  Y+6,R30
000444 83ff      	STD  Y+6+1,R31
000445 e015      	LDI  R17,LOW(5)
000446 c00d      	RJMP _0x200003D
                 _0x200003C:
000447 35e8      	CPI  R30,LOW(0x58)
000448 f411      	BRNE _0x200003F
000449 6008      	ORI  R16,LOW(8)
00044a c004      	RJMP _0x2000040
                 _0x200003F:
00044b 37e8      	CPI  R30,LOW(0x78)
00044c f011      	BREQ PC+3
00044d 940c 04f0 	JMP _0x2000071
                 _0x2000040:
00044f e9e6      	LDI  R30,LOW(_tbl16_G100*2)
000450 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000451 83ee      	STD  Y+6,R30
000452 83ff      	STD  Y+6+1,R31
000453 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000454 ff02      	SBRS R16,2
000455 c014      	RJMP _0x2000042
000456 940e 05d4 	CALL SUBOPT_0xA
000458 940e 05ea 	CALL SUBOPT_0xD
00045a 85ab      	LDD  R26,Y+11
00045b 23aa      	TST  R26
00045c f43a      	BRPL _0x2000043
00045d 85ea      	LDD  R30,Y+10
00045e 85fb      	LDD  R31,Y+10+1
00045f 940e 073b 	CALL __ANEGW1
000461 87ea      	STD  Y+10,R30
000462 87fb      	STD  Y+10+1,R31
000463 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000464 3040      	CPI  R20,0
000465 f011      	BREQ _0x2000044
000466 5f1f      	SUBI R17,-LOW(1)
000467 c001      	RJMP _0x2000045
                 _0x2000044:
000468 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000469 c004      	RJMP _0x2000046
                 _0x2000042:
00046a 940e 05d4 	CALL SUBOPT_0xA
00046c 940e 05ea 	CALL SUBOPT_0xD
                 _0x2000046:
                 _0x2000036:
00046e fd00      	SBRC R16,0
00046f c011      	RJMP _0x2000047
                 _0x2000048:
000470 1715      	CP   R17,R21
000471 f478      	BRSH _0x200004A
000472 ff07      	SBRS R16,7
000473 c008      	RJMP _0x200004B
000474 ff02      	SBRS R16,2
000475 c004      	RJMP _0x200004C
000476 7f0b      	ANDI R16,LOW(251)
000477 2f24      	MOV  R18,R20
000478 5011      	SUBI R17,LOW(1)
000479 c001      	RJMP _0x200004D
                 _0x200004C:
00047a e320      	LDI  R18,LOW(48)
                 _0x200004D:
00047b c001      	RJMP _0x200004E
                 _0x200004B:
00047c e220      	LDI  R18,LOW(32)
                 _0x200004E:
00047d 940e 05cb 	CALL SUBOPT_0x9
00047f 5051      	SUBI R21,LOW(1)
000480 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000481 2f31      	MOV  R19,R17
000482 ff01      	SBRS R16,1
000483 c017      	RJMP _0x200004F
                 _0x2000050:
000484 3030      	CPI  R19,0
000485 f0a1      	BREQ _0x2000052
000486 ff03      	SBRS R16,3
000487 c006      	RJMP _0x2000053
000488 81ee      	LDD  R30,Y+6
000489 81ff      	LDD  R31,Y+6+1
00048a 9125      	LPM  R18,Z+
00048b 83ee      	STD  Y+6,R30
00048c 83ff      	STD  Y+6+1,R31
00048d c005      	RJMP _0x2000054
                 _0x2000053:
00048e 81ae      	LDD  R26,Y+6
00048f 81bf      	LDD  R27,Y+6+1
000490 912d      	LD   R18,X+
000491 83ae      	STD  Y+6,R26
000492 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000493 940e 05cb 	CALL SUBOPT_0x9
000495 3050      	CPI  R21,0
000496 f009      	BREQ _0x2000055
000497 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000498 5031      	SUBI R19,LOW(1)
000499 cfea      	RJMP _0x2000050
                 _0x2000052:
00049a c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00049b e320      	LDI  R18,LOW(48)
00049c 81ee      	LDD  R30,Y+6
00049d 81ff      	LDD  R31,Y+6+1
00049e 940e 0785 	CALL __GETW1PF
0004a0 87e8      	STD  Y+8,R30
0004a1 87f9      	STD  Y+8+1,R31
0004a2 81ee      	LDD  R30,Y+6
0004a3 81ff      	LDD  R31,Y+6+1
0004a4 9632      	ADIW R30,2
0004a5 83ee      	STD  Y+6,R30
0004a6 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0004a7 85e8      	LDD  R30,Y+8
0004a8 85f9      	LDD  R31,Y+8+1
0004a9 85aa      	LDD  R26,Y+10
0004aa 85bb      	LDD  R27,Y+10+1
0004ab 17ae      	CP   R26,R30
0004ac 07bf      	CPC  R27,R31
0004ad f050      	BRLO _0x200005C
0004ae 5f2f      	SUBI R18,-LOW(1)
0004af 85a8      	LDD  R26,Y+8
0004b0 85b9      	LDD  R27,Y+8+1
0004b1 85ea      	LDD  R30,Y+10
0004b2 85fb      	LDD  R31,Y+10+1
0004b3 1bea      	SUB  R30,R26
0004b4 0bfb      	SBC  R31,R27
0004b5 87ea      	STD  Y+10,R30
0004b6 87fb      	STD  Y+10+1,R31
0004b7 cfef      	RJMP _0x200005A
                 _0x200005C:
0004b8 332a      	CPI  R18,58
0004b9 f028      	BRLO _0x200005D
0004ba ff03      	SBRS R16,3
0004bb c002      	RJMP _0x200005E
0004bc 5f29      	SUBI R18,-LOW(7)
0004bd c001      	RJMP _0x200005F
                 _0x200005E:
0004be 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0004bf fd04      	SBRC R16,4
0004c0 c01a      	RJMP _0x2000061
0004c1 3321      	CPI  R18,49
0004c2 f420      	BRSH _0x2000063
0004c3 85a8      	LDD  R26,Y+8
0004c4 85b9      	LDD  R27,Y+8+1
0004c5 9711      	SBIW R26,1
0004c6 f409      	BRNE _0x2000062
                 _0x2000063:
0004c7 c009      	RJMP _0x20000CA
                 _0x2000062:
0004c8 1753      	CP   R21,R19
0004c9 f010      	BRLO _0x2000067
0004ca ff00      	SBRS R16,0
0004cb c001      	RJMP _0x2000068
                 _0x2000067:
0004cc c013      	RJMP _0x2000066
                 _0x2000068:
0004cd e220      	LDI  R18,LOW(32)
0004ce ff07      	SBRS R16,7
0004cf c00b      	RJMP _0x2000069
0004d0 e320      	LDI  R18,LOW(48)
                 _0x20000CA:
0004d1 6100      	ORI  R16,LOW(16)
0004d2 ff02      	SBRS R16,2
0004d3 c007      	RJMP _0x200006A
0004d4 7f0b      	ANDI R16,LOW(251)
0004d5 934a      	ST   -Y,R20
0004d6 940e 05da 	CALL SUBOPT_0xB
0004d8 3050      	CPI  R21,0
0004d9 f009      	BREQ _0x200006B
0004da 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0004db 940e 05cb 	CALL SUBOPT_0x9
0004dd 3050      	CPI  R21,0
0004de f009      	BREQ _0x200006C
0004df 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0004e0 5031      	SUBI R19,LOW(1)
0004e1 85a8      	LDD  R26,Y+8
0004e2 85b9      	LDD  R27,Y+8+1
0004e3 9712      	SBIW R26,2
0004e4 f008      	BRLO _0x2000059
0004e5 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0004e6 ff00      	SBRS R16,0
0004e7 c008      	RJMP _0x200006D
                 _0x200006E:
0004e8 3050      	CPI  R21,0
0004e9 f031      	BREQ _0x2000070
0004ea 5051      	SUBI R21,LOW(1)
0004eb e2e0      	LDI  R30,LOW(32)
0004ec 93ea      	ST   -Y,R30
0004ed 940e 05da 	CALL SUBOPT_0xB
0004ef cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
0004f0 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0004f1 cedd      	RJMP _0x2000016
                 _0x2000018:
0004f2 85ac      	LDD  R26,Y+12
0004f3 85bd      	LDD  R27,Y+12+1
0004f4 940e 076c 	CALL __GETW1P
0004f6 940e 07a7 	CALL __LOADLOCR6
0004f8 9664      	ADIW R28,20
0004f9 9508      	RET
                 _sprintf:
0004fa 92ff      	PUSH R15
0004fb 2ef8      	MOV  R15,R24
0004fc 9726      	SBIW R28,6
0004fd 940e 07a2 	CALL __SAVELOCR4
0004ff 940e 05f2 	CALL SUBOPT_0xE
000501 9730      	SBIW R30,0
000502 f419      	BRNE _0x2000072
000503 efef      	LDI  R30,LOW(65535)
000504 efff      	LDI  R31,HIGH(65535)
000505 c025      	RJMP _0x20A0001
                 _0x2000072:
000506 01de      	MOVW R26,R28
000507 9616      	ADIW R26,6
000508 940e 0737 	CALL __ADDW2R15
00050a 018d      	MOVW R16,R26
00050b 940e 05f2 	CALL SUBOPT_0xE
00050d 83ee      	STD  Y+6,R30
00050e 83ff      	STD  Y+6+1,R31
00050f e0e0      	LDI  R30,LOW(0)
000510 87e8      	STD  Y+8,R30
000511 87e9      	STD  Y+8+1,R30
000512 01de      	MOVW R26,R28
000513 961a      	ADIW R26,10
000514 940e 0737 	CALL __ADDW2R15
000516 940e 076c 	CALL __GETW1P
000518 93fa      	ST   -Y,R31
000519 93ea      	ST   -Y,R30
00051a 931a      	ST   -Y,R17
00051b 930a      	ST   -Y,R16
00051c e8e7      	LDI  R30,LOW(_put_buff_G100)
00051d e0f3      	LDI  R31,HIGH(_put_buff_G100)
00051e 93fa      	ST   -Y,R31
00051f 93ea      	ST   -Y,R30
000520 01fe      	MOVW R30,R28
000521 963a      	ADIW R30,10
000522 93fa      	ST   -Y,R31
000523 93ea      	ST   -Y,R30
000524 dea0      	RCALL __print_G100
000525 019f      	MOVW R18,R30
000526 81ae      	LDD  R26,Y+6
000527 81bf      	LDD  R27,Y+6+1
000528 e0e0      	LDI  R30,LOW(0)
000529 93ec      	ST   X,R30
00052a 01f9      	MOVW R30,R18
                 _0x20A0001:
00052b 940e 07a9 	CALL __LOADLOCR4
00052d 962a      	ADIW R28,10
00052e 90ff      	POP  R15
00052f 9508      	RET
                 
                 	.CSEG
                 _atoi:
000530 81b9         	ldd  r27,y+1
000531 81a8         	ld   r26,y
                 __atoi0:
000532 91ec         	ld   r30,x
000533 93ea      	ST   -Y,R30
000534 940e 0569 	CALL _isspace
000536 23ee         	tst  r30
000537 f011         	breq __atoi1
000538 9611         	adiw r26,1
000539 cff8         	rjmp __atoi0
                 __atoi1:
00053a 94e8         	clt
00053b 91ec         	ld   r30,x
00053c 32ed         	cpi  r30,'-'
00053d f411         	brne __atoi2
00053e 9468         	set
00053f c002         	rjmp __atoi3
                 __atoi2:
000540 32eb         	cpi  r30,'+'
000541 f409         	brne __atoi4
                 __atoi3:
000542 9611         	adiw r26,1
                 __atoi4:
000543 2766         	clr  r22
000544 2777         	clr  r23
                 __atoi5:
000545 91ec         	ld   r30,x
000546 93ea      	ST   -Y,R30
000547 940e 0561 	CALL _isdigit
000549 23ee         	tst  r30
00054a f079         	breq __atoi6
00054b 01fb         	movw r30,r22
00054c 0f66         	lsl  r22
00054d 1f77         	rol  r23
00054e 0f66         	lsl  r22
00054f 1f77         	rol  r23
000550 0f6e         	add  r22,r30
000551 1f7f         	adc  r23,r31
000552 0f66         	lsl  r22
000553 1f77         	rol  r23
000554 91ed         	ld   r30,x+
000555 27ff         	clr  r31
000556 53e0         	subi r30,'0'
000557 0f6e         	add  r22,r30
000558 1f7f         	adc  r23,r31
000559 cfeb         	rjmp __atoi5
                 __atoi6:
00055a 01fb         	movw r30,r22
00055b f41e         	brtc __atoi7
00055c 95e0         	com  r30
00055d 95f0         	com  r31
00055e 9631         	adiw r30,1
                 __atoi7:
00055f 9622         	adiw r28,2
000560 9508         	ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _isdigit:
000561 e0e1          ldi  r30,1
000562 91f9          ld   r31,y+
000563 33f0          cpi  r31,'0'
000564 f010          brlo isdigit0
000565 33fa          cpi  r31,'9'+1
000566 f008          brlo isdigit1
                 isdigit0:
000567 27ee          clr  r30
                 isdigit1:
000568 9508          ret
                 _isspace:
000569 e0e1          ldi  r30,1
00056a 91f9          ld   r31,y+
00056b 32f0          cpi  r31,' '
00056c f029          breq isspace1
00056d 30f9          cpi  r31,9
00056e f010          brlo isspace0
00056f 30fe          cpi  r31,13+1
000570 f008          brlo isspace1
                 isspace0:
000571 27ee          clr  r30
                 isspace1:
000572 9508          ret
                 
                 	.CSEG
                 _strlen:
000573 91a9          ld   r26,y+
000574 91b9          ld   r27,y+
000575 27ee          clr  r30
000576 27ff          clr  r31
                 strlen0:
000577 916d          ld   r22,x+
000578 2366          tst  r22
000579 f011          breq strlen1
00057a 9631          adiw r30,1
00057b cffb          rjmp strlen0
                 strlen1:
00057c 9508          ret
                 _strlenf:
00057d 27aa          clr  r26
00057e 27bb          clr  r27
00057f 91e9          ld   r30,y+
000580 91f9          ld   r31,y+
                 strlenf0:
000581 9005      	lpm  r0,z+
000582 2000          tst  r0
000583 f011          breq strlenf1
000584 9611          adiw r26,1
000585 cffb          rjmp strlenf0
                 strlenf1:
000586 01fd          movw r30,r26
000587 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _hall_sensor_value:
000500           	.BYTE 0x4
                 _RXC_BUFF:
000504           	.BYTE 0x14
                 _Time:
000518           	.BYTE 0x4
                 __seed_G101:
00051c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000588 81ee      	LDD  R30,Y+6
000589 81ff      	LDD  R31,Y+6+1
00058a 81aa      	LDD  R26,Y+2
00058b 81bb      	LDD  R27,Y+2+1
00058c 17ea      	CP   R30,R26
00058d 07fb      	CPC  R31,R27
00058e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
                +
00058f 01fe     +MOVW R30 , R28
000590 57ee     +SUBI R30 , LOW ( - 130 )
000591 4fff     +SBCI R31 , HIGH ( - 130 )
000592 9001     +LD R0 , Z +
000593 9011     +LD R1 , Z +
000594 9161     +LD R22 , Z +
000595 8170     +LD R23 , Z
000596 01f0     +MOVW R30 , R0
                 	__GETD1SX 130
000597 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
                +
000598 01de     +MOVW R26 , R28
000599 57a0     +SUBI R26 , LOW ( - 144 )
00059a 4fbf     +SBCI R27 , HIGH ( - 144 )
00059b 900d     +LD R0 , X +
00059c 91bc     +LD R27 , X
00059d 2da0     +MOV R26 , R0
                 	__GETW2SX 144
00059e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
00059f 936a      	ST   -Y,R22
0005a0 937a      	ST   -Y,R23
0005a1 93aa      	ST   -Y,R26
0005a2 93ba      	ST   -Y,R27
0005a3 93ea      	ST   -Y,R30
0005a4 93fa      	ST   -Y,R31
0005a5 b7ef      	IN   R30,SREG
0005a6 93ea      	ST   -Y,R30
0005a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0005a8 e0a0      	LDI  R26,LOW(_hall_sensor_value)
0005a9 e0b5      	LDI  R27,HIGH(_hall_sensor_value)
0005aa 940e 0776 	CALL __GETD1P_INC
0005ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x5:
0005ad 9731      	SBIW R30,1
0005ae 4060      	SBCI R22,0
0005af 4070      	SBCI R23,0
0005b0 940e 0780 	CALL __PUTDP1_DEC
                +
0005b2 5fef     +SUBI R30 , LOW ( - 1 )
0005b3 4fff     +SBCI R31 , HIGH ( - 1 )
0005b4 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0005b5 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0005b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x6:
                +
0005b7 5fef     +SUBI R30 , LOW ( - 1 )
0005b8 4fff     +SBCI R31 , HIGH ( - 1 )
0005b9 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0005ba 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0005bb 940e 0780 	CALL __PUTDP1_DEC
0005bd 9731      	SBIW R30,1
0005be 4060      	SBCI R22,0
0005bf 4070      	SBCI R23,0
0005c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0005c1 81ee      	LDD  R30,Y+6
0005c2 81ff      	LDD  R31,Y+6+1
0005c3 93fa      	ST   -Y,R31
0005c4 93ea      	ST   -Y,R30
0005c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0005c6 940e 0747 	CALL __CWD1
0005c8 940e 0789 	CALL __PUTPARD1
0005ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x9:
0005cb 932a      	ST   -Y,R18
0005cc 85ed      	LDD  R30,Y+13
0005cd 85fe      	LDD  R31,Y+13+1
0005ce 93fa      	ST   -Y,R31
0005cf 93ea      	ST   -Y,R30
0005d0 89e9      	LDD  R30,Y+17
0005d1 89fa      	LDD  R31,Y+17+1
0005d2 9509      	ICALL
0005d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
0005d4 89e8      	LDD  R30,Y+16
0005d5 89f9      	LDD  R31,Y+16+1
0005d6 9734      	SBIW R30,4
0005d7 8be8      	STD  Y+16,R30
0005d8 8bf9      	STD  Y+16+1,R31
0005d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
0005da 85ed      	LDD  R30,Y+13
0005db 85fe      	LDD  R31,Y+13+1
0005dc 93fa      	ST   -Y,R31
0005dd 93ea      	ST   -Y,R30
0005de 89e9      	LDD  R30,Y+17
0005df 89fa      	LDD  R31,Y+17+1
0005e0 9509      	ICALL
0005e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
0005e2 89a8      	LDD  R26,Y+16
0005e3 89b9      	LDD  R27,Y+16+1
0005e4 9614      	ADIW R26,4
0005e5 940e 076c 	CALL __GETW1P
0005e7 83ee      	STD  Y+6,R30
0005e8 83ff      	STD  Y+6+1,R31
0005e9 cfd7      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
0005ea 89a8      	LDD  R26,Y+16
0005eb 89b9      	LDD  R27,Y+16+1
0005ec 9614      	ADIW R26,4
0005ed 940e 076c 	CALL __GETW1P
0005ef 87ea      	STD  Y+10,R30
0005f0 87fb      	STD  Y+10+1,R31
0005f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0005f2 01de      	MOVW R26,R28
0005f3 961c      	ADIW R26,12
0005f4 940e 0737 	CALL __ADDW2R15
0005f6 940e 076c 	CALL __GETW1P
0005f8 9508      	RET
                 
                 
                 	.CSEG
                 __ROUND_REPACK:
0005f9 2355      	TST  R21
0005fa f442      	BRPL __REPACK
0005fb 3850      	CPI  R21,0x80
0005fc f411      	BRNE __ROUND_REPACK0
0005fd ffe0      	SBRS R30,0
0005fe c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0005ff 9631      	ADIW R30,1
000600 1f69      	ADC  R22,R25
000601 1f79      	ADC  R23,R25
000602 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000603 e850      	LDI  R21,0x80
000604 2757      	EOR  R21,R23
000605 f411      	BRNE __REPACK0
000606 935f      	PUSH R21
000607 c0cf      	RJMP __ZERORES
                 __REPACK0:
000608 3f5f      	CPI  R21,0xFF
000609 f031      	BREQ __REPACK1
00060a 0f66      	LSL  R22
00060b 0c00      	LSL  R0
00060c 9557      	ROR  R21
00060d 9567      	ROR  R22
00060e 2f75      	MOV  R23,R21
00060f 9508      	RET
                 __REPACK1:
000610 935f      	PUSH R21
000611 2000      	TST  R0
000612 f00a      	BRMI __REPACK2
000613 c0cf      	RJMP __MAXRES
                 __REPACK2:
000614 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000615 e850      	LDI  R21,0x80
000616 2e19      	MOV  R1,R25
000617 2215      	AND  R1,R21
000618 0f88      	LSL  R24
000619 1f99      	ROL  R25
00061a 2795      	EOR  R25,R21
00061b 0f55      	LSL  R21
00061c 9587      	ROR  R24
                 
                 __UNPACK1:
00061d e850      	LDI  R21,0x80
00061e 2e07      	MOV  R0,R23
00061f 2205      	AND  R0,R21
000620 0f66      	LSL  R22
000621 1f77      	ROL  R23
000622 2775      	EOR  R23,R21
000623 0f55      	LSL  R21
000624 9567      	ROR  R22
000625 9508      	RET
                 
                 __CFD1U:
000626 9468      	SET
000627 c001      	RJMP __CFD1U0
                 __CFD1:
000628 94e8      	CLT
                 __CFD1U0:
000629 935f      	PUSH R21
00062a dff2      	RCALL __UNPACK1
00062b 3870      	CPI  R23,0x80
00062c f018      	BRLO __CFD10
00062d 3f7f      	CPI  R23,0xFF
00062e f408      	BRCC __CFD10
00062f c0a7      	RJMP __ZERORES
                 __CFD10:
000630 e156      	LDI  R21,22
000631 1b57      	SUB  R21,R23
000632 f4aa      	BRPL __CFD11
000633 9551      	NEG  R21
000634 3058      	CPI  R21,8
000635 f40e      	BRTC __CFD19
000636 3059      	CPI  R21,9
                 __CFD19:
000637 f030      	BRLO __CFD17
000638 efef      	SER  R30
000639 efff      	SER  R31
00063a ef6f      	SER  R22
00063b e77f      	LDI  R23,0x7F
00063c f977      	BLD  R23,7
00063d c01a      	RJMP __CFD15
                 __CFD17:
00063e 2777      	CLR  R23
00063f 2355      	TST  R21
000640 f0b9      	BREQ __CFD15
                 __CFD18:
000641 0fee      	LSL  R30
000642 1fff      	ROL  R31
000643 1f66      	ROL  R22
000644 1f77      	ROL  R23
000645 955a      	DEC  R21
000646 f7d1      	BRNE __CFD18
000647 c010      	RJMP __CFD15
                 __CFD11:
000648 2777      	CLR  R23
                 __CFD12:
000649 3058      	CPI  R21,8
00064a f028      	BRLO __CFD13
00064b 2fef      	MOV  R30,R31
00064c 2ff6      	MOV  R31,R22
00064d 2f67      	MOV  R22,R23
00064e 5058      	SUBI R21,8
00064f cff9      	RJMP __CFD12
                 __CFD13:
000650 2355      	TST  R21
000651 f031      	BREQ __CFD15
                 __CFD14:
000652 9576      	LSR  R23
000653 9567      	ROR  R22
000654 95f7      	ROR  R31
000655 95e7      	ROR  R30
000656 955a      	DEC  R21
000657 f7d1      	BRNE __CFD14
                 __CFD15:
000658 2000      	TST  R0
000659 f40a      	BRPL __CFD16
00065a d0e4      	RCALL __ANEGD1
                 __CFD16:
00065b 915f      	POP  R21
00065c 9508      	RET
                 
                 __CDF1U:
00065d 9468      	SET
00065e c001      	RJMP __CDF1U0
                 __CDF1:
00065f 94e8      	CLT
                 __CDF1U0:
000660 9730      	SBIW R30,0
000661 4060      	SBCI R22,0
000662 4070      	SBCI R23,0
000663 f0b1      	BREQ __CDF10
000664 2400      	CLR  R0
000665 f026      	BRTS __CDF11
000666 2377      	TST  R23
000667 f412      	BRPL __CDF11
000668 9400      	COM  R0
000669 d0d5      	RCALL __ANEGD1
                 __CDF11:
00066a 2e17      	MOV  R1,R23
00066b e17e      	LDI  R23,30
00066c 2011      	TST  R1
                 __CDF12:
00066d f032      	BRMI __CDF13
00066e 957a      	DEC  R23
00066f 0fee      	LSL  R30
000670 1fff      	ROL  R31
000671 1f66      	ROL  R22
000672 1c11      	ROL  R1
000673 cff9      	RJMP __CDF12
                 __CDF13:
000674 2fef      	MOV  R30,R31
000675 2ff6      	MOV  R31,R22
000676 2d61      	MOV  R22,R1
000677 935f      	PUSH R21
000678 df8a      	RCALL __REPACK
000679 915f      	POP  R21
                 __CDF10:
00067a 9508      	RET
                 
                 __SWAPACC:
00067b 934f      	PUSH R20
00067c 01af      	MOVW R20,R30
00067d 01fd      	MOVW R30,R26
00067e 01da      	MOVW R26,R20
00067f 01ab      	MOVW R20,R22
000680 01bc      	MOVW R22,R24
000681 01ca      	MOVW R24,R20
000682 2d40      	MOV  R20,R0
000683 2c01      	MOV  R0,R1
000684 2e14      	MOV  R1,R20
000685 914f      	POP  R20
000686 9508      	RET
                 
                 __UADD12:
000687 0fea      	ADD  R30,R26
000688 1ffb      	ADC  R31,R27
000689 1f68      	ADC  R22,R24
00068a 9508      	RET
                 
                 __NEGMAN1:
00068b 95e0      	COM  R30
00068c 95f0      	COM  R31
00068d 9560      	COM  R22
00068e 5fef      	SUBI R30,-1
00068f 4fff      	SBCI R31,-1
000690 4f6f      	SBCI R22,-1
000691 9508      	RET
                 
                 __SUBF12:
000692 935f      	PUSH R21
000693 df81      	RCALL __UNPACK
000694 3890      	CPI  R25,0x80
000695 f171      	BREQ __ADDF129
000696 e850      	LDI  R21,0x80
000697 2615      	EOR  R1,R21
                 
000698 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000699 935f      	PUSH R21
00069a df7a      	RCALL __UNPACK
00069b 3890      	CPI  R25,0x80
00069c f139      	BREQ __ADDF129
                 
                 __ADDF120:
00069d 3870      	CPI  R23,0x80
00069e f121      	BREQ __ADDF128
                 __ADDF121:
00069f 2f57      	MOV  R21,R23
0006a0 1b59      	SUB  R21,R25
0006a1 f12b      	BRVS __ADDF1211
0006a2 f412      	BRPL __ADDF122
0006a3 dfd7      	RCALL __SWAPACC
0006a4 cffa      	RJMP __ADDF121
                 __ADDF122:
0006a5 3158      	CPI  R21,24
0006a6 f018      	BRLO __ADDF123
0006a7 27aa      	CLR  R26
0006a8 27bb      	CLR  R27
0006a9 2788      	CLR  R24
                 __ADDF123:
0006aa 3058      	CPI  R21,8
0006ab f028      	BRLO __ADDF124
0006ac 2fab      	MOV  R26,R27
0006ad 2fb8      	MOV  R27,R24
0006ae 2788      	CLR  R24
0006af 5058      	SUBI R21,8
0006b0 cff9      	RJMP __ADDF123
                 __ADDF124:
0006b1 2355      	TST  R21
0006b2 f029      	BREQ __ADDF126
                 __ADDF125:
0006b3 9586      	LSR  R24
0006b4 95b7      	ROR  R27
0006b5 95a7      	ROR  R26
0006b6 955a      	DEC  R21
0006b7 f7d9      	BRNE __ADDF125
                 __ADDF126:
0006b8 2d50      	MOV  R21,R0
0006b9 2551      	EOR  R21,R1
0006ba f072      	BRMI __ADDF127
0006bb dfcb      	RCALL __UADD12
0006bc f438      	BRCC __ADDF129
0006bd 9567      	ROR  R22
0006be 95f7      	ROR  R31
0006bf 95e7      	ROR  R30
0006c0 9573      	INC  R23
0006c1 f413      	BRVC __ADDF129
0006c2 c020      	RJMP __MAXRES
                 __ADDF128:
0006c3 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0006c4 df3e      	RCALL __REPACK
0006c5 915f      	POP  R21
0006c6 9508      	RET
                 __ADDF1211:
0006c7 f7d8      	BRCC __ADDF128
0006c8 cffb      	RJMP __ADDF129
                 __ADDF127:
0006c9 1bea      	SUB  R30,R26
0006ca 0bfb      	SBC  R31,R27
0006cb 0b68      	SBC  R22,R24
0006cc f051      	BREQ __ZERORES
0006cd f410      	BRCC __ADDF1210
0006ce 9400      	COM  R0
0006cf dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0006d0 2366      	TST  R22
0006d1 f392      	BRMI __ADDF129
0006d2 0fee      	LSL  R30
0006d3 1fff      	ROL  R31
0006d4 1f66      	ROL  R22
0006d5 957a      	DEC  R23
0006d6 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0006d7 27ee      	CLR  R30
0006d8 27ff      	CLR  R31
0006d9 2766      	CLR  R22
0006da 2777      	CLR  R23
0006db 915f      	POP  R21
0006dc 9508      	RET
                 
                 __MINRES:
0006dd efef      	SER  R30
0006de efff      	SER  R31
0006df e76f      	LDI  R22,0x7F
0006e0 ef7f      	SER  R23
0006e1 915f      	POP  R21
0006e2 9508      	RET
                 
                 __MAXRES:
0006e3 efef      	SER  R30
0006e4 efff      	SER  R31
0006e5 e76f      	LDI  R22,0x7F
0006e6 e77f      	LDI  R23,0x7F
0006e7 915f      	POP  R21
0006e8 9508      	RET
                 
                 __MULF12:
0006e9 935f      	PUSH R21
0006ea df2a      	RCALL __UNPACK
0006eb 3870      	CPI  R23,0x80
0006ec f351      	BREQ __ZERORES
0006ed 3890      	CPI  R25,0x80
0006ee f341      	BREQ __ZERORES
0006ef 2401      	EOR  R0,R1
0006f0 9408      	SEC
0006f1 1f79      	ADC  R23,R25
0006f2 f423      	BRVC __MULF124
0006f3 f31c      	BRLT __ZERORES
                 __MULF125:
0006f4 2000      	TST  R0
0006f5 f33a      	BRMI __MINRES
0006f6 cfec      	RJMP __MAXRES
                 __MULF124:
0006f7 920f      	PUSH R0
0006f8 931f      	PUSH R17
0006f9 932f      	PUSH R18
0006fa 933f      	PUSH R19
0006fb 934f      	PUSH R20
0006fc 2711      	CLR  R17
0006fd 2722      	CLR  R18
0006fe 2799      	CLR  R25
0006ff 9f68      	MUL  R22,R24
000700 01a0      	MOVW R20,R0
000701 9f8f      	MUL  R24,R31
000702 2d30      	MOV  R19,R0
000703 0d41      	ADD  R20,R1
000704 1f59      	ADC  R21,R25
000705 9f6b      	MUL  R22,R27
000706 0d30      	ADD  R19,R0
000707 1d41      	ADC  R20,R1
000708 1f59      	ADC  R21,R25
000709 9f8e      	MUL  R24,R30
00070a d027      	RCALL __MULF126
00070b 9fbf      	MUL  R27,R31
00070c d025      	RCALL __MULF126
00070d 9f6a      	MUL  R22,R26
00070e d023      	RCALL __MULF126
00070f 9fbe      	MUL  R27,R30
000710 d01d      	RCALL __MULF127
000711 9faf      	MUL  R26,R31
000712 d01b      	RCALL __MULF127
000713 9fae      	MUL  R26,R30
000714 0d11      	ADD  R17,R1
000715 1f29      	ADC  R18,R25
000716 1f39      	ADC  R19,R25
000717 1f49      	ADC  R20,R25
000718 1f59      	ADC  R21,R25
000719 2fe3      	MOV  R30,R19
00071a 2ff4      	MOV  R31,R20
00071b 2f65      	MOV  R22,R21
00071c 2f52      	MOV  R21,R18
00071d 914f      	POP  R20
00071e 913f      	POP  R19
00071f 912f      	POP  R18
000720 911f      	POP  R17
000721 900f      	POP  R0
000722 2366      	TST  R22
000723 f02a      	BRMI __MULF122
000724 0f55      	LSL  R21
000725 1fee      	ROL  R30
000726 1fff      	ROL  R31
000727 1f66      	ROL  R22
000728 c002      	RJMP __MULF123
                 __MULF122:
000729 9573      	INC  R23
00072a f24b      	BRVS __MULF125
                 __MULF123:
00072b decd      	RCALL __ROUND_REPACK
00072c 915f      	POP  R21
00072d 9508      	RET
                 
                 __MULF127:
00072e 0d10      	ADD  R17,R0
00072f 1d21      	ADC  R18,R1
000730 1f39      	ADC  R19,R25
000731 c002      	RJMP __MULF128
                 __MULF126:
000732 0d20      	ADD  R18,R0
000733 1d31      	ADC  R19,R1
                 __MULF128:
000734 1f49      	ADC  R20,R25
000735 1f59      	ADC  R21,R25
000736 9508      	RET
                 
                 __ADDW2R15:
000737 2400      	CLR  R0
000738 0daf      	ADD  R26,R15
000739 1db0      	ADC  R27,R0
00073a 9508      	RET
                 
                 __ANEGW1:
00073b 95f1      	NEG  R31
00073c 95e1      	NEG  R30
00073d 40f0      	SBCI R31,0
00073e 9508      	RET
                 
                 __ANEGD1:
00073f 95f0      	COM  R31
000740 9560      	COM  R22
000741 9570      	COM  R23
000742 95e1      	NEG  R30
000743 4fff      	SBCI R31,-1
000744 4f6f      	SBCI R22,-1
000745 4f7f      	SBCI R23,-1
000746 9508      	RET
                 
                 __CWD1:
000747 2f6f      	MOV  R22,R31
000748 0f66      	ADD  R22,R22
000749 0b66      	SBC  R22,R22
00074a 2f76      	MOV  R23,R22
00074b 9508      	RET
                 
                 __CWD2:
00074c 2f8b      	MOV  R24,R27
00074d 0f88      	ADD  R24,R24
00074e 0b88      	SBC  R24,R24
00074f 2f98      	MOV  R25,R24
000750 9508      	RET
                 
                 __MULW12U:
000751 9ffa      	MUL  R31,R26
000752 2df0      	MOV  R31,R0
000753 9feb      	MUL  R30,R27
000754 0df0      	ADD  R31,R0
000755 9fea      	MUL  R30,R26
000756 2de0      	MOV  R30,R0
000757 0df1      	ADD  R31,R1
000758 9508      	RET
                 
                 __MULW12:
000759 d004      	RCALL __CHKSIGNW
00075a dff6      	RCALL __MULW12U
00075b f40e      	BRTC __MULW121
00075c dfde      	RCALL __ANEGW1
                 __MULW121:
00075d 9508      	RET
                 
                 __CHKSIGNW:
00075e 94e8      	CLT
00075f fff7      	SBRS R31,7
000760 c002      	RJMP __CHKSW1
000761 dfd9      	RCALL __ANEGW1
000762 9468      	SET
                 __CHKSW1:
000763 ffb7      	SBRS R27,7
000764 c006      	RJMP __CHKSW2
000765 95a0      	COM  R26
000766 95b0      	COM  R27
000767 9611      	ADIW R26,1
000768 f800      	BLD  R0,0
000769 9403      	INC  R0
00076a fa00      	BST  R0,0
                 __CHKSW2:
00076b 9508      	RET
                 
                 __GETW1P:
00076c 91ed      	LD   R30,X+
00076d 91fc      	LD   R31,X
00076e 9711      	SBIW R26,1
00076f 9508      	RET
                 
                 __GETD1P:
000770 91ed      	LD   R30,X+
000771 91fd      	LD   R31,X+
000772 916d      	LD   R22,X+
000773 917c      	LD   R23,X
000774 9713      	SBIW R26,3
000775 9508      	RET
                 
                 __GETD1P_INC:
000776 91ed      	LD   R30,X+
000777 91fd      	LD   R31,X+
000778 916d      	LD   R22,X+
000779 917d      	LD   R23,X+
00077a 9508      	RET
                 
                 __PUTDP1:
00077b 93ed      	ST   X+,R30
00077c 93fd      	ST   X+,R31
00077d 936d      	ST   X+,R22
00077e 937c      	ST   X,R23
00077f 9508      	RET
                 
                 __PUTDP1_DEC:
000780 937e      	ST   -X,R23
000781 936e      	ST   -X,R22
000782 93fe      	ST   -X,R31
000783 93ee      	ST   -X,R30
000784 9508      	RET
                 
                 __GETW1PF:
000785 9005      	LPM  R0,Z+
000786 91f4      	LPM  R31,Z
000787 2de0      	MOV  R30,R0
000788 9508      	RET
                 
                 __PUTPARD1:
000789 937a      	ST   -Y,R23
00078a 936a      	ST   -Y,R22
00078b 93fa      	ST   -Y,R31
00078c 93ea      	ST   -Y,R30
00078d 9508      	RET
                 
                 __CDF2U:
00078e 9468      	SET
00078f c001      	RJMP __CDF2U0
                 __CDF2:
000790 94e8      	CLT
                 __CDF2U0:
000791 d001      	RCALL __SWAPD12
000792 decd      	RCALL __CDF1U0
                 
                 __SWAPD12:
000793 2e18      	MOV  R1,R24
000794 2f86      	MOV  R24,R22
000795 2d61      	MOV  R22,R1
000796 2e19      	MOV  R1,R25
000797 2f97      	MOV  R25,R23
000798 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000799 2e1b      	MOV  R1,R27
00079a 2fbf      	MOV  R27,R31
00079b 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00079c 2e1a      	MOV  R1,R26
00079d 2fae      	MOV  R26,R30
00079e 2de1      	MOV  R30,R1
00079f 9508      	RET
                 
                 __SAVELOCR6:
0007a0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0007a1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0007a2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0007a3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0007a4 931a      	ST   -Y,R17
0007a5 930a      	ST   -Y,R16
0007a6 9508      	RET
                 
                 __LOADLOCR6:
0007a7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0007a8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0007a9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0007aa 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0007ab 8119      	LDD  R17,Y+1
0007ac 8108      	LD   R16,Y
0007ad 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0007ae 0fac      	ADD  R26,R28
0007af 1fbd      	ADC  R27,R29
                 __INITLOC0:
0007b0 9005      	LPM  R0,Z+
0007b1 920d      	ST   X+,R0
0007b2 958a      	DEC  R24
0007b3 f7e1      	BRNE __INITLOC0
0007b4 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  59 r1 :  33 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   3 r7 :   0 
r8 :   0 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  51 r17:  37 r18:  40 r19:  18 r20:  26 r21:  76 r22:  76 r23:  64 
r24:  42 r25:  33 r26: 132 r27:  76 r28:  44 r29:   2 r30: 338 r31: 163 
x  :  78 y  : 228 z  :  36 
Registers used: 26 out of 35 (74.3%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  18 
adiw  :  35 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  35 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   3 brmi  :   9 brne  :  29 brpl  :   7 brsh  :   2 brtc  :   3 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   1 bst   :   1 call  : 101 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  30 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :  12 
cp    :   9 cpc   :   5 cpi   :  53 cpse  :   0 dec   :   7 des   :   0 
elpm  :   0 eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   5 inc   :   4 jmp   :  39 ld    :  81 ldd   : 100 
ldi   : 155 lds   :  10 lpm   :  15 lsl   :  13 lsr   :   2 mov   :  58 
movw  :  55 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   0 ori   :   7 out   :  25 pop   :  18 push  :  18 rcall :  34 
ret   :  63 reti  :   3 rjmp  :  90 rol   :  16 ror   :  12 sbc   :   5 
sbci  :  36 sbi   :   8 sbic  :   6 sbis  :   0 sbiw  :  25 sbr   :   0 
sbrc  :   2 sbrs  :  13 sec   :   1 seh   :   0 sei   :   0 sen   :   0 
ser   :   8 ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 115 std   :  33 sts   :  15 sub   :   4 subi  :  37 
swap  :   0 tst   :  21 wdr   :   0 
Instructions used: 73 out of 117 (62.4%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000f6a   3562    384   3946  131072   3.0%
[.dseg] 0x000100 0x000520      0     32     32    4351   0.7%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 9 warnings
