
AVRASM ver. 2.1.30  C:\Users\ekzm5\Work\AVR\PID\List\PID.asm Sun Dec 22 12:48:44 2019

C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1061): warning: Register r4 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1062): warning: Register r7 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1063): warning: Register r6 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1064): warning: Register r9 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1065): warning: Register r8 already defined by the .DEF directive
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1066): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 14.745600 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : No
                 ;global 'const' stored in FLASH: Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hall_sensor_value=R4
                 	.DEF _RXC_index=R7
                 	.DEF _SET_RXC1=R6
                 	.DEF _recByte=R9
                 	.DEF _BUFF=R8
                 	.DEF _tick=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00c6 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0170 	JMP  _hall_sensor_detection1
00000e 940c 0181 	JMP  _hall_sensor_detection2
000010 940c 0192 	JMP  _hall_sensor_detection3
000012 940c 0000 	JMP  0x00
000014 940c 014e 	JMP  _timer2_overflow
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0157 	JMP  _int_USART1
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1118): warning: .cseg .db misalignment - padding zero byte
00004f 000a      	.DB  0xA
                 _0x4:
000050 aa47
000051 3b6f      	.DB  0x47,0xAA,0x6F,0x3B
                 _0x30:
000052 0000
000053 0000
000054 0000
000055 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000056 0000
000057 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x44:
000058 0000
000059 0000
00005a 0000
00005b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005c 0000
00005d 0000
00005e 0000
00005f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000060 0000
000061 0000
000062 0000
000063 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000064 0000
000065 0000
000066 0000
000067 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000068 0000
000069 0000
00006a 0000
00006b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006c 0000
00006d 0000
00006e 0000
00006f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000070 0000
000071 0000
000072 0000
000073 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000074 0000
000075 0000
000076 0000
000077 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000078 0000
000079 0000
00007a 0000
00007b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007c 0000
00007d 0000
00007e 0000
00007f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000080 0000
000081 0000
000082 0000
000083 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000084 0000
000085 0000
000086 0000
000087 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000088 0000
000089 0000
00008a 0000
00008b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008c 0000
00008d 0000
00008e 0000
00008f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000090 0000
000091 0000
000092 0000
000093 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000094 0000
000095 0000
000096 0000
000097 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000098 0000
000099 0000
00009a 0000
00009b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00009c 0000
00009d 0000
00009e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x52:
00009f 0000
0000a0 0000
0000a1 0000
0000a2 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
0000a3 6f47
0000a4 6c61
0000a5 253d
0000a6 2c64      	.DB  0x47,0x6F,0x61,0x6C,0x3D,0x25,0x64,0x2C
0000a7 6320
0000a8 7275
0000a9 6572
0000aa 746e      	.DB  0x20,0x63,0x75,0x72,0x72,0x65,0x6E,0x74
0000ab 253d
0000ac 2c64
0000ad 4520
0000ae 7272      	.DB  0x3D,0x25,0x64,0x2C,0x20,0x45,0x72,0x72
0000af 253d
0000b0 2064
0000b1 0a0d
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1149): warning: .cseg .db misalignment - padding zero byte
0000b2 0000      	.DB  0x3D,0x25,0x64,0x20,0xD,0xA,0x0
                 _0x2020060:
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1151): warning: .cseg .db misalignment - padding zero byte
0000b3 0001      	.DB  0x1
                 _0x2020000:
0000b4 4e2d
0000b5 4e41
0000b6 4900
0000b7 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ekzm5\Work\AVR\PID\List\PID.asm(1154): warning: .cseg .db misalignment - padding zero byte
0000b8 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
0000b9 0001      	.DW  0x01
0000ba 0500      	.DW  _RXC_BUFF
0000bb 009e      	.DW  _0x3*2
                 
0000bc 0004      	.DW  0x04
0000bd 0514      	.DW  _Time
0000be 00a0      	.DW  _0x4*2
                 
0000bf 0008      	.DW  0x08
0000c0 0004      	.DW  0x04
0000c1 013e      	.DW  _0x52*2
                 
0000c2 0001      	.DW  0x01
0000c3 0518      	.DW  __seed_G101
0000c4 0166      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
0000c5 0000      	.DW  0
                 
                 __RESET:
0000c6 94f8      	CLI
0000c7 27ee      	CLR  R30
0000c8 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000c9 e0f1      	LDI  R31,1
0000ca bff5      	OUT  MCUCR,R31
0000cb bfe5      	OUT  MCUCR,R30
0000cc 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0000ce e1f8      	LDI  R31,0x18
0000cf bdf1      	OUT  WDTCR,R31
0000d0 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000d1 e08d      	LDI  R24,(14-2)+1
0000d2 e0a2      	LDI  R26,2
0000d3 27bb      	CLR  R27
                 __CLEAR_REG:
0000d4 93ed      	ST   X+,R30
0000d5 958a      	DEC  R24
0000d6 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000d7 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000d8 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000d9 e0a0      	LDI  R26,LOW(__SRAM_START)
0000da e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0000db 93ed      	ST   X+,R30
0000dc 9701      	SBIW R24,1
0000dd f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000de e7e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000df e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000e0 9185      	LPM  R24,Z+
0000e1 9195      	LPM  R25,Z+
0000e2 9700      	SBIW R24,0
0000e3 f061      	BREQ __GLOBAL_INI_END
0000e4 91a5      	LPM  R26,Z+
0000e5 91b5      	LPM  R27,Z+
0000e6 9005      	LPM  R0,Z+
0000e7 9015      	LPM  R1,Z+
0000e8 01bf      	MOVW R22,R30
0000e9 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ea 9005      	LPM  R0,Z+
0000eb 920d      	ST   X+,R0
0000ec 9701      	SBIW R24,1
0000ed f7e1      	BRNE __GLOBAL_INI_LOOP
0000ee 01fb      	MOVW R30,R22
0000ef cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000f0 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000f1 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000f2 bfed      	OUT  SPL,R30
0000f3 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000f4 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000f5 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000f6 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000f7 940c 01a8 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;
                 ;#define MOTOR2_DIRECTION PORTB.3
                 ;#define MOTOR1_DIRECTION PORTB.4
                 ;#define HALLA PINE.5
                 ;#define HALLB PINE.6
                 ;#define HALLC PINE.7
                 ;#define Kp 15
                 ;#define Ki 1.0
                 ;#define Kd 0
                 ;
                 ;//ENCODER
                 ;int hall_sensor_value = 0;
                 ;
                 ;//USART
                 ;unsigned char RXC_BUFF[20] = {0x0a,};
                 
                 	.DSEG
                 ;unsigned char RXC_index = 0;
                 ;unsigned char SET_RXC1 = 0;
                 ;unsigned char recByte = 0;
                 ;unsigned char BUFF = 0;
                 ;
                 ;//PID
                 ;char tick = 0;
                 ;float Time = 0.003657;
                 ;
                 ;void GPIO_SETUP(void)
                 ; 0000 001E {
                 
                 	.CSEG
                 _GPIO_SETUP:
                 ; 0000 001F     //PWM
                 ; 0000 0020     DDRB.6 = 1;
0000f9 9abe      	SBI  0x17,6
                 ; 0000 0021     DDRB.7 = 1;
0000fa 9abf      	SBI  0x17,7
                 ; 0000 0022 
                 ; 0000 0023     //motor direction
                 ; 0000 0024     DDRB.4 = 1;
0000fb 9abc      	SBI  0x17,4
                 ; 0000 0025     DDRB.3 = 1;
0000fc 9abb      	SBI  0x17,3
                 ; 0000 0026 
                 ; 0000 0027     PORTB.4 = 0;
0000fd 98c4      	CBI  0x18,4
                 ; 0000 0028     PORTB.3 = 0;
0000fe 98c3      	CBI  0x18,3
                 ; 0000 0029 
                 ; 0000 002A     //nBrake;
                 ; 0000 002B     DDRB.2 = 1;
0000ff 9aba      	SBI  0x17,2
                 ; 0000 002C     DDRB.5 = 1;
000100 9abd      	SBI  0x17,5
                 ; 0000 002D 
                 ; 0000 002E     PORTB.2 = 0;
000101 98c2      	CBI  0x18,2
                 ; 0000 002F     PORTB.5 = 0;
000102 98c5      	CBI  0x18,5
                 ; 0000 0030 }
000103 9508      	RET
                 ;
                 ;void USART1_init(void)
                 ; 0000 0033 {
                 _USART1_init:
                 ; 0000 0034     UCSR1A = 0x00;
000104 e0e0      	LDI  R30,LOW(0)
000105 93e0 009b 	STS  155,R30
                 ; 0000 0035     UCSR1B = (1<<TXEN1)|(1<<RXEN0)|(1<<RXCIE0);
000107 e9e8      	LDI  R30,LOW(152)
000108 93e0 009a 	STS  154,R30
                 ; 0000 0036     UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
00010a e0e6      	LDI  R30,LOW(6)
00010b 93e0 009d 	STS  157,R30
                 ; 0000 0037     UCSR1C &= ~(0<<UMSEL1);
00010d e9ad      	LDI  R26,LOW(157)
00010e e0b0      	LDI  R27,HIGH(157)
00010f 91ec      	LD   R30,X
000110 93ec      	ST   X,R30
                 ; 0000 0038 
                 ; 0000 0039     UBRR1H = 0;
000111 e0e0      	LDI  R30,LOW(0)
000112 93e0 0098 	STS  152,R30
                 ; 0000 003A     UBRR1L = 7;
000114 e0e7      	LDI  R30,LOW(7)
000115 93e0 0099 	STS  153,R30
                 ; 0000 003B }
000117 9508      	RET
                 ;
                 ;void Data_Tx1(unsigned char bData)
                 ; 0000 003E {
                 _Data_Tx1:
                 ; 0000 003F     while(!(UCSR1A & (1<<UDRE1))); //wait until data can be loaded.
                 ;	bData -> Y+0
                 _0x19:
000118 91e0 009b 	LDS  R30,155
00011a 72e0      	ANDI R30,LOW(0x20)
00011b f3e1      	BREQ _0x19
                 ; 0000 0040     UDR1 = bData; //data load to TxD buffer
00011c 81e8      	LD   R30,Y
00011d 93e0 009c 	STS  156,R30
                 ; 0000 0041 }
00011f 9621      	ADIW R28,1
000120 9508      	RET
                 ;
                 ;unsigned char Data_Rx1(void)
                 ; 0000 0044 {
                 ; 0000 0045     while(!(UCSR1A & (1<<RXC1))); // RXC0 flag is USART Receive Complete
                 ; 0000 0046     return UDR1;
                 ; 0000 0047 }
                 ;
                 ;//sprintf printing function
                 ;void string_tx1(unsigned char *str)
                 ; 0000 004B {
                 _string_tx1:
                 ; 0000 004C     while (*str)
                 ;	*str -> Y+0
                 _0x1F:
000121 81a8      	LD   R26,Y
000122 81b9      	LDD  R27,Y+1
000123 91ec      	LD   R30,X
000124 30e0      	CPI  R30,0
000125 f031      	BREQ _0x21
                 ; 0000 004D     {
                 ; 0000 004E         Data_Tx1(*str++);
000126 91ed      	LD   R30,X+
000127 83a8      	ST   Y,R26
000128 83b9      	STD  Y+1,R27
000129 93ea      	ST   -Y,R30
00012a dfed      	RCALL _Data_Tx1
                 ; 0000 004F     }
00012b cff5      	RJMP _0x1F
                 _0x21:
                 ; 0000 0050 }
00012c 9622      	ADIW R28,2
00012d 9508      	RET
                 ;
                 ;void EXT_INT_init(void)
                 ; 0000 0053 {
                 _EXT_INT_init:
                 ; 0000 0054     EICRB = (1<<ISC50)|(1<<ISC60)|(1<<ISC70);
00012e e5e4      	LDI  R30,LOW(84)
00012f bfea      	OUT  0x3A,R30
                 ; 0000 0055     EIMSK = (1<<INT5)|(1<<INT6)|(1<<INT7);
000130 eee0      	LDI  R30,LOW(224)
000131 bfe9      	OUT  0x39,R30
                 ; 0000 0056 
                 ; 0000 0057     DDRE.5 = 0;
000132 9815      	CBI  0x2,5
                 ; 0000 0058     DDRE.6 = 0;
000133 9816      	CBI  0x2,6
                 ; 0000 0059     DDRE.7 = 0;
000134 9817      	CBI  0x2,7
                 ; 0000 005A }
000135 9508      	RET
                 ;
                 ;void TIMER_init(void)
                 ; 0000 005D {
                 _TIMER_init:
                 ; 0000 005E     //TIMER2
                 ; 0000 005F     TCCR2 = (1<<CS22)|(1<<CS20);// 일반모드, 1024분주;
000136 e0e5      	LDI  R30,LOW(5)
000137 bde5      	OUT  0x25,R30
                 ; 0000 0060 
                 ; 0000 0061     TCCR1A = (1<<WGM11)|(1<<COM1C1)|(1<<COM1B1);    TCCR1B = (1<<WGM13)|(1<<WGM12); // WGM bit setting
000138 e2ea      	LDI  R30,LOW(42)
000139 bdef      	OUT  0x2F,R30
00013a e1e8      	LDI  R30,LOW(24)
00013b bdee      	OUT  0x2E,R30
                 ; 0000 0062     TCCR1B |= (1<<CS10); // Clock source choie
00013c b5ee      	IN   R30,0x2E
00013d 60e1      	ORI  R30,1
00013e bdee      	OUT  0x2E,R30
                 ; 0000 0063 
                 ; 0000 0064     OCR1B = 0x00;
00013f e0e0      	LDI  R30,LOW(0)
000140 e0f0      	LDI  R31,HIGH(0)
000141 bdf9      	OUT  0x28+1,R31
000142 bde8      	OUT  0x28,R30
                 ; 0000 0065     OCR1CH = 0x00;
000143 93e0 0079 	STS  121,R30
                 ; 0000 0066     OCR1CL = 0x00;
000145 93e0 0078 	STS  120,R30
                 ; 0000 0067     ICR1 = 300; //664
000147 e2ec      	LDI  R30,LOW(300)
000148 e0f1      	LDI  R31,HIGH(300)
000149 bdf7      	OUT  0x26+1,R31
00014a bde6      	OUT  0x26,R30
                 ; 0000 0068 
                 ; 0000 0069     TIMSK = (1<<TOIE2);
00014b e4e0      	LDI  R30,LOW(64)
00014c bfe7      	OUT  0x37,R30
                 ; 0000 006A }
00014d 9508      	RET
                 ;
                 ;unsigned int MV_Rebuilding(int first, int last, int MV)
                 ; 0000 006D {
                 ; 0000 006E     unsigned int reMV;
                 ; 0000 006F 
                 ; 0000 0070     if(MV >= last) reMV = (unsigned int)last;
                 ;	first -> Y+6
                 ;	last -> Y+4
                 ;	MV -> Y+2
                 ;	reMV -> R16,R17
                 ; 0000 0071     else if(MV <= first) reMV = (unsigned int)((-1)*first);
                 ; 0000 0072 
                 ; 0000 0073     else if(MV> first && MV < 0) reMV = (unsigned int)((-1)*MV);
                 ; 0000 0074     else reMV = MV;
                 ; 0000 0075 
                 ; 0000 0076     return reMV;
                 ; 0000 0077 }
                 ;
                 ;
                 ;int PID_Controller(int Goal, int now, float* integral, float* Err_previous)
                 ; 0000 007B {
                 ; 0000 007C     float pErr = 0;
                 ; 0000 007D     float dErr = 0;
                 ; 0000 007E     int MV = 0;
                 ; 0000 007F     float Err = 0;
                 ; 0000 0080 
                 ; 0000 0081     Err = Goal - now; //ERROR
                 ;	Goal -> Y+20
                 ;	now -> Y+18
                 ;	*integral -> Y+16
                 ;	*Err_previous -> Y+14
                 ;	pErr -> Y+10
                 ;	dErr -> Y+6
                 ;	MV -> R16,R17
                 ;	Err -> Y+2
                 ; 0000 0082     pErr = (Kp*Err); // P
                 ; 0000 0083     *integral = *integral +(Ki * Err * Time); // I
                 ; 0000 0084     dErr = (Kd * (Err - *Err_previous)) / Time; // D
                 ; 0000 0085 
                 ; 0000 0086     MV = (int)(pErr+ *integral + dErr);// PID Control Volume
                 ; 0000 0087     *Err_previous = Err;
                 ; 0000 0088 
                 ; 0000 0089     return MV;
                 ; 0000 008A }
                 ;
                 ;void producePWM(int OCR_val, unsigned int OCR_SET)
                 ; 0000 008D {
                 ; 0000 008E     if(OCR_val < 0)
                 ;	OCR_val -> Y+2
                 ;	OCR_SET -> Y+0
                 ; 0000 008F     {
                 ; 0000 0090         MOTOR1_DIRECTION = 1;
                 ; 0000 0091         MOTOR2_DIRECTION = 1;
                 ; 0000 0092 
                 ; 0000 0093         OCR1B = OCR_SET;
                 ; 0000 0094         OCR1CH = (OCR_SET & 0xFF00) >> 8;
                 ; 0000 0095         OCR1CL = 0x00FF & (OCR_SET);
                 ; 0000 0096     }
                 ; 0000 0097     else if(OCR_val >= 0)
                 ; 0000 0098     {
                 ; 0000 0099         MOTOR1_DIRECTION = 0;
                 ; 0000 009A         MOTOR2_DIRECTION = 0;
                 ; 0000 009B 
                 ; 0000 009C         OCR1B = OCR_SET;
                 ; 0000 009D         OCR1CH = (OCR_SET & 0xFF00) >> 8;
                 ; 0000 009E         OCR1CL = 0x00FF & (OCR_SET);
                 ; 0000 009F     }
                 ; 0000 00A0 }
                 ;
                 ;interrupt [TIM2_OVF] void timer2_overflow(void)
                 ; 0000 00A3 {
                 _timer2_overflow:
00014e 93ea      	ST   -Y,R30
00014f b7ef      	IN   R30,SREG
000150 93ea      	ST   -Y,R30
                 ; 0000 00A4     tick += 255;
000151 efef      	LDI  R30,LOW(255)
000152 0ebe      	ADD  R11,R30
                 ; 0000 00A5 }
000153 91e9      	LD   R30,Y+
000154 bfef      	OUT  SREG,R30
000155 91e9      	LD   R30,Y+
000156 9518      	RETI
                 ;
                 ;interrupt [USART1_RXC]void int_USART1(void)
                 ; 0000 00A8 {
                 _int_USART1:
000157 93ea      	ST   -Y,R30
000158 93fa      	ST   -Y,R31
000159 b7ef      	IN   R30,SREG
00015a 93ea      	ST   -Y,R30
                 ; 0000 00A9     BUFF = UDR1;
00015b 9080 009c 	LDS  R8,156
                 ; 0000 00AA 
                 ; 0000 00AB     if(BUFF != 0x0a)
00015d e0ea      	LDI  R30,LOW(10)
00015e 15e8      	CP   R30,R8
00015f f041      	BREQ _0x3C
                 ; 0000 00AC     {
                 ; 0000 00AD         SET_RXC1 = 0;
000160 2466      	CLR  R6
                 ; 0000 00AE         RXC_BUFF[RXC_index] = BUFF;
000161 2de7      	MOV  R30,R7
000162 e0f0      	LDI  R31,0
000163 50e0      	SUBI R30,LOW(-_RXC_BUFF)
000164 4ffb      	SBCI R31,HIGH(-_RXC_BUFF)
000165 8280      	ST   Z,R8
                 ; 0000 00AF         RXC_index++;
000166 9473      	INC  R7
                 ; 0000 00B0     }
                 ; 0000 00B1     else
000167 c003      	RJMP _0x3D
                 _0x3C:
                 ; 0000 00B2     {
                 ; 0000 00B3         RXC_index = 0;
000168 2477      	CLR  R7
                 ; 0000 00B4         SET_RXC1 = 1;
000169 e0e1      	LDI  R30,LOW(1)
00016a 2e6e      	MOV  R6,R30
                 ; 0000 00B5     }
                 _0x3D:
                 ; 0000 00B6 }
00016b 91e9      	LD   R30,Y+
00016c bfef      	OUT  SREG,R30
00016d 91f9      	LD   R31,Y+
00016e 91e9      	LD   R30,Y+
00016f 9518      	RETI
                 ;
                 ;interrupt [EXT_INT5] void hall_sensor_detection1(void)
                 ; 0000 00B9 {
                 _hall_sensor_detection1:
000170 940e 041b 	CALL SUBOPT_0x0
                 ; 0000 00BA     if(HALLA != HALLB) hall_sensor_value--;
000172 e0a0      	LDI  R26,0
000173 990d      	SBIC 0x1,5
000174 e0a1      	LDI  R26,1
000175 e0e0      	LDI  R30,0
000176 990e      	SBIC 0x1,6
000177 e0e1      	LDI  R30,1
000178 17ea      	CP   R30,R26
000179 f019      	BREQ _0x3E
00017a 01f2      	MOVW R30,R4
00017b 9731      	SBIW R30,1
00017c c002      	RJMP _0x4E
                 ; 0000 00BB     else hall_sensor_value++;
                 _0x3E:
00017d 01f2      	MOVW R30,R4
00017e 9631      	ADIW R30,1
                 _0x4E:
00017f 012f      	MOVW R4,R30
                 ; 0000 00BC }
000180 c021      	RJMP _0x51
                 ;
                 ;interrupt [EXT_INT6] void hall_sensor_detection2(void)
                 ; 0000 00BF {
                 _hall_sensor_detection2:
000181 940e 041b 	CALL SUBOPT_0x0
                 ; 0000 00C0     if(HALLB != HALLC) hall_sensor_value--;
000183 e0a0      	LDI  R26,0
000184 990e      	SBIC 0x1,6
000185 e0a1      	LDI  R26,1
000186 e0e0      	LDI  R30,0
000187 990f      	SBIC 0x1,7
000188 e0e1      	LDI  R30,1
000189 17ea      	CP   R30,R26
00018a f019      	BREQ _0x40
00018b 01f2      	MOVW R30,R4
00018c 9731      	SBIW R30,1
00018d c002      	RJMP _0x4F
                 ; 0000 00C1     else hall_sensor_value++;
                 _0x40:
00018e 01f2      	MOVW R30,R4
00018f 9631      	ADIW R30,1
                 _0x4F:
000190 012f      	MOVW R4,R30
                 ; 0000 00C2 }
000191 c010      	RJMP _0x51
                 ;
                 ;interrupt [EXT_INT7] void hall_sensor_detection3(void)
                 ; 0000 00C5 {
                 _hall_sensor_detection3:
000192 940e 041b 	CALL SUBOPT_0x0
                 ; 0000 00C6     if(HALLC != HALLA) hall_sensor_value--;
000194 e0a0      	LDI  R26,0
000195 990f      	SBIC 0x1,7
000196 e0a1      	LDI  R26,1
000197 e0e0      	LDI  R30,0
000198 990d      	SBIC 0x1,5
000199 e0e1      	LDI  R30,1
00019a 17ea      	CP   R30,R26
00019b f019      	BREQ _0x42
00019c 01f2      	MOVW R30,R4
00019d 9731      	SBIW R30,1
00019e c002      	RJMP _0x50
                 ; 0000 00C7     else hall_sensor_value++;
                 _0x42:
00019f 01f2      	MOVW R30,R4
0001a0 9631      	ADIW R30,1
                 _0x50:
0001a1 012f      	MOVW R4,R30
                 ; 0000 00C8 }
                 _0x51:
0001a2 91e9      	LD   R30,Y+
0001a3 bfef      	OUT  SREG,R30
0001a4 91f9      	LD   R31,Y+
0001a5 91e9      	LD   R30,Y+
0001a6 91a9      	LD   R26,Y+
0001a7 9518      	RETI
                 ;
                 ;void main(void)
                 ; 0000 00CB {
                 _main:
                 ; 0000 00CC     int i = 0;
                 ; 0000 00CD 
                 ; 0000 00CE     int Goal = 0;
                 ; 0000 00CF     float Err = 0;
                 ; 0000 00D0     float integral = 0;
                 ; 0000 00D1     int now = 0;
                 ; 0000 00D2 
                 ; 0000 00D3     unsigned int current_time = 0;
                 ; 0000 00D4     char BUFF[128]={0,};
                 ; 0000 00D5 
                 ; 0000 00D6     //Controll Volume
                 ; 0000 00D7     int OCR_val = 0;
                 ; 0000 00D8     unsigned int OCR_SET = 0;
                 ; 0000 00D9 
                 ; 0000 00DA     USART1_init();
0001a8 97ef      	SBIW R28,63
0001a9 97ef      	SBIW R28,63
0001aa 9760      	SBIW R28,16
0001ab e88e      	LDI  R24,142
0001ac e0a0      	LDI  R26,LOW(0)
0001ad e0b0      	LDI  R27,HIGH(0)
0001ae ebe0      	LDI  R30,LOW(_0x44*2)
0001af e0f0      	LDI  R31,HIGH(_0x44*2)
0001b0 940e 0583 	CALL __INITLOCB
                 ;	i -> R16,R17
                 ;	Goal -> R18,R19
                 ;	Err -> Y+138
                 ;	integral -> Y+134
                 ;	now -> R20,R21
                 ;	current_time -> Y+132
                 ;	BUFF -> Y+4
                 ;	OCR_val -> Y+2
                 ;	OCR_SET -> Y+0
                +
0001b2 e000     +LDI R16 , LOW ( 0 )
0001b3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001b4 e020     +LDI R18 , LOW ( 0 )
0001b5 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0001b6 e040     +LDI R20 , LOW ( 0 )
0001b7 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0001b8 df4b      	RCALL _USART1_init
                 ; 0000 00DB     TIMER_init();
0001b9 df7c      	RCALL _TIMER_init
                 ; 0000 00DC     GPIO_SETUP();
0001ba df3e      	RCALL _GPIO_SETUP
                 ; 0000 00DD     EXT_INT_init();
0001bb df72      	RCALL _EXT_INT_init
                 ; 0000 00DE 
                 ; 0000 00DF     SREG |= 0x80;
0001bc 9478      	BSET 7
                 ; 0000 00E0 
                 ; 0000 00E1     while(1)
                 _0x45:
                 ; 0000 00E2     {
                 ; 0000 00E3         if(SET_RXC1)
0001bd 2066      	TST  R6
0001be f041      	BREQ _0x48
                 ; 0000 00E4         {
                 ; 0000 00E5             Goal = atoi(RXC_BUFF);
0001bf e0e0      	LDI  R30,LOW(_RXC_BUFF)
0001c0 e0f5      	LDI  R31,HIGH(_RXC_BUFF)
0001c1 93fa      	ST   -Y,R31
0001c2 93ea      	ST   -Y,R30
0001c3 940e 03c3 	CALL _atoi
0001c5 019f      	MOVW R18,R30
                 ; 0000 00E6             SET_RXC1 = 0;
0001c6 2466      	CLR  R6
                 ; 0000 00E7         }
                 ; 0000 00E8         for(i = 0; i<20; i++)
                 _0x48:
                +
0001c7 e000     +LDI R16 , LOW ( 0 )
0001c8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4A:
                +
0001c9 3104     +CPI R16 , LOW ( 20 )
0001ca e0e0     +LDI R30 , HIGH ( 20 )
0001cb 071e     +CPC R17 , R30
                 	__CPWRN 16,17,20
0001cc f44c      	BRGE _0x4B
                 ; 0000 00E9         {
                 ; 0000 00EA             RXC_BUFF[i] = 0;
0001cd e0a0      	LDI  R26,LOW(_RXC_BUFF)
0001ce e0b5      	LDI  R27,HIGH(_RXC_BUFF)
0001cf 0fa0      	ADD  R26,R16
0001d0 1fb1      	ADC  R27,R17
0001d1 e0e0      	LDI  R30,LOW(0)
0001d2 93ec      	ST   X,R30
                 ; 0000 00EB         }
                +
0001d3 5f0f     +SUBI R16 , LOW ( - 1 )
0001d4 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001d5 cff3      	RJMP _0x4A
                 _0x4B:
                 ; 0000 00EC 
                 ; 0000 00ED         now = (int)(6*hall_sensor_value);
0001d6 01f2      	MOVW R30,R4
0001d7 e0a6      	LDI  R26,LOW(6)
0001d8 e0b0      	LDI  R27,HIGH(6)
0001d9 940e 0555 	CALL __MULW12
0001db 01af      	MOVW R20,R30
                 ; 0000 00EE         //OCR_val = PID_Controller(Goal, now, &integral, &Err);
                 ; 0000 00EF         //OCR_SET = MV_Rebuilding(-150, 150, OCR_val);
                 ; 0000 00F0         //producePWM(OCR_val, OCR_SET);
                 ; 0000 00F1 
                 ; 0000 00F2 
                 ; 0000 00F3         tick += TCNT2;
0001dc b5e4      	IN   R30,0x24
0001dd 0ebe      	ADD  R11,R30
                 ; 0000 00F4         TCNT2 = 0;
0001de e0e0      	LDI  R30,LOW(0)
0001df bde4      	OUT  0x24,R30
                 ; 0000 00F5         Time = 0.000069*tick;
0001e0 2deb      	MOV  R30,R11
0001e1 e0f0      	LDI  R31,0
0001e2 940e 0548 	CALL __CWD1
0001e4 940e 04bc 	CALL __CDF1
                +
0001e6 e1a8     +LDI R26 , LOW ( 0x3890B418 )
0001e7 ebb4     +LDI R27 , HIGH ( 0x3890B418 )
0001e8 e980     +LDI R24 , BYTE3 ( 0x3890B418 )
0001e9 e398     +LDI R25 , BYTE4 ( 0x3890B418 )
                 	__GETD2N 0x3890B418
0001ea 940e 04ea 	CALL __MULF12
0001ec 93e0 0514 	STS  _Time,R30
0001ee 93f0 0515 	STS  _Time+1,R31
0001f0 9360 0516 	STS  _Time+2,R22
0001f2 9370 0517 	STS  _Time+3,R23
                 ; 0000 00F6         sprintf(BUFF, "Goal=%d, current=%d, Err=%d \r\n", hall_sensor_value, now, (int)Err);
0001f4 01fe      	MOVW R30,R28
0001f5 9634      	ADIW R30,4
0001f6 93fa      	ST   -Y,R31
0001f7 93ea      	ST   -Y,R30
                +
0001f8 e4e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001f9 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001fa 93fa      	ST   -Y,R31
0001fb 93ea      	ST   -Y,R30
0001fc 01f2      	MOVW R30,R4
0001fd 940e 0421 	CALL SUBOPT_0x1
0001ff 01fa      	MOVW R30,R20
000200 940e 0421 	CALL SUBOPT_0x1
                +
000202 01fe     +MOVW R30 , R28
000203 56ea     +SUBI R30 , LOW ( - 150 )
000204 4fff     +SBCI R31 , HIGH ( - 150 )
000205 9001     +LD R0 , Z +
000206 9011     +LD R1 , Z +
000207 9161     +LD R22 , Z +
000208 8170     +LD R23 , Z
000209 01f0     +MOVW R30 , R0
                 	__GETD1SX 150
00020a 940e 0485 	CALL __CFD1
00020c 940e 0421 	CALL SUBOPT_0x1
00020e e08c      	LDI  R24,12
00020f 940e 038d 	CALL _sprintf
000211 9660      	ADIW R28,16
                 ; 0000 00F7         string_tx1(BUFF);
000212 01fe      	MOVW R30,R28
000213 9634      	ADIW R30,4
000214 93fa      	ST   -Y,R31
000215 93ea      	ST   -Y,R30
000216 df0a      	RCALL _string_tx1
                 ; 0000 00F8 
                 ; 0000 00F9         tick = 0;
000217 24bb      	CLR  R11
                 ; 0000 00FA     }
000218 cfa4      	RJMP _0x45
                 ; 0000 00FB }
                 _0x4C:
000219 cfff      	RJMP _0x4C
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
00021a 931a      	ST   -Y,R17
00021b 930a      	ST   -Y,R16
00021c 81aa      	LDD  R26,Y+2
00021d 81bb      	LDD  R27,Y+2+1
00021e 9612      	ADIW R26,2
00021f 940e 0568 	CALL __GETW1P
000221 9730      	SBIW R30,0
000222 f159      	BREQ _0x2000010
000223 81aa      	LDD  R26,Y+2
000224 81bb      	LDD  R27,Y+2+1
000225 9614      	ADIW R26,4
000226 940e 0568 	CALL __GETW1P
000228 018f      	MOVW R16,R30
000229 9730      	SBIW R30,0
00022a f061      	BREQ _0x2000012
                +
00022b 3002     +CPI R16 , LOW ( 2 )
00022c e0e0     +LDI R30 , HIGH ( 2 )
00022d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00022e f0f0      	BRLO _0x2000013
00022f 01f8      	MOVW R30,R16
000230 9731      	SBIW R30,1
000231 018f      	MOVW R16,R30
                +
000232 81aa     +LDD R26 , Y + 2
000233 81bb     +LDD R27 , Y + 2 + 1
000234 9614     +ADIW R26 , 4
000235 93ed     +ST X + , R30
000236 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000237 81aa      	LDD  R26,Y+2
000238 81bb      	LDD  R27,Y+2+1
000239 9612      	ADIW R26,2
00023a 91ed      	LD   R30,X+
00023b 91fd      	LD   R31,X+
00023c 9631      	ADIW R30,1
00023d 93fe      	ST   -X,R31
00023e 93ee      	ST   -X,R30
00023f 9731      	SBIW R30,1
000240 81ac      	LDD  R26,Y+4
000241 83a0      	STD  Z+0,R26
000242 81aa      	LDD  R26,Y+2
000243 81bb      	LDD  R27,Y+2+1
000244 940e 0568 	CALL __GETW1P
000246 23ff      	TST  R31
000247 f02a      	BRMI _0x2000014
000248 91ed      	LD   R30,X+
000249 91fd      	LD   R31,X+
00024a 9631      	ADIW R30,1
00024b 93fe      	ST   -X,R31
00024c 93ee      	ST   -X,R30
                 _0x2000014:
                 _0x2000013:
00024d c006      	RJMP _0x2000015
                 _0x2000010:
00024e 81aa      	LDD  R26,Y+2
00024f 81bb      	LDD  R27,Y+2+1
000250 efef      	LDI  R30,LOW(65535)
000251 efff      	LDI  R31,HIGH(65535)
000252 93ed      	ST   X+,R30
000253 93fc      	ST   X,R31
                 _0x2000015:
000254 8119      	LDD  R17,Y+1
000255 8108      	LDD  R16,Y+0
000256 9625      	ADIW R28,5
000257 9508      	RET
                 __print_G100:
000258 9726      	SBIW R28,6
000259 940e 0575 	CALL __SAVELOCR6
00025b e010      	LDI  R17,0
00025c 85ac      	LDD  R26,Y+12
00025d 85bd      	LDD  R27,Y+12+1
00025e e0e0      	LDI  R30,LOW(0)
00025f e0f0      	LDI  R31,HIGH(0)
000260 93ed      	ST   X+,R30
000261 93fc      	ST   X,R31
                 _0x2000016:
000262 89ea      	LDD  R30,Y+18
000263 89fb      	LDD  R31,Y+18+1
000264 9631      	ADIW R30,1
000265 8bea      	STD  Y+18,R30
000266 8bfb      	STD  Y+18+1,R31
000267 9731      	SBIW R30,1
000268 91e4      	LPM  R30,Z
000269 2f2e      	MOV  R18,R30
00026a 30e0      	CPI  R30,0
00026b f411      	BRNE PC+3
00026c 940c 0385 	JMP _0x2000018
00026e 2fe1      	MOV  R30,R17
00026f 30e0      	CPI  R30,0
000270 f439      	BRNE _0x200001C
000271 3225      	CPI  R18,37
000272 f411      	BRNE _0x200001D
000273 e011      	LDI  R17,LOW(1)
000274 c002      	RJMP _0x200001E
                 _0x200001D:
000275 940e 0426 	CALL SUBOPT_0x2
                 _0x200001E:
000277 c10c      	RJMP _0x200001B
                 _0x200001C:
000278 30e1      	CPI  R30,LOW(0x1)
000279 f4a9      	BRNE _0x200001F
00027a 3225      	CPI  R18,37
00027b f419      	BRNE _0x2000020
00027c 940e 0426 	CALL SUBOPT_0x2
00027e c104      	RJMP _0x20000C9
                 _0x2000020:
00027f e012      	LDI  R17,LOW(2)
000280 e040      	LDI  R20,LOW(0)
000281 e000      	LDI  R16,LOW(0)
000282 322d      	CPI  R18,45
000283 f411      	BRNE _0x2000021
000284 e001      	LDI  R16,LOW(1)
000285 c0fe      	RJMP _0x200001B
                 _0x2000021:
000286 322b      	CPI  R18,43
000287 f411      	BRNE _0x2000022
000288 e24b      	LDI  R20,LOW(43)
000289 c0fa      	RJMP _0x200001B
                 _0x2000022:
00028a 3220      	CPI  R18,32
00028b f411      	BRNE _0x2000023
00028c e240      	LDI  R20,LOW(32)
00028d c0f6      	RJMP _0x200001B
                 _0x2000023:
00028e c002      	RJMP _0x2000024
                 _0x200001F:
00028f 30e2      	CPI  R30,LOW(0x2)
000290 f439      	BRNE _0x2000025
                 _0x2000024:
000291 e050      	LDI  R21,LOW(0)
000292 e013      	LDI  R17,LOW(3)
000293 3320      	CPI  R18,48
000294 f411      	BRNE _0x2000026
000295 6800      	ORI  R16,LOW(128)
000296 c0ed      	RJMP _0x200001B
                 _0x2000026:
000297 c004      	RJMP _0x2000027
                 _0x2000025:
000298 30e3      	CPI  R30,LOW(0x3)
000299 f011      	BREQ PC+3
00029a 940c 0384 	JMP _0x200001B
                 _0x2000027:
00029c 3320      	CPI  R18,48
00029d f010      	BRLO _0x200002A
00029e 332a      	CPI  R18,58
00029f f008      	BRLO _0x200002B
                 _0x200002A:
0002a0 c007      	RJMP _0x2000029
                 _0x200002B:
0002a1 e0aa      	LDI  R26,LOW(10)
0002a2 9f5a      	MUL  R21,R26
0002a3 2d50      	MOV  R21,R0
0002a4 2fe2      	MOV  R30,R18
0002a5 53e0      	SUBI R30,LOW(48)
0002a6 0f5e      	ADD  R21,R30
0002a7 c0dc      	RJMP _0x200001B
                 _0x2000029:
0002a8 2fe2      	MOV  R30,R18
0002a9 36e3      	CPI  R30,LOW(0x63)
0002aa f449      	BRNE _0x200002F
0002ab 940e 042f 	CALL SUBOPT_0x3
0002ad 89e8      	LDD  R30,Y+16
0002ae 89f9      	LDD  R31,Y+16+1
0002af 81a4      	LDD  R26,Z+4
0002b0 93aa      	ST   -Y,R26
0002b1 940e 0435 	CALL SUBOPT_0x4
0002b3 c0cf      	RJMP _0x2000030
                 _0x200002F:
0002b4 37e3      	CPI  R30,LOW(0x73)
0002b5 f441      	BRNE _0x2000032
0002b6 940e 042f 	CALL SUBOPT_0x3
0002b8 940e 043d 	CALL SUBOPT_0x5
0002ba 940e 0406 	CALL _strlen
0002bc 2f1e      	MOV  R17,R30
0002bd c00a      	RJMP _0x2000033
                 _0x2000032:
0002be 37e0      	CPI  R30,LOW(0x70)
0002bf f461      	BRNE _0x2000035
0002c0 940e 042f 	CALL SUBOPT_0x3
0002c2 940e 043d 	CALL SUBOPT_0x5
0002c4 940e 0410 	CALL _strlenf
0002c6 2f1e      	MOV  R17,R30
0002c7 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0002c8 6002      	ORI  R16,LOW(2)
0002c9 770f      	ANDI R16,LOW(127)
0002ca e030      	LDI  R19,LOW(0)
0002cb c035      	RJMP _0x2000036
                 _0x2000035:
0002cc 36e4      	CPI  R30,LOW(0x64)
0002cd f011      	BREQ _0x2000039
0002ce 36e9      	CPI  R30,LOW(0x69)
0002cf f411      	BRNE _0x200003A
                 _0x2000039:
0002d0 6004      	ORI  R16,LOW(4)
0002d1 c002      	RJMP _0x200003B
                 _0x200003A:
0002d2 37e5      	CPI  R30,LOW(0x75)
0002d3 f431      	BRNE _0x200003C
                 _0x200003B:
0002d4 e8ec      	LDI  R30,LOW(_tbl10_G100*2)
0002d5 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0002d6 83ee      	STD  Y+6,R30
0002d7 83ff      	STD  Y+6+1,R31
0002d8 e015      	LDI  R17,LOW(5)
0002d9 c00d      	RJMP _0x200003D
                 _0x200003C:
0002da 35e8      	CPI  R30,LOW(0x58)
0002db f411      	BRNE _0x200003F
0002dc 6008      	ORI  R16,LOW(8)
0002dd c004      	RJMP _0x2000040
                 _0x200003F:
0002de 37e8      	CPI  R30,LOW(0x78)
0002df f011      	BREQ PC+3
0002e0 940c 0383 	JMP _0x2000071
                 _0x2000040:
0002e2 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
0002e3 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0002e4 83ee      	STD  Y+6,R30
0002e5 83ff      	STD  Y+6+1,R31
0002e6 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0002e7 ff02      	SBRS R16,2
0002e8 c014      	RJMP _0x2000042
0002e9 940e 042f 	CALL SUBOPT_0x3
0002eb 940e 0447 	CALL SUBOPT_0x6
0002ed 85ab      	LDD  R26,Y+11
0002ee 23aa      	TST  R26
0002ef f43a      	BRPL _0x2000043
0002f0 85ea      	LDD  R30,Y+10
0002f1 85fb      	LDD  R31,Y+10+1
0002f2 940e 053c 	CALL __ANEGW1
0002f4 87ea      	STD  Y+10,R30
0002f5 87fb      	STD  Y+10+1,R31
0002f6 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0002f7 3040      	CPI  R20,0
0002f8 f011      	BREQ _0x2000044
0002f9 5f1f      	SUBI R17,-LOW(1)
0002fa c001      	RJMP _0x2000045
                 _0x2000044:
0002fb 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0002fc c004      	RJMP _0x2000046
                 _0x2000042:
0002fd 940e 042f 	CALL SUBOPT_0x3
0002ff 940e 0447 	CALL SUBOPT_0x6
                 _0x2000046:
                 _0x2000036:
000301 fd00      	SBRC R16,0
000302 c011      	RJMP _0x2000047
                 _0x2000048:
000303 1715      	CP   R17,R21
000304 f478      	BRSH _0x200004A
000305 ff07      	SBRS R16,7
000306 c008      	RJMP _0x200004B
000307 ff02      	SBRS R16,2
000308 c004      	RJMP _0x200004C
000309 7f0b      	ANDI R16,LOW(251)
00030a 2f24      	MOV  R18,R20
00030b 5011      	SUBI R17,LOW(1)
00030c c001      	RJMP _0x200004D
                 _0x200004C:
00030d e320      	LDI  R18,LOW(48)
                 _0x200004D:
00030e c001      	RJMP _0x200004E
                 _0x200004B:
00030f e220      	LDI  R18,LOW(32)
                 _0x200004E:
000310 940e 0426 	CALL SUBOPT_0x2
000312 5051      	SUBI R21,LOW(1)
000313 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000314 2f31      	MOV  R19,R17
000315 ff01      	SBRS R16,1
000316 c017      	RJMP _0x200004F
                 _0x2000050:
000317 3030      	CPI  R19,0
000318 f0a1      	BREQ _0x2000052
000319 ff03      	SBRS R16,3
00031a c006      	RJMP _0x2000053
00031b 81ee      	LDD  R30,Y+6
00031c 81ff      	LDD  R31,Y+6+1
00031d 9125      	LPM  R18,Z+
00031e 83ee      	STD  Y+6,R30
00031f 83ff      	STD  Y+6+1,R31
000320 c005      	RJMP _0x2000054
                 _0x2000053:
000321 81ae      	LDD  R26,Y+6
000322 81bf      	LDD  R27,Y+6+1
000323 912d      	LD   R18,X+
000324 83ae      	STD  Y+6,R26
000325 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000326 940e 0426 	CALL SUBOPT_0x2
000328 3050      	CPI  R21,0
000329 f009      	BREQ _0x2000055
00032a 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00032b 5031      	SUBI R19,LOW(1)
00032c cfea      	RJMP _0x2000050
                 _0x2000052:
00032d c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00032e e320      	LDI  R18,LOW(48)
00032f 81ee      	LDD  R30,Y+6
000330 81ff      	LDD  R31,Y+6+1
000331 940e 056c 	CALL __GETW1PF
000333 87e8      	STD  Y+8,R30
000334 87f9      	STD  Y+8+1,R31
000335 81ee      	LDD  R30,Y+6
000336 81ff      	LDD  R31,Y+6+1
000337 9632      	ADIW R30,2
000338 83ee      	STD  Y+6,R30
000339 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00033a 85e8      	LDD  R30,Y+8
00033b 85f9      	LDD  R31,Y+8+1
00033c 85aa      	LDD  R26,Y+10
00033d 85bb      	LDD  R27,Y+10+1
00033e 17ae      	CP   R26,R30
00033f 07bf      	CPC  R27,R31
000340 f050      	BRLO _0x200005C
000341 5f2f      	SUBI R18,-LOW(1)
000342 85a8      	LDD  R26,Y+8
000343 85b9      	LDD  R27,Y+8+1
000344 85ea      	LDD  R30,Y+10
000345 85fb      	LDD  R31,Y+10+1
000346 1bea      	SUB  R30,R26
000347 0bfb      	SBC  R31,R27
000348 87ea      	STD  Y+10,R30
000349 87fb      	STD  Y+10+1,R31
00034a cfef      	RJMP _0x200005A
                 _0x200005C:
00034b 332a      	CPI  R18,58
00034c f028      	BRLO _0x200005D
00034d ff03      	SBRS R16,3
00034e c002      	RJMP _0x200005E
00034f 5f29      	SUBI R18,-LOW(7)
000350 c001      	RJMP _0x200005F
                 _0x200005E:
000351 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000352 fd04      	SBRC R16,4
000353 c01a      	RJMP _0x2000061
000354 3321      	CPI  R18,49
000355 f420      	BRSH _0x2000063
000356 85a8      	LDD  R26,Y+8
000357 85b9      	LDD  R27,Y+8+1
000358 9711      	SBIW R26,1
000359 f409      	BRNE _0x2000062
                 _0x2000063:
00035a c009      	RJMP _0x20000CA
                 _0x2000062:
00035b 1753      	CP   R21,R19
00035c f010      	BRLO _0x2000067
00035d ff00      	SBRS R16,0
00035e c001      	RJMP _0x2000068
                 _0x2000067:
00035f c013      	RJMP _0x2000066
                 _0x2000068:
000360 e220      	LDI  R18,LOW(32)
000361 ff07      	SBRS R16,7
000362 c00b      	RJMP _0x2000069
000363 e320      	LDI  R18,LOW(48)
                 _0x20000CA:
000364 6100      	ORI  R16,LOW(16)
000365 ff02      	SBRS R16,2
000366 c007      	RJMP _0x200006A
000367 7f0b      	ANDI R16,LOW(251)
000368 934a      	ST   -Y,R20
000369 940e 0435 	CALL SUBOPT_0x4
00036b 3050      	CPI  R21,0
00036c f009      	BREQ _0x200006B
00036d 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00036e 940e 0426 	CALL SUBOPT_0x2
000370 3050      	CPI  R21,0
000371 f009      	BREQ _0x200006C
000372 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000373 5031      	SUBI R19,LOW(1)
000374 85a8      	LDD  R26,Y+8
000375 85b9      	LDD  R27,Y+8+1
000376 9712      	SBIW R26,2
000377 f008      	BRLO _0x2000059
000378 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000379 ff00      	SBRS R16,0
00037a c008      	RJMP _0x200006D
                 _0x200006E:
00037b 3050      	CPI  R21,0
00037c f031      	BREQ _0x2000070
00037d 5051      	SUBI R21,LOW(1)
00037e e2e0      	LDI  R30,LOW(32)
00037f 93ea      	ST   -Y,R30
000380 940e 0435 	CALL SUBOPT_0x4
000382 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
000383 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000384 cedd      	RJMP _0x2000016
                 _0x2000018:
000385 85ac      	LDD  R26,Y+12
000386 85bd      	LDD  R27,Y+12+1
000387 940e 0568 	CALL __GETW1P
000389 940e 057c 	CALL __LOADLOCR6
00038b 9664      	ADIW R28,20
00038c 9508      	RET
                 _sprintf:
00038d 92ff      	PUSH R15
00038e 2ef8      	MOV  R15,R24
00038f 9726      	SBIW R28,6
000390 940e 0577 	CALL __SAVELOCR4
000392 940e 044f 	CALL SUBOPT_0x7
000394 9730      	SBIW R30,0
000395 f419      	BRNE _0x2000072
000396 efef      	LDI  R30,LOW(65535)
000397 efff      	LDI  R31,HIGH(65535)
000398 c025      	RJMP _0x20A0001
                 _0x2000072:
000399 01de      	MOVW R26,R28
00039a 9616      	ADIW R26,6
00039b 940e 0538 	CALL __ADDW2R15
00039d 018d      	MOVW R16,R26
00039e 940e 044f 	CALL SUBOPT_0x7
0003a0 83ee      	STD  Y+6,R30
0003a1 83ff      	STD  Y+6+1,R31
0003a2 e0e0      	LDI  R30,LOW(0)
0003a3 87e8      	STD  Y+8,R30
0003a4 87e9      	STD  Y+8+1,R30
0003a5 01de      	MOVW R26,R28
0003a6 961a      	ADIW R26,10
0003a7 940e 0538 	CALL __ADDW2R15
0003a9 940e 0568 	CALL __GETW1P
0003ab 93fa      	ST   -Y,R31
0003ac 93ea      	ST   -Y,R30
0003ad 931a      	ST   -Y,R17
0003ae 930a      	ST   -Y,R16
0003af e1ea      	LDI  R30,LOW(_put_buff_G100)
0003b0 e0f2      	LDI  R31,HIGH(_put_buff_G100)
0003b1 93fa      	ST   -Y,R31
0003b2 93ea      	ST   -Y,R30
0003b3 01fe      	MOVW R30,R28
0003b4 963a      	ADIW R30,10
0003b5 93fa      	ST   -Y,R31
0003b6 93ea      	ST   -Y,R30
0003b7 dea0      	RCALL __print_G100
0003b8 019f      	MOVW R18,R30
0003b9 81ae      	LDD  R26,Y+6
0003ba 81bf      	LDD  R27,Y+6+1
0003bb e0e0      	LDI  R30,LOW(0)
0003bc 93ec      	ST   X,R30
0003bd 01f9      	MOVW R30,R18
                 _0x20A0001:
0003be 940e 057e 	CALL __LOADLOCR4
0003c0 962a      	ADIW R28,10
0003c1 90ff      	POP  R15
0003c2 9508      	RET
                 
                 	.CSEG
                 _atoi:
0003c3 81b9         	ldd  r27,y+1
0003c4 81a8         	ld   r26,y
                 __atoi0:
0003c5 91ec         	ld   r30,x
0003c6 93ea      	ST   -Y,R30
0003c7 940e 03fc 	CALL _isspace
0003c9 23ee         	tst  r30
0003ca f011         	breq __atoi1
0003cb 9611         	adiw r26,1
0003cc cff8         	rjmp __atoi0
                 __atoi1:
0003cd 94e8         	clt
0003ce 91ec         	ld   r30,x
0003cf 32ed         	cpi  r30,'-'
0003d0 f411         	brne __atoi2
0003d1 9468         	set
0003d2 c002         	rjmp __atoi3
                 __atoi2:
0003d3 32eb         	cpi  r30,'+'
0003d4 f409         	brne __atoi4
                 __atoi3:
0003d5 9611         	adiw r26,1
                 __atoi4:
0003d6 2766         	clr  r22
0003d7 2777         	clr  r23
                 __atoi5:
0003d8 91ec         	ld   r30,x
0003d9 93ea      	ST   -Y,R30
0003da 940e 03f4 	CALL _isdigit
0003dc 23ee         	tst  r30
0003dd f079         	breq __atoi6
0003de 01fb         	movw r30,r22
0003df 0f66         	lsl  r22
0003e0 1f77         	rol  r23
0003e1 0f66         	lsl  r22
0003e2 1f77         	rol  r23
0003e3 0f6e         	add  r22,r30
0003e4 1f7f         	adc  r23,r31
0003e5 0f66         	lsl  r22
0003e6 1f77         	rol  r23
0003e7 91ed         	ld   r30,x+
0003e8 27ff         	clr  r31
0003e9 53e0         	subi r30,'0'
0003ea 0f6e         	add  r22,r30
0003eb 1f7f         	adc  r23,r31
0003ec cfeb         	rjmp __atoi5
                 __atoi6:
0003ed 01fb         	movw r30,r22
0003ee f41e         	brtc __atoi7
0003ef 95e0         	com  r30
0003f0 95f0         	com  r31
0003f1 9631         	adiw r30,1
                 __atoi7:
0003f2 9622         	adiw r28,2
0003f3 9508         	ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _isdigit:
0003f4 e0e1          ldi  r30,1
0003f5 91f9          ld   r31,y+
0003f6 33f0          cpi  r31,'0'
0003f7 f010          brlo isdigit0
0003f8 33fa          cpi  r31,'9'+1
0003f9 f008          brlo isdigit1
                 isdigit0:
0003fa 27ee          clr  r30
                 isdigit1:
0003fb 9508          ret
                 _isspace:
0003fc e0e1          ldi  r30,1
0003fd 91f9          ld   r31,y+
0003fe 32f0          cpi  r31,' '
0003ff f029          breq isspace1
000400 30f9          cpi  r31,9
000401 f010          brlo isspace0
000402 30fe          cpi  r31,13+1
000403 f008          brlo isspace1
                 isspace0:
000404 27ee          clr  r30
                 isspace1:
000405 9508          ret
                 
                 	.CSEG
                 _strlen:
000406 91a9          ld   r26,y+
000407 91b9          ld   r27,y+
000408 27ee          clr  r30
000409 27ff          clr  r31
                 strlen0:
00040a 916d          ld   r22,x+
00040b 2366          tst  r22
00040c f011          breq strlen1
00040d 9631          adiw r30,1
00040e cffb          rjmp strlen0
                 strlen1:
00040f 9508          ret
                 _strlenf:
000410 27aa          clr  r26
000411 27bb          clr  r27
000412 91e9          ld   r30,y+
000413 91f9          ld   r31,y+
                 strlenf0:
000414 9005      	lpm  r0,z+
000415 2000          tst  r0
000416 f011          breq strlenf1
000417 9611          adiw r26,1
000418 cffb          rjmp strlenf0
                 strlenf1:
000419 01fd          movw r30,r26
00041a 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _RXC_BUFF:
000500           	.BYTE 0x14
                 _Time:
000514           	.BYTE 0x4
                 __seed_G101:
000518           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00041b 93aa      	ST   -Y,R26
00041c 93ea      	ST   -Y,R30
00041d 93fa      	ST   -Y,R31
00041e b7ef      	IN   R30,SREG
00041f 93ea      	ST   -Y,R30
000420 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000421 940e 0548 	CALL __CWD1
000423 940e 0570 	CALL __PUTPARD1
000425 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x2:
000426 932a      	ST   -Y,R18
000427 85ed      	LDD  R30,Y+13
000428 85fe      	LDD  R31,Y+13+1
000429 93fa      	ST   -Y,R31
00042a 93ea      	ST   -Y,R30
00042b 89e9      	LDD  R30,Y+17
00042c 89fa      	LDD  R31,Y+17+1
00042d 9509      	ICALL
00042e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
00042f 89e8      	LDD  R30,Y+16
000430 89f9      	LDD  R31,Y+16+1
000431 9734      	SBIW R30,4
000432 8be8      	STD  Y+16,R30
000433 8bf9      	STD  Y+16+1,R31
000434 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000435 85ed      	LDD  R30,Y+13
000436 85fe      	LDD  R31,Y+13+1
000437 93fa      	ST   -Y,R31
000438 93ea      	ST   -Y,R30
000439 89e9      	LDD  R30,Y+17
00043a 89fa      	LDD  R31,Y+17+1
00043b 9509      	ICALL
00043c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
00043d 89a8      	LDD  R26,Y+16
00043e 89b9      	LDD  R27,Y+16+1
00043f 9614      	ADIW R26,4
000440 940e 0568 	CALL __GETW1P
000442 83ee      	STD  Y+6,R30
000443 83ff      	STD  Y+6+1,R31
000444 93fa      	ST   -Y,R31
000445 93ea      	ST   -Y,R30
000446 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000447 89a8      	LDD  R26,Y+16
000448 89b9      	LDD  R27,Y+16+1
000449 9614      	ADIW R26,4
00044a 940e 0568 	CALL __GETW1P
00044c 87ea      	STD  Y+10,R30
00044d 87fb      	STD  Y+10+1,R31
00044e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00044f 01de      	MOVW R26,R28
000450 961c      	ADIW R26,12
000451 940e 0538 	CALL __ADDW2R15
000453 940e 0568 	CALL __GETW1P
000455 9508      	RET
                 
                 
                 	.CSEG
                 __ROUND_REPACK:
000456 2355      	TST  R21
000457 f442      	BRPL __REPACK
000458 3850      	CPI  R21,0x80
000459 f411      	BRNE __ROUND_REPACK0
00045a ffe0      	SBRS R30,0
00045b c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00045c 9631      	ADIW R30,1
00045d 1f69      	ADC  R22,R25
00045e 1f79      	ADC  R23,R25
00045f f06b      	BRVS __REPACK1
                 
                 __REPACK:
000460 e850      	LDI  R21,0x80
000461 2757      	EOR  R21,R23
000462 f411      	BRNE __REPACK0
000463 935f      	PUSH R21
000464 c073      	RJMP __ZERORES
                 __REPACK0:
000465 3f5f      	CPI  R21,0xFF
000466 f031      	BREQ __REPACK1
000467 0f66      	LSL  R22
000468 0c00      	LSL  R0
000469 9557      	ROR  R21
00046a 9567      	ROR  R22
00046b 2f75      	MOV  R23,R21
00046c 9508      	RET
                 __REPACK1:
00046d 935f      	PUSH R21
00046e 2000      	TST  R0
00046f f00a      	BRMI __REPACK2
000470 c073      	RJMP __MAXRES
                 __REPACK2:
000471 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000472 e850      	LDI  R21,0x80
000473 2e19      	MOV  R1,R25
000474 2215      	AND  R1,R21
000475 0f88      	LSL  R24
000476 1f99      	ROL  R25
000477 2795      	EOR  R25,R21
000478 0f55      	LSL  R21
000479 9587      	ROR  R24
                 
                 __UNPACK1:
00047a e850      	LDI  R21,0x80
00047b 2e07      	MOV  R0,R23
00047c 2205      	AND  R0,R21
00047d 0f66      	LSL  R22
00047e 1f77      	ROL  R23
00047f 2775      	EOR  R23,R21
000480 0f55      	LSL  R21
000481 9567      	ROR  R22
000482 9508      	RET
                 
                 __CFD1U:
000483 9468      	SET
000484 c001      	RJMP __CFD1U0
                 __CFD1:
000485 94e8      	CLT
                 __CFD1U0:
000486 935f      	PUSH R21
000487 dff2      	RCALL __UNPACK1
000488 3870      	CPI  R23,0x80
000489 f018      	BRLO __CFD10
00048a 3f7f      	CPI  R23,0xFF
00048b f408      	BRCC __CFD10
00048c c04b      	RJMP __ZERORES
                 __CFD10:
00048d e156      	LDI  R21,22
00048e 1b57      	SUB  R21,R23
00048f f4aa      	BRPL __CFD11
000490 9551      	NEG  R21
000491 3058      	CPI  R21,8
000492 f40e      	BRTC __CFD19
000493 3059      	CPI  R21,9
                 __CFD19:
000494 f030      	BRLO __CFD17
000495 efef      	SER  R30
000496 efff      	SER  R31
000497 ef6f      	SER  R22
000498 e77f      	LDI  R23,0x7F
000499 f977      	BLD  R23,7
00049a c01a      	RJMP __CFD15
                 __CFD17:
00049b 2777      	CLR  R23
00049c 2355      	TST  R21
00049d f0b9      	BREQ __CFD15
                 __CFD18:
00049e 0fee      	LSL  R30
00049f 1fff      	ROL  R31
0004a0 1f66      	ROL  R22
0004a1 1f77      	ROL  R23
0004a2 955a      	DEC  R21
0004a3 f7d1      	BRNE __CFD18
0004a4 c010      	RJMP __CFD15
                 __CFD11:
0004a5 2777      	CLR  R23
                 __CFD12:
0004a6 3058      	CPI  R21,8
0004a7 f028      	BRLO __CFD13
0004a8 2fef      	MOV  R30,R31
0004a9 2ff6      	MOV  R31,R22
0004aa 2f67      	MOV  R22,R23
0004ab 5058      	SUBI R21,8
0004ac cff9      	RJMP __CFD12
                 __CFD13:
0004ad 2355      	TST  R21
0004ae f031      	BREQ __CFD15
                 __CFD14:
0004af 9576      	LSR  R23
0004b0 9567      	ROR  R22
0004b1 95f7      	ROR  R31
0004b2 95e7      	ROR  R30
0004b3 955a      	DEC  R21
0004b4 f7d1      	BRNE __CFD14
                 __CFD15:
0004b5 2000      	TST  R0
0004b6 f40a      	BRPL __CFD16
0004b7 d088      	RCALL __ANEGD1
                 __CFD16:
0004b8 915f      	POP  R21
0004b9 9508      	RET
                 
                 __CDF1U:
0004ba 9468      	SET
0004bb c001      	RJMP __CDF1U0
                 __CDF1:
0004bc 94e8      	CLT
                 __CDF1U0:
0004bd 9730      	SBIW R30,0
0004be 4060      	SBCI R22,0
0004bf 4070      	SBCI R23,0
0004c0 f0b1      	BREQ __CDF10
0004c1 2400      	CLR  R0
0004c2 f026      	BRTS __CDF11
0004c3 2377      	TST  R23
0004c4 f412      	BRPL __CDF11
0004c5 9400      	COM  R0
0004c6 d079      	RCALL __ANEGD1
                 __CDF11:
0004c7 2e17      	MOV  R1,R23
0004c8 e17e      	LDI  R23,30
0004c9 2011      	TST  R1
                 __CDF12:
0004ca f032      	BRMI __CDF13
0004cb 957a      	DEC  R23
0004cc 0fee      	LSL  R30
0004cd 1fff      	ROL  R31
0004ce 1f66      	ROL  R22
0004cf 1c11      	ROL  R1
0004d0 cff9      	RJMP __CDF12
                 __CDF13:
0004d1 2fef      	MOV  R30,R31
0004d2 2ff6      	MOV  R31,R22
0004d3 2d61      	MOV  R22,R1
0004d4 935f      	PUSH R21
0004d5 df8a      	RCALL __REPACK
0004d6 915f      	POP  R21
                 __CDF10:
0004d7 9508      	RET
                 
                 __ZERORES:
0004d8 27ee      	CLR  R30
0004d9 27ff      	CLR  R31
0004da 2766      	CLR  R22
0004db 2777      	CLR  R23
0004dc 915f      	POP  R21
0004dd 9508      	RET
                 
                 __MINRES:
0004de efef      	SER  R30
0004df efff      	SER  R31
0004e0 e76f      	LDI  R22,0x7F
0004e1 ef7f      	SER  R23
0004e2 915f      	POP  R21
0004e3 9508      	RET
                 
                 __MAXRES:
0004e4 efef      	SER  R30
0004e5 efff      	SER  R31
0004e6 e76f      	LDI  R22,0x7F
0004e7 e77f      	LDI  R23,0x7F
0004e8 915f      	POP  R21
0004e9 9508      	RET
                 
                 __MULF12:
0004ea 935f      	PUSH R21
0004eb df86      	RCALL __UNPACK
0004ec 3870      	CPI  R23,0x80
0004ed f351      	BREQ __ZERORES
0004ee 3890      	CPI  R25,0x80
0004ef f341      	BREQ __ZERORES
0004f0 2401      	EOR  R0,R1
0004f1 9408      	SEC
0004f2 1f79      	ADC  R23,R25
0004f3 f423      	BRVC __MULF124
0004f4 f31c      	BRLT __ZERORES
                 __MULF125:
0004f5 2000      	TST  R0
0004f6 f33a      	BRMI __MINRES
0004f7 cfec      	RJMP __MAXRES
                 __MULF124:
0004f8 920f      	PUSH R0
0004f9 931f      	PUSH R17
0004fa 932f      	PUSH R18
0004fb 933f      	PUSH R19
0004fc 934f      	PUSH R20
0004fd 2711      	CLR  R17
0004fe 2722      	CLR  R18
0004ff 2799      	CLR  R25
000500 9f68      	MUL  R22,R24
000501 01a0      	MOVW R20,R0
000502 9f8f      	MUL  R24,R31
000503 2d30      	MOV  R19,R0
000504 0d41      	ADD  R20,R1
000505 1f59      	ADC  R21,R25
000506 9f6b      	MUL  R22,R27
000507 0d30      	ADD  R19,R0
000508 1d41      	ADC  R20,R1
000509 1f59      	ADC  R21,R25
00050a 9f8e      	MUL  R24,R30
00050b d027      	RCALL __MULF126
00050c 9fbf      	MUL  R27,R31
00050d d025      	RCALL __MULF126
00050e 9f6a      	MUL  R22,R26
00050f d023      	RCALL __MULF126
000510 9fbe      	MUL  R27,R30
000511 d01d      	RCALL __MULF127
000512 9faf      	MUL  R26,R31
000513 d01b      	RCALL __MULF127
000514 9fae      	MUL  R26,R30
000515 0d11      	ADD  R17,R1
000516 1f29      	ADC  R18,R25
000517 1f39      	ADC  R19,R25
000518 1f49      	ADC  R20,R25
000519 1f59      	ADC  R21,R25
00051a 2fe3      	MOV  R30,R19
00051b 2ff4      	MOV  R31,R20
00051c 2f65      	MOV  R22,R21
00051d 2f52      	MOV  R21,R18
00051e 914f      	POP  R20
00051f 913f      	POP  R19
000520 912f      	POP  R18
000521 911f      	POP  R17
000522 900f      	POP  R0
000523 2366      	TST  R22
000524 f02a      	BRMI __MULF122
000525 0f55      	LSL  R21
000526 1fee      	ROL  R30
000527 1fff      	ROL  R31
000528 1f66      	ROL  R22
000529 c002      	RJMP __MULF123
                 __MULF122:
00052a 9573      	INC  R23
00052b f24b      	BRVS __MULF125
                 __MULF123:
00052c df29      	RCALL __ROUND_REPACK
00052d 915f      	POP  R21
00052e 9508      	RET
                 
                 __MULF127:
00052f 0d10      	ADD  R17,R0
000530 1d21      	ADC  R18,R1
000531 1f39      	ADC  R19,R25
000532 c002      	RJMP __MULF128
                 __MULF126:
000533 0d20      	ADD  R18,R0
000534 1d31      	ADC  R19,R1
                 __MULF128:
000535 1f49      	ADC  R20,R25
000536 1f59      	ADC  R21,R25
000537 9508      	RET
                 
                 __ADDW2R15:
000538 2400      	CLR  R0
000539 0daf      	ADD  R26,R15
00053a 1db0      	ADC  R27,R0
00053b 9508      	RET
                 
                 __ANEGW1:
00053c 95f1      	NEG  R31
00053d 95e1      	NEG  R30
00053e 40f0      	SBCI R31,0
00053f 9508      	RET
                 
                 __ANEGD1:
000540 95f0      	COM  R31
000541 9560      	COM  R22
000542 9570      	COM  R23
000543 95e1      	NEG  R30
000544 4fff      	SBCI R31,-1
000545 4f6f      	SBCI R22,-1
000546 4f7f      	SBCI R23,-1
000547 9508      	RET
                 
                 __CWD1:
000548 2f6f      	MOV  R22,R31
000549 0f66      	ADD  R22,R22
00054a 0b66      	SBC  R22,R22
00054b 2f76      	MOV  R23,R22
00054c 9508      	RET
                 
                 __MULW12U:
00054d 9ffa      	MUL  R31,R26
00054e 2df0      	MOV  R31,R0
00054f 9feb      	MUL  R30,R27
000550 0df0      	ADD  R31,R0
000551 9fea      	MUL  R30,R26
000552 2de0      	MOV  R30,R0
000553 0df1      	ADD  R31,R1
000554 9508      	RET
                 
                 __MULW12:
000555 d004      	RCALL __CHKSIGNW
000556 dff6      	RCALL __MULW12U
000557 f40e      	BRTC __MULW121
000558 dfe3      	RCALL __ANEGW1
                 __MULW121:
000559 9508      	RET
                 
                 __CHKSIGNW:
00055a 94e8      	CLT
00055b fff7      	SBRS R31,7
00055c c002      	RJMP __CHKSW1
00055d dfde      	RCALL __ANEGW1
00055e 9468      	SET
                 __CHKSW1:
00055f ffb7      	SBRS R27,7
000560 c006      	RJMP __CHKSW2
000561 95a0      	COM  R26
000562 95b0      	COM  R27
000563 9611      	ADIW R26,1
000564 f800      	BLD  R0,0
000565 9403      	INC  R0
000566 fa00      	BST  R0,0
                 __CHKSW2:
000567 9508      	RET
                 
                 __GETW1P:
000568 91ed      	LD   R30,X+
000569 91fc      	LD   R31,X
00056a 9711      	SBIW R26,1
00056b 9508      	RET
                 
                 __GETW1PF:
00056c 9005      	LPM  R0,Z+
00056d 91f4      	LPM  R31,Z
00056e 2de0      	MOV  R30,R0
00056f 9508      	RET
                 
                 __PUTPARD1:
000570 937a      	ST   -Y,R23
000571 936a      	ST   -Y,R22
000572 93fa      	ST   -Y,R31
000573 93ea      	ST   -Y,R30
000574 9508      	RET
                 
                 __SAVELOCR6:
000575 935a      	ST   -Y,R21
                 __SAVELOCR5:
000576 934a      	ST   -Y,R20
                 __SAVELOCR4:
000577 933a      	ST   -Y,R19
                 __SAVELOCR3:
000578 932a      	ST   -Y,R18
                 __SAVELOCR2:
000579 931a      	ST   -Y,R17
00057a 930a      	ST   -Y,R16
00057b 9508      	RET
                 
                 __LOADLOCR6:
00057c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00057d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00057e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00057f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000580 8119      	LDD  R17,Y+1
000581 8108      	LD   R16,Y
000582 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000583 0fac      	ADD  R26,R28
000584 1fbd      	ADC  R27,R29
                 __INITLOC0:
000585 9005      	LPM  R0,Z+
000586 920d      	ST   X+,R0
000587 958a      	DEC  R24
000588 f7e1      	BRNE __INITLOC0
000589 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  37 r1 :  15 r2 :   0 r3 :   0 r4 :  11 r5 :   0 r6 :   4 r7 :   3 
r8 :   3 r9 :   0 r10:   0 r11:   4 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  39 r17:  30 r18:  38 r19:  17 r20:  20 r21:  62 r22:  46 r23:  39 
r24:  18 r25:  20 r26:  81 r27:  41 r28:  21 r29:   2 r30: 280 r31: 114 
x  :  32 y  : 168 z  :  20 
Registers used: 27 out of 35 (77.1%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  20 add   :  16 
adiw  :  33 and   :   2 andi  :   5 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  30 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   1 brmi  :   5 brne  :  28 brpl  :   5 brsh  :   2 brtc  :   3 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   1 bst   :   1 call  :  56 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  26 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   8 
cp    :   7 cpc   :   3 cpi   :  48 cpse  :   0 dec   :   5 des   :   0 
elpm  :   0 eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   5 inc   :   3 jmp   :  39 ld    :  38 ldd   :  70 
ldi   : 125 lds   :   2 lpm   :  15 lsl   :  12 lsr   :   1 mov   :  33 
movw  :  35 mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   0 ori   :   7 out   :  23 pop   :  12 push  :  11 rcall :  22 
ret   :  44 reti  :   3 rjmp  :  78 rol   :  14 ror   :   7 sbc   :   2 
sbci  :   9 sbi   :   6 sbic  :   6 sbis  :   0 sbiw  :  22 sbr   :   0 
sbrc  :   2 sbrs  :  13 sec   :   1 seh   :   0 sei   :   0 sen   :   0 
ser   :   8 ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  69 std   :  30 sts   :  13 sub   :   2 subi  :  18 
swap  :   0 tst   :  16 wdr   :   0 
Instructions used: 73 out of 117 (62.4%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b14   2580    256   2836  131072   2.2%
[.dseg] 0x000100 0x00051c      0     28     28    4351   0.6%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 10 warnings
